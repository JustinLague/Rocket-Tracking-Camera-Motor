
Rocket-Tracking-Camera-Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a800  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800a990  0800a990  0001a990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab30  0800ab30  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab30  0800ab30  0001ab30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab38  0800ab38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab38  0800ab38  0001ab38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab3c  0800ab3c  0001ab3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ab40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c60  20000074  0800abb4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cd4  0800abb4  00021cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000222ba  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000408b  00000000  00000000  0004235e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  000463f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001958  00000000  00000000  00047ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e3f  00000000  00000000  00049818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5e0  00000000  00000000  00073657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffffd  00000000  00000000  00092c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00192c34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007594  00000000  00000000  00192c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a978 	.word	0x0800a978

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a978 	.word	0x0800a978

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_d2uiz>:
 8000558:	004a      	lsls	r2, r1, #1
 800055a:	d211      	bcs.n	8000580 <__aeabi_d2uiz+0x28>
 800055c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000560:	d211      	bcs.n	8000586 <__aeabi_d2uiz+0x2e>
 8000562:	d50d      	bpl.n	8000580 <__aeabi_d2uiz+0x28>
 8000564:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000568:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800056c:	d40e      	bmi.n	800058c <__aeabi_d2uiz+0x34>
 800056e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000576:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800057a:	fa23 f002 	lsr.w	r0, r3, r2
 800057e:	4770      	bx	lr
 8000580:	f04f 0000 	mov.w	r0, #0
 8000584:	4770      	bx	lr
 8000586:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800058a:	d102      	bne.n	8000592 <__aeabi_d2uiz+0x3a>
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	4770      	bx	lr
 8000592:	f04f 0000 	mov.w	r0, #0
 8000596:	4770      	bx	lr

08000598 <__aeabi_uldivmod>:
 8000598:	b953      	cbnz	r3, 80005b0 <__aeabi_uldivmod+0x18>
 800059a:	b94a      	cbnz	r2, 80005b0 <__aeabi_uldivmod+0x18>
 800059c:	2900      	cmp	r1, #0
 800059e:	bf08      	it	eq
 80005a0:	2800      	cmpeq	r0, #0
 80005a2:	bf1c      	itt	ne
 80005a4:	f04f 31ff 	movne.w	r1, #4294967295
 80005a8:	f04f 30ff 	movne.w	r0, #4294967295
 80005ac:	f000 b974 	b.w	8000898 <__aeabi_idiv0>
 80005b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80005b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b8:	f000 f806 	bl	80005c8 <__udivmoddi4>
 80005bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005c4:	b004      	add	sp, #16
 80005c6:	4770      	bx	lr

080005c8 <__udivmoddi4>:
 80005c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005cc:	9d08      	ldr	r5, [sp, #32]
 80005ce:	4604      	mov	r4, r0
 80005d0:	468e      	mov	lr, r1
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d14d      	bne.n	8000672 <__udivmoddi4+0xaa>
 80005d6:	428a      	cmp	r2, r1
 80005d8:	4694      	mov	ip, r2
 80005da:	d969      	bls.n	80006b0 <__udivmoddi4+0xe8>
 80005dc:	fab2 f282 	clz	r2, r2
 80005e0:	b152      	cbz	r2, 80005f8 <__udivmoddi4+0x30>
 80005e2:	fa01 f302 	lsl.w	r3, r1, r2
 80005e6:	f1c2 0120 	rsb	r1, r2, #32
 80005ea:	fa20 f101 	lsr.w	r1, r0, r1
 80005ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f2:	ea41 0e03 	orr.w	lr, r1, r3
 80005f6:	4094      	lsls	r4, r2
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	0c21      	lsrs	r1, r4, #16
 80005fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000602:	fa1f f78c 	uxth.w	r7, ip
 8000606:	fb08 e316 	mls	r3, r8, r6, lr
 800060a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800060e:	fb06 f107 	mul.w	r1, r6, r7
 8000612:	4299      	cmp	r1, r3
 8000614:	d90a      	bls.n	800062c <__udivmoddi4+0x64>
 8000616:	eb1c 0303 	adds.w	r3, ip, r3
 800061a:	f106 30ff 	add.w	r0, r6, #4294967295
 800061e:	f080 811f 	bcs.w	8000860 <__udivmoddi4+0x298>
 8000622:	4299      	cmp	r1, r3
 8000624:	f240 811c 	bls.w	8000860 <__udivmoddi4+0x298>
 8000628:	3e02      	subs	r6, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f0f8 	udiv	r0, r3, r8
 8000634:	fb08 3310 	mls	r3, r8, r0, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb00 f707 	mul.w	r7, r0, r7
 8000640:	42a7      	cmp	r7, r4
 8000642:	d90a      	bls.n	800065a <__udivmoddi4+0x92>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f100 33ff 	add.w	r3, r0, #4294967295
 800064c:	f080 810a 	bcs.w	8000864 <__udivmoddi4+0x29c>
 8000650:	42a7      	cmp	r7, r4
 8000652:	f240 8107 	bls.w	8000864 <__udivmoddi4+0x29c>
 8000656:	4464      	add	r4, ip
 8000658:	3802      	subs	r0, #2
 800065a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800065e:	1be4      	subs	r4, r4, r7
 8000660:	2600      	movs	r6, #0
 8000662:	b11d      	cbz	r5, 800066c <__udivmoddi4+0xa4>
 8000664:	40d4      	lsrs	r4, r2
 8000666:	2300      	movs	r3, #0
 8000668:	e9c5 4300 	strd	r4, r3, [r5]
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	428b      	cmp	r3, r1
 8000674:	d909      	bls.n	800068a <__udivmoddi4+0xc2>
 8000676:	2d00      	cmp	r5, #0
 8000678:	f000 80ef 	beq.w	800085a <__udivmoddi4+0x292>
 800067c:	2600      	movs	r6, #0
 800067e:	e9c5 0100 	strd	r0, r1, [r5]
 8000682:	4630      	mov	r0, r6
 8000684:	4631      	mov	r1, r6
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	fab3 f683 	clz	r6, r3
 800068e:	2e00      	cmp	r6, #0
 8000690:	d14a      	bne.n	8000728 <__udivmoddi4+0x160>
 8000692:	428b      	cmp	r3, r1
 8000694:	d302      	bcc.n	800069c <__udivmoddi4+0xd4>
 8000696:	4282      	cmp	r2, r0
 8000698:	f200 80f9 	bhi.w	800088e <__udivmoddi4+0x2c6>
 800069c:	1a84      	subs	r4, r0, r2
 800069e:	eb61 0303 	sbc.w	r3, r1, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	469e      	mov	lr, r3
 80006a6:	2d00      	cmp	r5, #0
 80006a8:	d0e0      	beq.n	800066c <__udivmoddi4+0xa4>
 80006aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80006ae:	e7dd      	b.n	800066c <__udivmoddi4+0xa4>
 80006b0:	b902      	cbnz	r2, 80006b4 <__udivmoddi4+0xec>
 80006b2:	deff      	udf	#255	; 0xff
 80006b4:	fab2 f282 	clz	r2, r2
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	f040 8092 	bne.w	80007e2 <__udivmoddi4+0x21a>
 80006be:	eba1 010c 	sub.w	r1, r1, ip
 80006c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006c6:	fa1f fe8c 	uxth.w	lr, ip
 80006ca:	2601      	movs	r6, #1
 80006cc:	0c20      	lsrs	r0, r4, #16
 80006ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80006d2:	fb07 1113 	mls	r1, r7, r3, r1
 80006d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006da:	fb0e f003 	mul.w	r0, lr, r3
 80006de:	4288      	cmp	r0, r1
 80006e0:	d908      	bls.n	80006f4 <__udivmoddi4+0x12c>
 80006e2:	eb1c 0101 	adds.w	r1, ip, r1
 80006e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80006ea:	d202      	bcs.n	80006f2 <__udivmoddi4+0x12a>
 80006ec:	4288      	cmp	r0, r1
 80006ee:	f200 80cb 	bhi.w	8000888 <__udivmoddi4+0x2c0>
 80006f2:	4643      	mov	r3, r8
 80006f4:	1a09      	subs	r1, r1, r0
 80006f6:	b2a4      	uxth	r4, r4
 80006f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80006fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000700:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000704:	fb0e fe00 	mul.w	lr, lr, r0
 8000708:	45a6      	cmp	lr, r4
 800070a:	d908      	bls.n	800071e <__udivmoddi4+0x156>
 800070c:	eb1c 0404 	adds.w	r4, ip, r4
 8000710:	f100 31ff 	add.w	r1, r0, #4294967295
 8000714:	d202      	bcs.n	800071c <__udivmoddi4+0x154>
 8000716:	45a6      	cmp	lr, r4
 8000718:	f200 80bb 	bhi.w	8000892 <__udivmoddi4+0x2ca>
 800071c:	4608      	mov	r0, r1
 800071e:	eba4 040e 	sub.w	r4, r4, lr
 8000722:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000726:	e79c      	b.n	8000662 <__udivmoddi4+0x9a>
 8000728:	f1c6 0720 	rsb	r7, r6, #32
 800072c:	40b3      	lsls	r3, r6
 800072e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000732:	ea4c 0c03 	orr.w	ip, ip, r3
 8000736:	fa20 f407 	lsr.w	r4, r0, r7
 800073a:	fa01 f306 	lsl.w	r3, r1, r6
 800073e:	431c      	orrs	r4, r3
 8000740:	40f9      	lsrs	r1, r7
 8000742:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000746:	fa00 f306 	lsl.w	r3, r0, r6
 800074a:	fbb1 f8f9 	udiv	r8, r1, r9
 800074e:	0c20      	lsrs	r0, r4, #16
 8000750:	fa1f fe8c 	uxth.w	lr, ip
 8000754:	fb09 1118 	mls	r1, r9, r8, r1
 8000758:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800075c:	fb08 f00e 	mul.w	r0, r8, lr
 8000760:	4288      	cmp	r0, r1
 8000762:	fa02 f206 	lsl.w	r2, r2, r6
 8000766:	d90b      	bls.n	8000780 <__udivmoddi4+0x1b8>
 8000768:	eb1c 0101 	adds.w	r1, ip, r1
 800076c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000770:	f080 8088 	bcs.w	8000884 <__udivmoddi4+0x2bc>
 8000774:	4288      	cmp	r0, r1
 8000776:	f240 8085 	bls.w	8000884 <__udivmoddi4+0x2bc>
 800077a:	f1a8 0802 	sub.w	r8, r8, #2
 800077e:	4461      	add	r1, ip
 8000780:	1a09      	subs	r1, r1, r0
 8000782:	b2a4      	uxth	r4, r4
 8000784:	fbb1 f0f9 	udiv	r0, r1, r9
 8000788:	fb09 1110 	mls	r1, r9, r0, r1
 800078c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000790:	fb00 fe0e 	mul.w	lr, r0, lr
 8000794:	458e      	cmp	lr, r1
 8000796:	d908      	bls.n	80007aa <__udivmoddi4+0x1e2>
 8000798:	eb1c 0101 	adds.w	r1, ip, r1
 800079c:	f100 34ff 	add.w	r4, r0, #4294967295
 80007a0:	d26c      	bcs.n	800087c <__udivmoddi4+0x2b4>
 80007a2:	458e      	cmp	lr, r1
 80007a4:	d96a      	bls.n	800087c <__udivmoddi4+0x2b4>
 80007a6:	3802      	subs	r0, #2
 80007a8:	4461      	add	r1, ip
 80007aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007ae:	fba0 9402 	umull	r9, r4, r0, r2
 80007b2:	eba1 010e 	sub.w	r1, r1, lr
 80007b6:	42a1      	cmp	r1, r4
 80007b8:	46c8      	mov	r8, r9
 80007ba:	46a6      	mov	lr, r4
 80007bc:	d356      	bcc.n	800086c <__udivmoddi4+0x2a4>
 80007be:	d053      	beq.n	8000868 <__udivmoddi4+0x2a0>
 80007c0:	b15d      	cbz	r5, 80007da <__udivmoddi4+0x212>
 80007c2:	ebb3 0208 	subs.w	r2, r3, r8
 80007c6:	eb61 010e 	sbc.w	r1, r1, lr
 80007ca:	fa01 f707 	lsl.w	r7, r1, r7
 80007ce:	fa22 f306 	lsr.w	r3, r2, r6
 80007d2:	40f1      	lsrs	r1, r6
 80007d4:	431f      	orrs	r7, r3
 80007d6:	e9c5 7100 	strd	r7, r1, [r5]
 80007da:	2600      	movs	r6, #0
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	40d8      	lsrs	r0, r3
 80007e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80007ec:	fa21 f303 	lsr.w	r3, r1, r3
 80007f0:	4091      	lsls	r1, r2
 80007f2:	4301      	orrs	r1, r0
 80007f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007f8:	fa1f fe8c 	uxth.w	lr, ip
 80007fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000800:	fb07 3610 	mls	r6, r7, r0, r3
 8000804:	0c0b      	lsrs	r3, r1, #16
 8000806:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800080a:	fb00 f60e 	mul.w	r6, r0, lr
 800080e:	429e      	cmp	r6, r3
 8000810:	fa04 f402 	lsl.w	r4, r4, r2
 8000814:	d908      	bls.n	8000828 <__udivmoddi4+0x260>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f100 38ff 	add.w	r8, r0, #4294967295
 800081e:	d22f      	bcs.n	8000880 <__udivmoddi4+0x2b8>
 8000820:	429e      	cmp	r6, r3
 8000822:	d92d      	bls.n	8000880 <__udivmoddi4+0x2b8>
 8000824:	3802      	subs	r0, #2
 8000826:	4463      	add	r3, ip
 8000828:	1b9b      	subs	r3, r3, r6
 800082a:	b289      	uxth	r1, r1
 800082c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000830:	fb07 3316 	mls	r3, r7, r6, r3
 8000834:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000838:	fb06 f30e 	mul.w	r3, r6, lr
 800083c:	428b      	cmp	r3, r1
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x28a>
 8000840:	eb1c 0101 	adds.w	r1, ip, r1
 8000844:	f106 38ff 	add.w	r8, r6, #4294967295
 8000848:	d216      	bcs.n	8000878 <__udivmoddi4+0x2b0>
 800084a:	428b      	cmp	r3, r1
 800084c:	d914      	bls.n	8000878 <__udivmoddi4+0x2b0>
 800084e:	3e02      	subs	r6, #2
 8000850:	4461      	add	r1, ip
 8000852:	1ac9      	subs	r1, r1, r3
 8000854:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000858:	e738      	b.n	80006cc <__udivmoddi4+0x104>
 800085a:	462e      	mov	r6, r5
 800085c:	4628      	mov	r0, r5
 800085e:	e705      	b.n	800066c <__udivmoddi4+0xa4>
 8000860:	4606      	mov	r6, r0
 8000862:	e6e3      	b.n	800062c <__udivmoddi4+0x64>
 8000864:	4618      	mov	r0, r3
 8000866:	e6f8      	b.n	800065a <__udivmoddi4+0x92>
 8000868:	454b      	cmp	r3, r9
 800086a:	d2a9      	bcs.n	80007c0 <__udivmoddi4+0x1f8>
 800086c:	ebb9 0802 	subs.w	r8, r9, r2
 8000870:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000874:	3801      	subs	r0, #1
 8000876:	e7a3      	b.n	80007c0 <__udivmoddi4+0x1f8>
 8000878:	4646      	mov	r6, r8
 800087a:	e7ea      	b.n	8000852 <__udivmoddi4+0x28a>
 800087c:	4620      	mov	r0, r4
 800087e:	e794      	b.n	80007aa <__udivmoddi4+0x1e2>
 8000880:	4640      	mov	r0, r8
 8000882:	e7d1      	b.n	8000828 <__udivmoddi4+0x260>
 8000884:	46d0      	mov	r8, sl
 8000886:	e77b      	b.n	8000780 <__udivmoddi4+0x1b8>
 8000888:	3b02      	subs	r3, #2
 800088a:	4461      	add	r1, ip
 800088c:	e732      	b.n	80006f4 <__udivmoddi4+0x12c>
 800088e:	4630      	mov	r0, r6
 8000890:	e709      	b.n	80006a6 <__udivmoddi4+0xde>
 8000892:	4464      	add	r4, ip
 8000894:	3802      	subs	r0, #2
 8000896:	e742      	b.n	800071e <__udivmoddi4+0x156>

08000898 <__aeabi_idiv0>:
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <tsk_i2c>:

/******************************************************************************/
/*                             Function implementation                        */
/******************************************************************************/

void tsk_i2c() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	update_motor_mutexHandle = osMutexNew(&update_motor_mutex_attributes);
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <tsk_i2c+0x54>)
 80008a2:	f006 feb8 	bl	8007616 <osMutexNew>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <tsk_i2c+0x58>)
 80008aa:	6013      	str	r3, [r2, #0]

	init_motor(&motor_x);
 80008ac:	4812      	ldr	r0, [pc, #72]	; (80008f8 <tsk_i2c+0x5c>)
 80008ae:	f000 fa45 	bl	8000d3c <init_motor>
	motor_x.type = MOTOR_X;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <tsk_i2c+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]

	init_motor(&motor_y);
 80008b8:	4810      	ldr	r0, [pc, #64]	; (80008fc <tsk_i2c+0x60>)
 80008ba:	f000 fa3f 	bl	8000d3c <init_motor>
	motor_y.type = MOTOR_Y;
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <tsk_i2c+0x60>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]

	init_motor(&motor_zoom);
 80008c4:	480e      	ldr	r0, [pc, #56]	; (8000900 <tsk_i2c+0x64>)
 80008c6:	f000 fa39 	bl	8000d3c <init_motor>
	motor_zoom.type = MOTOR_ZOOM;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <tsk_i2c+0x64>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	701a      	strb	r2, [r3, #0]

	if(HAL_I2C_EnableListen_IT(get_hi2cl()) != HAL_OK) {
 80008d0:	f000 fcbc 	bl	800124c <get_hi2cl>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fff6 	bl	80028c8 <HAL_I2C_EnableListen_IT>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <tsk_i2c+0x4a>
		Error_Handler();
 80008e2:	f001 f831 	bl	8001948 <Error_Handler>
	}

	while(1){
		osDelay(10000);
 80008e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80008ea:	f006 fe79 	bl	80075e0 <osDelay>
 80008ee:	e7fa      	b.n	80008e6 <tsk_i2c+0x4a>
 80008f0:	0800aa0c 	.word	0x0800aa0c
 80008f4:	200000cc 	.word	0x200000cc
 80008f8:	20000090 	.word	0x20000090
 80008fc:	200000a4 	.word	0x200000a4
 8000900:	200000b8 	.word	0x200000b8

08000904 <HAL_I2C_SlaveRxCpltCallback>:
	}
}



void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	uint8_t reg = aRxBuffer[0];
 800090c:	4b9e      	ldr	r3, [pc, #632]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	73fb      	strb	r3, [r7, #15]

	//UPDATE speed of motors
	if(reg == UPDATE_SPEED_MOTORS) {
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	2b10      	cmp	r3, #16
 8000916:	d122      	bne.n	800095e <HAL_I2C_SlaveRxCpltCallback+0x5a>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000918:	4b9c      	ldr	r3, [pc, #624]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f006 feff 	bl	8007722 <osMutexAcquire>
			motor_x.desired_speed.uint8Val[0] = aRxBuffer[1];
 8000924:	4b98      	ldr	r3, [pc, #608]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000926:	785a      	ldrb	r2, [r3, #1]
 8000928:	4b99      	ldr	r3, [pc, #612]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 800092a:	709a      	strb	r2, [r3, #2]
			motor_x.desired_speed.uint8Val[1] = aRxBuffer[2];
 800092c:	4b96      	ldr	r3, [pc, #600]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 800092e:	789a      	ldrb	r2, [r3, #2]
 8000930:	4b97      	ldr	r3, [pc, #604]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 8000932:	70da      	strb	r2, [r3, #3]
			motor_y.desired_speed.uint8Val[0] = aRxBuffer[3];
 8000934:	4b94      	ldr	r3, [pc, #592]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000936:	78da      	ldrb	r2, [r3, #3]
 8000938:	4b96      	ldr	r3, [pc, #600]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 800093a:	709a      	strb	r2, [r3, #2]
			motor_y.desired_speed.uint8Val[1] = aRxBuffer[4];
 800093c:	4b92      	ldr	r3, [pc, #584]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 800093e:	791a      	ldrb	r2, [r3, #4]
 8000940:	4b94      	ldr	r3, [pc, #592]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 8000942:	70da      	strb	r2, [r3, #3]
			motor_zoom.desired_speed.uint8Val[0] = aRxBuffer[5];
 8000944:	4b90      	ldr	r3, [pc, #576]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000946:	795a      	ldrb	r2, [r3, #5]
 8000948:	4b93      	ldr	r3, [pc, #588]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 800094a:	709a      	strb	r2, [r3, #2]
			motor_zoom.desired_speed.uint8Val[1] = aRxBuffer[6];
 800094c:	4b8e      	ldr	r3, [pc, #568]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 800094e:	799a      	ldrb	r2, [r3, #6]
 8000950:	4b91      	ldr	r3, [pc, #580]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 8000952:	70da      	strb	r2, [r3, #3]
		osMutexRelease(update_motor_mutexHandle);
 8000954:	4b8d      	ldr	r3, [pc, #564]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f006 ff2d 	bl	80077b8 <osMutexRelease>
	}

	//UPDATE speed of motor x
	if(reg == UPDATE_SPEED_MOTOR_X) {
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b11      	cmp	r3, #17
 8000962:	d112      	bne.n	800098a <HAL_I2C_SlaveRxCpltCallback+0x86>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000964:	4b89      	ldr	r3, [pc, #548]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f006 fed9 	bl	8007722 <osMutexAcquire>
			motor_x.desired_speed.uint8Val[0] = aRxBuffer[1];
 8000970:	4b85      	ldr	r3, [pc, #532]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000972:	785a      	ldrb	r2, [r3, #1]
 8000974:	4b86      	ldr	r3, [pc, #536]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 8000976:	709a      	strb	r2, [r3, #2]
			motor_x.desired_speed.uint8Val[1] = aRxBuffer[2];
 8000978:	4b83      	ldr	r3, [pc, #524]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 800097a:	789a      	ldrb	r2, [r3, #2]
 800097c:	4b84      	ldr	r3, [pc, #528]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 800097e:	70da      	strb	r2, [r3, #3]
		osMutexRelease(update_motor_mutexHandle);
 8000980:	4b82      	ldr	r3, [pc, #520]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f006 ff17 	bl	80077b8 <osMutexRelease>
	}

	//UPDATE speed of motor y
	if(reg == UPDATE_SPEED_MOTOR_Y) {
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b12      	cmp	r3, #18
 800098e:	d112      	bne.n	80009b6 <HAL_I2C_SlaveRxCpltCallback+0xb2>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000990:	4b7e      	ldr	r3, [pc, #504]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f006 fec3 	bl	8007722 <osMutexAcquire>
			motor_y.desired_speed.uint8Val[0] = aRxBuffer[1];
 800099c:	4b7a      	ldr	r3, [pc, #488]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 800099e:	785a      	ldrb	r2, [r3, #1]
 80009a0:	4b7c      	ldr	r3, [pc, #496]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 80009a2:	709a      	strb	r2, [r3, #2]
			motor_y.desired_speed.uint8Val[1] = aRxBuffer[2];
 80009a4:	4b78      	ldr	r3, [pc, #480]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 80009a6:	789a      	ldrb	r2, [r3, #2]
 80009a8:	4b7a      	ldr	r3, [pc, #488]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 80009aa:	70da      	strb	r2, [r3, #3]
		osMutexRelease(update_motor_mutexHandle);
 80009ac:	4b77      	ldr	r3, [pc, #476]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f006 ff01 	bl	80077b8 <osMutexRelease>
	}

	//UPDATE speed of motor zoom
	if(reg == UPDATE_SPEED_MOTOR_ZOOM) {
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b13      	cmp	r3, #19
 80009ba:	d112      	bne.n	80009e2 <HAL_I2C_SlaveRxCpltCallback+0xde>
		osMutexAcquire(update_motor_mutexHandle, 0);
 80009bc:	4b73      	ldr	r3, [pc, #460]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f006 fead 	bl	8007722 <osMutexAcquire>
			motor_zoom.desired_speed.uint8Val[0] = aRxBuffer[1];
 80009c8:	4b6f      	ldr	r3, [pc, #444]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 80009ca:	785a      	ldrb	r2, [r3, #1]
 80009cc:	4b72      	ldr	r3, [pc, #456]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 80009ce:	709a      	strb	r2, [r3, #2]
			motor_zoom.desired_speed.uint8Val[1] = aRxBuffer[2];
 80009d0:	4b6d      	ldr	r3, [pc, #436]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 80009d2:	789a      	ldrb	r2, [r3, #2]
 80009d4:	4b70      	ldr	r3, [pc, #448]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 80009d6:	70da      	strb	r2, [r3, #3]
		osMutexRelease(update_motor_mutexHandle);
 80009d8:	4b6c      	ldr	r3, [pc, #432]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f006 feeb 	bl	80077b8 <osMutexRelease>
	}

	if(reg == UPDATE_MAX_ACCELERATION_MOTORS) {
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	2b20      	cmp	r3, #32
 80009e6:	d122      	bne.n	8000a2e <HAL_I2C_SlaveRxCpltCallback+0x12a>
		osMutexAcquire(update_motor_mutexHandle, 0);
 80009e8:	4b68      	ldr	r3, [pc, #416]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 fe97 	bl	8007722 <osMutexAcquire>
			motor_x.max_acceleration.uint8Val[0] = aRxBuffer[1];
 80009f4:	4b64      	ldr	r3, [pc, #400]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 80009f6:	785a      	ldrb	r2, [r3, #1]
 80009f8:	4b65      	ldr	r3, [pc, #404]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 80009fa:	711a      	strb	r2, [r3, #4]
			motor_x.max_acceleration.uint8Val[1] = aRxBuffer[2];
 80009fc:	4b62      	ldr	r3, [pc, #392]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 80009fe:	789a      	ldrb	r2, [r3, #2]
 8000a00:	4b63      	ldr	r3, [pc, #396]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 8000a02:	715a      	strb	r2, [r3, #5]
			motor_y.max_acceleration.uint8Val[0] = aRxBuffer[3];
 8000a04:	4b60      	ldr	r3, [pc, #384]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000a06:	78da      	ldrb	r2, [r3, #3]
 8000a08:	4b62      	ldr	r3, [pc, #392]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 8000a0a:	711a      	strb	r2, [r3, #4]
			motor_y.max_acceleration.uint8Val[1] = aRxBuffer[4];
 8000a0c:	4b5e      	ldr	r3, [pc, #376]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000a0e:	791a      	ldrb	r2, [r3, #4]
 8000a10:	4b60      	ldr	r3, [pc, #384]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 8000a12:	715a      	strb	r2, [r3, #5]
			motor_zoom.max_acceleration.uint8Val[0] = aRxBuffer[5];
 8000a14:	4b5c      	ldr	r3, [pc, #368]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000a16:	795a      	ldrb	r2, [r3, #5]
 8000a18:	4b5f      	ldr	r3, [pc, #380]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 8000a1a:	711a      	strb	r2, [r3, #4]
			motor_zoom.max_acceleration.uint8Val[1] = aRxBuffer[6];
 8000a1c:	4b5a      	ldr	r3, [pc, #360]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000a1e:	799a      	ldrb	r2, [r3, #6]
 8000a20:	4b5d      	ldr	r3, [pc, #372]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 8000a22:	715a      	strb	r2, [r3, #5]
		osMutexRelease(update_motor_mutexHandle);
 8000a24:	4b59      	ldr	r3, [pc, #356]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f006 fec5 	bl	80077b8 <osMutexRelease>
	}

	if(reg == UPDATE_MAX_ACCELERATION_X) {
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	2b21      	cmp	r3, #33	; 0x21
 8000a32:	d112      	bne.n	8000a5a <HAL_I2C_SlaveRxCpltCallback+0x156>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000a34:	4b55      	ldr	r3, [pc, #340]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f006 fe71 	bl	8007722 <osMutexAcquire>
			motor_x.max_acceleration.uint8Val[0] = aRxBuffer[1];
 8000a40:	4b51      	ldr	r3, [pc, #324]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000a42:	785a      	ldrb	r2, [r3, #1]
 8000a44:	4b52      	ldr	r3, [pc, #328]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 8000a46:	711a      	strb	r2, [r3, #4]
			motor_x.max_acceleration.uint8Val[1] = aRxBuffer[2];
 8000a48:	4b4f      	ldr	r3, [pc, #316]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000a4a:	789a      	ldrb	r2, [r3, #2]
 8000a4c:	4b50      	ldr	r3, [pc, #320]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 8000a4e:	715a      	strb	r2, [r3, #5]
		osMutexRelease(update_motor_mutexHandle);
 8000a50:	4b4e      	ldr	r3, [pc, #312]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f006 feaf 	bl	80077b8 <osMutexRelease>
	}

	if(reg == UPDATE_MAX_ACCELERATION_Y) {
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	2b22      	cmp	r3, #34	; 0x22
 8000a5e:	d112      	bne.n	8000a86 <HAL_I2C_SlaveRxCpltCallback+0x182>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000a60:	4b4a      	ldr	r3, [pc, #296]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f006 fe5b 	bl	8007722 <osMutexAcquire>
			motor_y.max_acceleration.uint8Val[0] = aRxBuffer[1];
 8000a6c:	4b46      	ldr	r3, [pc, #280]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000a6e:	785a      	ldrb	r2, [r3, #1]
 8000a70:	4b48      	ldr	r3, [pc, #288]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 8000a72:	711a      	strb	r2, [r3, #4]
			motor_y.max_acceleration.uint8Val[1] = aRxBuffer[2];
 8000a74:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000a76:	789a      	ldrb	r2, [r3, #2]
 8000a78:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 8000a7a:	715a      	strb	r2, [r3, #5]
		osMutexRelease(update_motor_mutexHandle);
 8000a7c:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f006 fe99 	bl	80077b8 <osMutexRelease>
	}

	if(reg == UPDATE_MAX_ACCELERATION_ZOOM) {
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	2b23      	cmp	r3, #35	; 0x23
 8000a8a:	d112      	bne.n	8000ab2 <HAL_I2C_SlaveRxCpltCallback+0x1ae>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f006 fe45 	bl	8007722 <osMutexAcquire>
			motor_zoom.max_acceleration.uint8Val[0] = aRxBuffer[1];
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000a9a:	785a      	ldrb	r2, [r3, #1]
 8000a9c:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 8000a9e:	711a      	strb	r2, [r3, #4]
			motor_zoom.max_acceleration.uint8Val[1] = aRxBuffer[2];
 8000aa0:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000aa2:	789a      	ldrb	r2, [r3, #2]
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 8000aa6:	715a      	strb	r2, [r3, #5]
		osMutexRelease(update_motor_mutexHandle);
 8000aa8:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f006 fe83 	bl	80077b8 <osMutexRelease>
	}

	//UPDATE direction of motors
	if(reg == UPDATE_DIRECTION_MOTORS) {
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b30      	cmp	r3, #48	; 0x30
 8000ab6:	d116      	bne.n	8000ae6 <HAL_I2C_SlaveRxCpltCallback+0x1e2>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000ab8:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f006 fe2f 	bl	8007722 <osMutexAcquire>
			motor_x.dir = aRxBuffer[1];
 8000ac4:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000ac6:	785a      	ldrb	r2, [r3, #1]
 8000ac8:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 8000aca:	721a      	strb	r2, [r3, #8]
			motor_y.dir = aRxBuffer[2];
 8000acc:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000ace:	789a      	ldrb	r2, [r3, #2]
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 8000ad2:	721a      	strb	r2, [r3, #8]
			motor_zoom.dir = aRxBuffer[3];
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000ad6:	78da      	ldrb	r2, [r3, #3]
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 8000ada:	721a      	strb	r2, [r3, #8]
		osMutexRelease(update_motor_mutexHandle);
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 fe69 	bl	80077b8 <osMutexRelease>
	}

	//UPDATE direction of motor x
	if(reg == UPDATE_DIRECTION_X) {
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b31      	cmp	r3, #49	; 0x31
 8000aea:	d10e      	bne.n	8000b0a <HAL_I2C_SlaveRxCpltCallback+0x206>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f006 fe15 	bl	8007722 <osMutexAcquire>
			motor_x.dir = aRxBuffer[1];
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000afa:	785a      	ldrb	r2, [r3, #1]
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 8000afe:	721a      	strb	r2, [r3, #8]
		osMutexRelease(update_motor_mutexHandle);
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f006 fe57 	bl	80077b8 <osMutexRelease>
	}

	//UPDATE direction of motor y
	if(reg == UPDATE_DIRECTION_Y) {
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b32      	cmp	r3, #50	; 0x32
 8000b0e:	d10e      	bne.n	8000b2e <HAL_I2C_SlaveRxCpltCallback+0x22a>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f006 fe03 	bl	8007722 <osMutexAcquire>
			motor_y.dir = aRxBuffer[1];
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000b1e:	785a      	ldrb	r2, [r3, #1]
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 8000b22:	721a      	strb	r2, [r3, #8]
		osMutexRelease(update_motor_mutexHandle);
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f006 fe45 	bl	80077b8 <osMutexRelease>
	}

	//UPDATE direction of motor zoom
	if(reg == UPDATE_DIRECTION_ZOOM) {
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	2b33      	cmp	r3, #51	; 0x33
 8000b32:	d10e      	bne.n	8000b52 <HAL_I2C_SlaveRxCpltCallback+0x24e>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f006 fdf1 	bl	8007722 <osMutexAcquire>
			motor_zoom.dir = aRxBuffer[1];
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000b42:	785a      	ldrb	r2, [r3, #1]
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 8000b46:	721a      	strb	r2, [r3, #8]
		osMutexRelease(update_motor_mutexHandle);
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f006 fe33 	bl	80077b8 <osMutexRelease>
	}

	//UPDATE mode of motors
	if(reg == UPDATE_MODE_MOTORS) {
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	2b40      	cmp	r3, #64	; 0x40
 8000b56:	d121      	bne.n	8000b9c <HAL_I2C_SlaveRxCpltCallback+0x298>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f006 fddf 	bl	8007722 <osMutexAcquire>
			motor_x.mode = aRxBuffer[1];
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000b66:	785a      	ldrb	r2, [r3, #1]
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 8000b6a:	725a      	strb	r2, [r3, #9]
			motor_y.mode = aRxBuffer[2];
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000b6e:	789a      	ldrb	r2, [r3, #2]
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 8000b72:	725a      	strb	r2, [r3, #9]
			motor_zoom.mode = aRxBuffer[3];
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0x284>)
 8000b76:	78da      	ldrb	r2, [r3, #3]
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <HAL_I2C_SlaveRxCpltCallback+0x294>)
 8000b7a:	725a      	strb	r2, [r3, #9]
		osMutexRelease(update_motor_mutexHandle);
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f006 fe19 	bl	80077b8 <osMutexRelease>
 8000b86:	e009      	b.n	8000b9c <HAL_I2C_SlaveRxCpltCallback+0x298>
 8000b88:	200000d0 	.word	0x200000d0
 8000b8c:	200000cc 	.word	0x200000cc
 8000b90:	20000090 	.word	0x20000090
 8000b94:	200000a4 	.word	0x200000a4
 8000b98:	200000b8 	.word	0x200000b8
	}

	//UPDATE mode of motor x
	if(reg == UPDATE_MODE_X) {
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	2b41      	cmp	r3, #65	; 0x41
 8000ba0:	d10e      	bne.n	8000bc0 <HAL_I2C_SlaveRxCpltCallback+0x2bc>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_I2C_SlaveRxCpltCallback+0x30c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f006 fdba 	bl	8007722 <osMutexAcquire>
			motor_x.mode = aRxBuffer[1];
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_I2C_SlaveRxCpltCallback+0x310>)
 8000bb0:	785a      	ldrb	r2, [r3, #1]
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_I2C_SlaveRxCpltCallback+0x314>)
 8000bb4:	725a      	strb	r2, [r3, #9]
		osMutexRelease(update_motor_mutexHandle);
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <HAL_I2C_SlaveRxCpltCallback+0x30c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f006 fdfc 	bl	80077b8 <osMutexRelease>
	}

	//UPDATE mode of motor y
	if(reg == UPDATE_MODE_Y) {
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	2b42      	cmp	r3, #66	; 0x42
 8000bc4:	d10e      	bne.n	8000be4 <HAL_I2C_SlaveRxCpltCallback+0x2e0>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_I2C_SlaveRxCpltCallback+0x30c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f006 fda8 	bl	8007722 <osMutexAcquire>
			motor_y.mode = aRxBuffer[1];
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_I2C_SlaveRxCpltCallback+0x310>)
 8000bd4:	785a      	ldrb	r2, [r3, #1]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_I2C_SlaveRxCpltCallback+0x318>)
 8000bd8:	725a      	strb	r2, [r3, #9]
		osMutexRelease(update_motor_mutexHandle);
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_I2C_SlaveRxCpltCallback+0x30c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f006 fdea 	bl	80077b8 <osMutexRelease>
	}

	//UPDATE mode of motor zoom
	if(reg == UPDATE_MODE_ZOOM) {
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	2b43      	cmp	r3, #67	; 0x43
 8000be8:	d10e      	bne.n	8000c08 <HAL_I2C_SlaveRxCpltCallback+0x304>
		osMutexAcquire(update_motor_mutexHandle, 0);
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_I2C_SlaveRxCpltCallback+0x30c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f006 fd96 	bl	8007722 <osMutexAcquire>
			motor_zoom.mode = aRxBuffer[1];
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <HAL_I2C_SlaveRxCpltCallback+0x310>)
 8000bf8:	785a      	ldrb	r2, [r3, #1]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_I2C_SlaveRxCpltCallback+0x31c>)
 8000bfc:	725a      	strb	r2, [r3, #9]
		osMutexRelease(update_motor_mutexHandle);
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <HAL_I2C_SlaveRxCpltCallback+0x30c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f006 fdd8 	bl	80077b8 <osMutexRelease>
	}
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200000cc 	.word	0x200000cc
 8000c14:	200000d0 	.word	0x200000d0
 8000c18:	20000090 	.word	0x20000090
 8000c1c:	200000a4 	.word	0x200000a4
 8000c20:	200000b8 	.word	0x200000b8

08000c24 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
 8000c30:	4613      	mov	r3, r2
 8000c32:	803b      	strh	r3, [r7, #0]
	if (TransferDirection != 0) {
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00d      	beq.n	8000c56 <HAL_I2C_AddrCallback+0x32>
		 /*##- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
		 "aTxBuffer" buffer */
		if (HAL_I2C_Slave_Seq_Transmit_IT(get_hi2cl(), (uint8_t *)aTxBuffer, TXBUFFERSIZE, I2C_NEXT_FRAME) != HAL_OK) {
 8000c3a:	f000 fb07 	bl	800124c <get_hi2cl>
 8000c3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c42:	2205      	movs	r2, #5
 8000c44:	4913      	ldr	r1, [pc, #76]	; (8000c94 <HAL_I2C_AddrCallback+0x70>)
 8000c46:	f001 fcf7 	bl	8002638 <HAL_I2C_Slave_Seq_Transmit_IT>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d01c      	beq.n	8000c8a <HAL_I2C_AddrCallback+0x66>
			/* Transfer error in transmission process */
			Error_Handler();
 8000c50:	f000 fe7a 	bl	8001948 <Error_Handler>
		if (HAL_I2C_Slave_Seq_Receive_IT(get_hi2cl(), (uint8_t *)aTxBuffer, 1, I2C_NEXT_FRAME) != HAL_OK) {
			/* Transfer error in reception process */
			Error_Handler();
		}
	}
}
 8000c54:	e019      	b.n	8000c8a <HAL_I2C_AddrCallback+0x66>
		if (HAL_I2C_Slave_Seq_Receive_IT(get_hi2cl(), (uint8_t *)aRxBuffer, 1, I2C_NEXT_FRAME) != HAL_OK) {
 8000c56:	f000 faf9 	bl	800124c <get_hi2cl>
 8000c5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c5e:	2201      	movs	r2, #1
 8000c60:	490d      	ldr	r1, [pc, #52]	; (8000c98 <HAL_I2C_AddrCallback+0x74>)
 8000c62:	f001 fd8d 	bl	8002780 <HAL_I2C_Slave_Seq_Receive_IT>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_I2C_AddrCallback+0x4c>
			Error_Handler();
 8000c6c:	f000 fe6c 	bl	8001948 <Error_Handler>
		if (HAL_I2C_Slave_Seq_Receive_IT(get_hi2cl(), (uint8_t *)aTxBuffer, 1, I2C_NEXT_FRAME) != HAL_OK) {
 8000c70:	f000 faec 	bl	800124c <get_hi2cl>
 8000c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4906      	ldr	r1, [pc, #24]	; (8000c94 <HAL_I2C_AddrCallback+0x70>)
 8000c7c:	f001 fd80 	bl	8002780 <HAL_I2C_Slave_Seq_Receive_IT>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_I2C_AddrCallback+0x66>
			Error_Handler();
 8000c86:	f000 fe5f 	bl	8001948 <Error_Handler>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000d8 	.word	0x200000d8
 8000c98:	200000d0 	.word	0x200000d0

08000c9c <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	//strcpy((char*) debug_buf, "ListenCplt\r\n");
	//HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);

	if(HAL_I2C_EnableListen_IT(get_hi2cl()) != HAL_OK) {
 8000ca4:	f000 fad2 	bl	800124c <get_hi2cl>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fe0c 	bl	80028c8 <HAL_I2C_EnableListen_IT>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_I2C_ListenCpltCallback+0x1e>
		Error_Handler();
 8000cb6:	f000 fe47 	bl	8001948 <Error_Handler>
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */

	strcpy((char*) debug_buf, "Erreur\r\n");
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_I2C_ErrorCallback+0x6c>)
 8000cce:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <HAL_I2C_ErrorCallback+0x70>)
 8000cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cd2:	c303      	stmia	r3!, {r0, r1}
 8000cd4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
 8000cd6:	f000 fac3 	bl	8001260 <get_huart2>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	4814      	ldr	r0, [pc, #80]	; (8000d30 <HAL_I2C_ErrorCallback+0x6c>)
 8000cde:	f7ff fa77 	bl	80001d0 <strlen>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	4911      	ldr	r1, [pc, #68]	; (8000d30 <HAL_I2C_ErrorCallback+0x6c>)
 8000cec:	4620      	mov	r0, r4
 8000cee:	f005 fe03 	bl	80068f8 <HAL_UART_Transmit>

	if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF) {
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 febf 	bl	8002a76 <HAL_I2C_GetError>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d014      	beq.n	8000d28 <HAL_I2C_ErrorCallback+0x64>
		strcpy((char*) debug_buf, "Erreur AF\r\n");
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_I2C_ErrorCallback+0x6c>)
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_I2C_ErrorCallback+0x74>)
 8000d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
 8000d08:	f000 faaa 	bl	8001260 <get_huart2>
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	4808      	ldr	r0, [pc, #32]	; (8000d30 <HAL_I2C_ErrorCallback+0x6c>)
 8000d10:	f7ff fa5e 	bl	80001d0 <strlen>
 8000d14:	4603      	mov	r3, r0
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	4904      	ldr	r1, [pc, #16]	; (8000d30 <HAL_I2C_ErrorCallback+0x6c>)
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f005 fdea 	bl	80068f8 <HAL_UART_Transmit>
		Error_Handler();
 8000d24:	f000 fe10 	bl	8001948 <Error_Handler>
	}
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	200000e0 	.word	0x200000e0
 8000d34:	0800a9a4 	.word	0x0800a9a4
 8000d38:	0800a9b0 	.word	0x0800a9b0

08000d3c <init_motor>:

void init_motor(motor_t* motor) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	motor->dir = 0;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	721a      	strb	r2, [r3, #8]
	motor->mode = 0;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	725a      	strb	r2, [r3, #9]
	motor->desired_speed.uint16Val = 0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	805a      	strh	r2, [r3, #2]
	motor->max_acceleration.uint16Val = 2;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	809a      	strh	r2, [r3, #4]
	motor->actual_speed = 0;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	80da      	strh	r2, [r3, #6]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <get_motor>:

motor_t* get_motor(enum motor_e _motor) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	motor_t* motor;

	switch(_motor){
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d022      	beq.n	8000dc6 <get_motor+0x56>
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	dc2e      	bgt.n	8000de2 <get_motor+0x72>
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <get_motor+0x1e>
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d00e      	beq.n	8000daa <get_motor+0x3a>
 8000d8c:	e029      	b.n	8000de2 <get_motor+0x72>
			case MOTOR_X:
				osMutexAcquire(update_motor_mutexHandle, 0);
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <get_motor+0x7c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f006 fcc4 	bl	8007722 <osMutexAcquire>
					motor = &motor_x;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <get_motor+0x80>)
 8000d9c:	60fb      	str	r3, [r7, #12]
				osMutexRelease(update_motor_mutexHandle);
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <get_motor+0x7c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 fd08 	bl	80077b8 <osMutexRelease>
				break;
 8000da8:	e01b      	b.n	8000de2 <get_motor+0x72>
			case MOTOR_Y:
				osMutexAcquire(update_motor_mutexHandle, 0);
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <get_motor+0x7c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f006 fcb6 	bl	8007722 <osMutexAcquire>
					motor = &motor_y;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <get_motor+0x84>)
 8000db8:	60fb      	str	r3, [r7, #12]
				osMutexRelease(update_motor_mutexHandle);
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <get_motor+0x7c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 fcfa 	bl	80077b8 <osMutexRelease>
				break;
 8000dc4:	e00d      	b.n	8000de2 <get_motor+0x72>
			case MOTOR_ZOOM:
				osMutexAcquire(update_motor_mutexHandle, 0);
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <get_motor+0x7c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 fca8 	bl	8007722 <osMutexAcquire>
					motor = &motor_zoom;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <get_motor+0x88>)
 8000dd4:	60fb      	str	r3, [r7, #12]
				osMutexRelease(update_motor_mutexHandle);
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <get_motor+0x7c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f006 fcec 	bl	80077b8 <osMutexRelease>
				break;
 8000de0:	bf00      	nop
		}

	return motor;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000cc 	.word	0x200000cc
 8000df0:	20000090 	.word	0x20000090
 8000df4:	200000a4 	.word	0x200000a4
 8000df8:	200000b8 	.word	0x200000b8

08000dfc <tsk_motor_control>:
#include "i2c.h"

/******************************************************************************/
/*                             Function implementation                        */
/******************************************************************************/
void tsk_motor_control() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	start_motor_pwm(MOTOR_X);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 f813 	bl	8000e2c <start_motor_pwm>
	start_motor_pwm(MOTOR_Y);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 f810 	bl	8000e2c <start_motor_pwm>
	start_motor_pwm(MOTOR_ZOOM);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f000 f80d 	bl	8000e2c <start_motor_pwm>

	while(1){
		update_motor(MOTOR_Y);
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 f844 	bl	8000ea0 <update_motor>
		update_motor(MOTOR_ZOOM);
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f000 f841 	bl	8000ea0 <update_motor>
		update_motor(MOTOR_X);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f83e 	bl	8000ea0 <update_motor>
		osDelay(2);
 8000e24:	2002      	movs	r0, #2
 8000e26:	f006 fbdb 	bl	80075e0 <osDelay>
		update_motor(MOTOR_Y);
 8000e2a:	e7f2      	b.n	8000e12 <tsk_motor_control+0x16>

08000e2c <start_motor_pwm>:
	}
}

void start_motor_pwm(enum motor_e motor) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	switch(motor){
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d01d      	beq.n	8000e78 <start_motor_pwm+0x4c>
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	dc26      	bgt.n	8000e8e <start_motor_pwm+0x62>
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <start_motor_pwm+0x1e>
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d00c      	beq.n	8000e62 <start_motor_pwm+0x36>
		case MOTOR_ZOOM:
			HAL_TIM_PWM_Start(get_htim8(), TIM_CHANNEL_4);
			TIM4->PSC = 0;
			break;
	}
}
 8000e48:	e021      	b.n	8000e8e <start_motor_pwm+0x62>
			HAL_TIM_PWM_Start(get_htim3(), TIM_CHANNEL_2);
 8000e4a:	f000 f9e1 	bl	8001210 <get_htim3>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2104      	movs	r1, #4
 8000e52:	4618      	mov	r0, r3
 8000e54:	f004 fb82 	bl	800555c <HAL_TIM_PWM_Start>
			TIM2->PSC = 0;
 8000e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8000e60:	e015      	b.n	8000e8e <start_motor_pwm+0x62>
			HAL_TIM_PWM_Start(get_htim4(), TIM_CHANNEL_3);
 8000e62:	f000 f9df 	bl	8001224 <get_htim4>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2108      	movs	r1, #8
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f004 fb76 	bl	800555c <HAL_TIM_PWM_Start>
			TIM3->PSC = 0;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <start_motor_pwm+0x6c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8000e76:	e00a      	b.n	8000e8e <start_motor_pwm+0x62>
			HAL_TIM_PWM_Start(get_htim8(), TIM_CHANNEL_4);
 8000e78:	f000 f9de 	bl	8001238 <get_htim8>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	210c      	movs	r1, #12
 8000e80:	4618      	mov	r0, r3
 8000e82:	f004 fb6b 	bl	800555c <HAL_TIM_PWM_Start>
			TIM4->PSC = 0;
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <start_motor_pwm+0x70>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8000e8c:	bf00      	nop
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40000400 	.word	0x40000400
 8000e9c:	40000800 	.word	0x40000800

08000ea0 <update_motor>:
			HAL_TIM_PWM_Stop(get_htim8(), TIM_CHANNEL_4);
			break;
	}
}

void update_motor(enum motor_e _motor) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	motor_t* motor = get_motor(_motor);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff5f 	bl	8000d70 <get_motor>
 8000eb2:	60f8      	str	r0, [r7, #12]

	if(motor->actual_speed < motor->desired_speed.uint16Val) {
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	88da      	ldrh	r2, [r3, #6]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	885b      	ldrh	r3, [r3, #2]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d208      	bcs.n	8000ed2 <update_motor+0x32>
		motor->actual_speed += motor->max_acceleration.uint16Val;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	88da      	ldrh	r2, [r3, #6]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	889b      	ldrh	r3, [r3, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	80da      	strh	r2, [r3, #6]
 8000ed0:	e00d      	b.n	8000eee <update_motor+0x4e>
	} else if(motor->actual_speed > motor->desired_speed.uint16Val) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	88da      	ldrh	r2, [r3, #6]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	885b      	ldrh	r3, [r3, #2]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d907      	bls.n	8000eee <update_motor+0x4e>
		motor->actual_speed -= motor->max_acceleration.uint16Val;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	88da      	ldrh	r2, [r3, #6]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	889b      	ldrh	r3, [r3, #4]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	80da      	strh	r2, [r3, #6]
	}

	update_pwm(motor);
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f000 f8c8 	bl	8001084 <update_pwm>
	update_mode(motor->mode, motor->type);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	7a5a      	ldrb	r2, [r3, #9]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4610      	mov	r0, r2
 8000f00:	f000 f80c 	bl	8000f1c <update_mode>
	update_dir(motor->dir, motor->type);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	7a1a      	ldrb	r2, [r3, #8]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4610      	mov	r0, r2
 8000f10:	f000 f888 	bl	8001024 <update_dir>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <update_mode>:

void update_mode(uint8_t mode, enum motor_e _motor){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]

	switch(_motor) {
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d04e      	beq.n	8000fd0 <update_mode+0xb4>
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	dc6e      	bgt.n	8001014 <update_mode+0xf8>
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <update_mode+0x24>
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d025      	beq.n	8000f8a <update_mode+0x6e>
			HAL_GPIO_WritePin(MODE_ZOOM_1_GPIO_Port, MODE_ZOOM_1_Pin, (mode & 0b100) >> 2);
			HAL_GPIO_WritePin(MODE_ZOOM_2_GPIO_Port, MODE_ZOOM_2_Pin, (mode & 0b010) >> 1);
			HAL_GPIO_WritePin(MODE_ZOOM_3_GPIO_Port, MODE_ZOOM_3_Pin, mode & 0b001);
			break;
	}
}
 8000f3e:	e069      	b.n	8001014 <update_mode+0xf8>
			HAL_GPIO_WritePin(MODE_X_1_GPIO_Port, MODE_X_1_Pin, (mode & 0b100) >> 2);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	109b      	asrs	r3, r3, #2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f001 fac7 	bl	80024e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_X_2_GPIO_Port, MODE_X_2_Pin, (mode & 0b010) >> 1);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	105b      	asrs	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f001 faba 	bl	80024e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_X_3_GPIO_Port, MODE_X_3_Pin, mode & 0b001);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f82:	4826      	ldr	r0, [pc, #152]	; (800101c <update_mode+0x100>)
 8000f84:	f001 fab0 	bl	80024e8 <HAL_GPIO_WritePin>
			break;
 8000f88:	e044      	b.n	8001014 <update_mode+0xf8>
			HAL_GPIO_WritePin(MODE_Y_1_GPIO_Port, MODE_Y_1_Pin, (mode & 0b100) >> 2);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	109b      	asrs	r3, r3, #2
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f001 faa3 	bl	80024e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_Y_2_GPIO_Port, MODE_Y_2_Pin, (mode & 0b010) >> 1);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	105b      	asrs	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f001 fa97 	bl	80024e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_Y_3_GPIO_Port, MODE_Y_3_Pin, mode & 0b001);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc8:	4814      	ldr	r0, [pc, #80]	; (800101c <update_mode+0x100>)
 8000fca:	f001 fa8d 	bl	80024e8 <HAL_GPIO_WritePin>
			break;
 8000fce:	e021      	b.n	8001014 <update_mode+0xf8>
			HAL_GPIO_WritePin(MODE_ZOOM_1_GPIO_Port, MODE_ZOOM_1_Pin, (mode & 0b100) >> 2);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	109b      	asrs	r3, r3, #2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe2:	480f      	ldr	r0, [pc, #60]	; (8001020 <update_mode+0x104>)
 8000fe4:	f001 fa80 	bl	80024e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_ZOOM_2_GPIO_Port, MODE_ZOOM_2_Pin, (mode & 0b010) >> 1);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	105b      	asrs	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <update_mode+0x104>)
 8000ffc:	f001 fa74 	bl	80024e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_ZOOM_3_GPIO_Port, MODE_ZOOM_3_Pin, mode & 0b001);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	2104      	movs	r1, #4
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <update_mode+0x104>)
 800100e:	f001 fa6b 	bl	80024e8 <HAL_GPIO_WritePin>
			break;
 8001012:	bf00      	nop
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	48000400 	.word	0x48000400
 8001020:	48000800 	.word	0x48000800

08001024 <update_dir>:

void update_dir(uint8_t dir, enum motor_e _motor) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
	switch(_motor) {
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d016      	beq.n	8001068 <update_dir+0x44>
 800103a:	2b02      	cmp	r3, #2
 800103c:	dc1b      	bgt.n	8001076 <update_dir+0x52>
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <update_dir+0x24>
 8001042:	2b01      	cmp	r3, #1
 8001044:	d007      	beq.n	8001056 <update_dir+0x32>
				break;
			case MOTOR_ZOOM:
				HAL_GPIO_WritePin(DIR_MOTOR_ZOOM_GPIO_Port, DIR_MOTOR_ZOOM_Pin, dir);
				break;
	}
}
 8001046:	e016      	b.n	8001076 <update_dir+0x52>
				HAL_GPIO_WritePin(DIR_MOTOR_X_GPIO_Port, DIR_MOTOR_X_Pin, dir);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	461a      	mov	r2, r3
 800104c:	2110      	movs	r1, #16
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <update_dir+0x5c>)
 8001050:	f001 fa4a 	bl	80024e8 <HAL_GPIO_WritePin>
				break;
 8001054:	e00f      	b.n	8001076 <update_dir+0x52>
				HAL_GPIO_WritePin(DIR_MOTOR_Y_GPIO_Port, DIR_MOTOR_Y_Pin, dir);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	461a      	mov	r2, r3
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f001 fa41 	bl	80024e8 <HAL_GPIO_WritePin>
				break;
 8001066:	e006      	b.n	8001076 <update_dir+0x52>
				HAL_GPIO_WritePin(DIR_MOTOR_ZOOM_GPIO_Port, DIR_MOTOR_ZOOM_Pin, dir);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	461a      	mov	r2, r3
 800106c:	2108      	movs	r1, #8
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <update_dir+0x5c>)
 8001070:	f001 fa3a 	bl	80024e8 <HAL_GPIO_WritePin>
				break;
 8001074:	bf00      	nop
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	48000800 	.word	0x48000800

08001084 <update_pwm>:

void update_pwm(motor_t* motor) {
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

	//need to find a way to compute mode
	uint32_t pwm_frequency = (motor->actual_speed * (1 * 400)) / 60;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	88db      	ldrh	r3, [r3, #6]
 8001090:	461a      	mov	r2, r3
 8001092:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001096:	fb02 f303 	mul.w	r3, r2, r3
 800109a:	4a38      	ldr	r2, [pc, #224]	; (800117c <update_pwm+0xf8>)
 800109c:	fb82 1203 	smull	r1, r2, r2, r3
 80010a0:	441a      	add	r2, r3
 80010a2:	1152      	asrs	r2, r2, #5
 80010a4:	17db      	asrs	r3, r3, #31
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	60fb      	str	r3, [r7, #12]

	update_timer(pwm_frequency, &motor->timer);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	330c      	adds	r3, #12
 80010ae:	4619      	mov	r1, r3
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f000 f86b 	bl	800118c <update_timer>

	switch(motor->type) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d03e      	beq.n	800113c <update_pwm+0xb8>
 80010be:	2b02      	cmp	r3, #2
 80010c0:	dc58      	bgt.n	8001174 <update_pwm+0xf0>
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <update_pwm+0x48>
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d01c      	beq.n	8001104 <update_pwm+0x80>
				TIM8->PSC = motor->timer.psc;
				TIM8->CCR4 = (uint32_t) floor(motor->timer.arr / 2);
			osKernelUnlock();
			break;
	}
}
 80010ca:	e053      	b.n	8001174 <update_pwm+0xf0>
			osKernelLock();
 80010cc:	f006 f99e 	bl	800740c <osKernelLock>
				TIM3->ARR = motor->timer.arr;
 80010d0:	4a2b      	ldr	r2, [pc, #172]	; (8001180 <update_pwm+0xfc>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM3->PSC = motor->timer.psc;
 80010d8:	4a29      	ldr	r2, [pc, #164]	; (8001180 <update_pwm+0xfc>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	6293      	str	r3, [r2, #40]	; 0x28
				TIM3->CCR2 = (uint32_t) floor(motor->timer.arr / 2);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	085b      	lsrs	r3, r3, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f9bc 	bl	8000464 <__aeabi_ui2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4c23      	ldr	r4, [pc, #140]	; (8001180 <update_pwm+0xfc>)
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fa2f 	bl	8000558 <__aeabi_d2uiz>
 80010fa:	4603      	mov	r3, r0
 80010fc:	63a3      	str	r3, [r4, #56]	; 0x38
			osKernelUnlock();
 80010fe:	f006 f9ab 	bl	8007458 <osKernelUnlock>
			break;
 8001102:	e037      	b.n	8001174 <update_pwm+0xf0>
			osKernelLock();
 8001104:	f006 f982 	bl	800740c <osKernelLock>
				TIM4->ARR = motor->timer.arr;
 8001108:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <update_pwm+0x100>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM4->PSC = motor->timer.psc;
 8001110:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <update_pwm+0x100>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	6293      	str	r3, [r2, #40]	; 0x28
				TIM4->CCR3 = (uint32_t) floor(motor->timer.arr / 2);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	085b      	lsrs	r3, r3, #1
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9a0 	bl	8000464 <__aeabi_ui2d>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4c16      	ldr	r4, [pc, #88]	; (8001184 <update_pwm+0x100>)
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fa13 	bl	8000558 <__aeabi_d2uiz>
 8001132:	4603      	mov	r3, r0
 8001134:	63e3      	str	r3, [r4, #60]	; 0x3c
			osKernelUnlock();
 8001136:	f006 f98f 	bl	8007458 <osKernelUnlock>
			break;
 800113a:	e01b      	b.n	8001174 <update_pwm+0xf0>
			osKernelLock();
 800113c:	f006 f966 	bl	800740c <osKernelLock>
				TIM8->ARR = motor->timer.arr;
 8001140:	4a11      	ldr	r2, [pc, #68]	; (8001188 <update_pwm+0x104>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM8->PSC = motor->timer.psc;
 8001148:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <update_pwm+0x104>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	6293      	str	r3, [r2, #40]	; 0x28
				TIM8->CCR4 = (uint32_t) floor(motor->timer.arr / 2);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	085b      	lsrs	r3, r3, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f984 	bl	8000464 <__aeabi_ui2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4c09      	ldr	r4, [pc, #36]	; (8001188 <update_pwm+0x104>)
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff f9f7 	bl	8000558 <__aeabi_d2uiz>
 800116a:	4603      	mov	r3, r0
 800116c:	6423      	str	r3, [r4, #64]	; 0x40
			osKernelUnlock();
 800116e:	f006 f973 	bl	8007458 <osKernelUnlock>
			break;
 8001172:	bf00      	nop
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	88888889 	.word	0x88888889
 8001180:	40000400 	.word	0x40000400
 8001184:	40000800 	.word	0x40000800
 8001188:	40013400 	.word	0x40013400

0800118c <update_timer>:

void update_timer(uint32_t pwm_frequency, Timer_def_t* timer) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]

	//frequence du PCLK1
	uint32_t f_clk = HAL_RCC_GetPCLK1Freq();
 8001196:	f003 fb3d 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 800119a:	60f8      	str	r0, [r7, #12]

	// formule : https://deepbluembedded.com/stm32-pwm-example-timer-pwm-mode-tutorial/ apres je solve pour ARR
	uint32_t arr = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

	if(pwm_frequency != 0) {
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <update_timer+0x24>
		arr = (f_clk / pwm_frequency);
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
	}
	uint32_t psc = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]

	if(arr > 65535) {
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ba:	d315      	bcc.n	80011e8 <update_timer+0x5c>
		psc = (uint32_t) floor(arr / 65535) + 1;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	4a13      	ldr	r2, [pc, #76]	; (800120c <update_timer+0x80>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0bdb      	lsrs	r3, r3, #15
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f94c 	bl	8000464 <__aeabi_ui2d>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff f9c0 	bl	8000558 <__aeabi_d2uiz>
 80011d8:	4603      	mov	r3, r0
 80011da:	3301      	adds	r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
		arr = arr / psc;
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	617b      	str	r3, [r7, #20]
	}

	timer->arr = arr - 1;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	601a      	str	r2, [r3, #0]
	timer->psc = psc == 0 ? psc : psc - 1;
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <update_timer+0x70>
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	e000      	b.n	80011fe <update_timer+0x72>
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	6053      	str	r3, [r2, #4]
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	80008001 	.word	0x80008001

08001210 <get_htim3>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

TIM_HandleTypeDef* get_htim3()  { return &htim3;}
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <get_htim3+0x10>)
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	20000140 	.word	0x20000140

08001224 <get_htim4>:
TIM_HandleTypeDef* get_htim4()  { return &htim4;}
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <get_htim4+0x10>)
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	2000018c 	.word	0x2000018c

08001238 <get_htim8>:
TIM_HandleTypeDef* get_htim8()  { return &htim8;}
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <get_htim8+0x10>)
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	200001d8 	.word	0x200001d8

0800124c <get_hi2cl>:
I2C_HandleTypeDef* get_hi2cl()  { return &hi2c3; }
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <get_hi2cl+0x10>)
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	200000ec 	.word	0x200000ec

08001260 <get_huart2>:
UART_HandleTypeDef* get_huart2(){ return &huart2; }
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <get_huart2+0x10>)
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	20000224 	.word	0x20000224

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f000 fe20 	bl	8001ebe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f853 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001282:	f000 faad 	bl	80017e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001286:	f000 f8e1 	bl	800144c <MX_TIM3_Init>
  MX_TIM8_Init();
 800128a:	f000 f9cf 	bl	800162c <MX_TIM8_Init>
  MX_TIM4_Init();
 800128e:	f000 f955 	bl	800153c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001292:	f000 fa75 	bl	8001780 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001296:	f000 f899 	bl	80013cc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t debug_buf[4];
  strcpy((char*) debug_buf, "Reset\r\n");
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4a18      	ldr	r2, [pc, #96]	; (8001300 <main+0x8c>)
 800129e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a2:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
 80012a6:	f7ff ffdb 	bl	8001260 <get_huart2>
 80012aa:	4604      	mov	r4, r0
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7fe ff8e 	bl	80001d0 <strlen>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	1d39      	adds	r1, r7, #4
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	4620      	mov	r0, r4
 80012c0:	f005 fb1a 	bl	80068f8 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012c4:	f006 f858 	bl	8007378 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <main+0x90>)
 80012ca:	2100      	movs	r1, #0
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <main+0x94>)
 80012ce:	f006 f8f5 	bl	80074bc <osThreadNew>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <main+0x98>)
 80012d6:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(tsk_motor_control, NULL, &motor_control_attributes);
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <main+0x9c>)
 80012da:	2100      	movs	r1, #0
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <main+0xa0>)
 80012de:	f006 f8ed 	bl	80074bc <osThreadNew>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <main+0xa4>)
 80012e6:	6013      	str	r3, [r2, #0]

  /* creation of i2c */
  i2cHandle = osThreadNew(tsk_i2c, NULL, &i2c_attributes);
 80012e8:	4a0c      	ldr	r2, [pc, #48]	; (800131c <main+0xa8>)
 80012ea:	2100      	movs	r1, #0
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <main+0xac>)
 80012ee:	f006 f8e5 	bl	80074bc <osThreadNew>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <main+0xb0>)
 80012f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012f8:	f006 f862 	bl	80073c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <main+0x88>
 80012fe:	bf00      	nop
 8001300:	0800a9dc 	.word	0x0800a9dc
 8001304:	0800aa1c 	.word	0x0800aa1c
 8001308:	08001911 	.word	0x08001911
 800130c:	200002a8 	.word	0x200002a8
 8001310:	0800aa40 	.word	0x0800aa40
 8001314:	08000dfd 	.word	0x08000dfd
 8001318:	200002ac 	.word	0x200002ac
 800131c:	0800aa64 	.word	0x0800aa64
 8001320:	0800089d 	.word	0x0800089d
 8001324:	200002b0 	.word	0x200002b0

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b096      	sub	sp, #88	; 0x58
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2244      	movs	r2, #68	; 0x44
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f009 fa54 	bl	800a7e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800134a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800134e:	f002 fc97 	bl	8003c80 <HAL_PWREx_ControlVoltageScaling>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001358:	f000 faf6 	bl	8001948 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800135c:	2310      	movs	r3, #16
 800135e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001368:	2360      	movs	r3, #96	; 0x60
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136c:	2302      	movs	r3, #2
 800136e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001370:	2301      	movs	r3, #1
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001378:	2324      	movs	r3, #36	; 0x24
 800137a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800137c:	2307      	movs	r3, #7
 800137e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fccd 	bl	8003d2c <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001398:	f000 fad6 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2303      	movs	r3, #3
 80013a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	2104      	movs	r1, #4
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 f895 	bl	80044e4 <HAL_RCC_ClockConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013c0:	f000 fac2 	bl	8001948 <Error_Handler>
  }
}
 80013c4:	bf00      	nop
 80013c6:	3758      	adds	r7, #88	; 0x58
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_I2C3_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <MX_I2C3_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702681;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_I2C3_Init+0x74>)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <MX_I2C3_Init+0x7c>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 70;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_I2C3_Init+0x74>)
 80013de:	2246      	movs	r2, #70	; 0x46
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_I2C3_Init+0x74>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_I2C3_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_I2C3_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_I2C3_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_I2C3_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_I2C3_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001406:	480e      	ldr	r0, [pc, #56]	; (8001440 <MX_I2C3_Init+0x74>)
 8001408:	f001 f886 	bl	8002518 <HAL_I2C_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001412:	f000 fa99 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <MX_I2C3_Init+0x74>)
 800141a:	f002 fb8b 	bl	8003b34 <HAL_I2CEx_ConfigAnalogFilter>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001424:	f000 fa90 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001428:	2100      	movs	r1, #0
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_I2C3_Init+0x74>)
 800142c:	f002 fbcd 	bl	8003bca <HAL_I2CEx_ConfigDigitalFilter>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 fa87 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000ec 	.word	0x200000ec
 8001444:	40005c00 	.word	0x40005c00
 8001448:	00702681 	.word	0x00702681

0800144c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001480:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <MX_TIM3_Init+0xec>)
 8001482:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <MX_TIM3_Init+0xe8>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001496:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b26      	ldr	r3, [pc, #152]	; (8001534 <MX_TIM3_Init+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <MX_TIM3_Init+0xe8>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a4:	4823      	ldr	r0, [pc, #140]	; (8001534 <MX_TIM3_Init+0xe8>)
 80014a6:	f003 ff2f 	bl	8005308 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80014b0:	f000 fa4a 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014be:	4619      	mov	r1, r3
 80014c0:	481c      	ldr	r0, [pc, #112]	; (8001534 <MX_TIM3_Init+0xe8>)
 80014c2:	f004 fb85 	bl	8005bd0 <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014cc:	f000 fa3c 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014d0:	4818      	ldr	r0, [pc, #96]	; (8001534 <MX_TIM3_Init+0xe8>)
 80014d2:	f003 ffe1 	bl	8005498 <HAL_TIM_PWM_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014dc:	f000 fa34 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_TIM3_Init+0xe8>)
 80014f0:	f005 f890 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014fa:	f000 fa25 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fe:	2360      	movs	r3, #96	; 0x60
 8001500:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800150e:	463b      	mov	r3, r7
 8001510:	2204      	movs	r2, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4807      	ldr	r0, [pc, #28]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001516:	f004 fa47 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001520:	f000 fa12 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001526:	f000 faf3 	bl	8001b10 <HAL_TIM_MspPostInit>

}
 800152a:	bf00      	nop
 800152c:	3738      	adds	r7, #56	; 0x38
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000140 	.word	0x20000140
 8001538:	40000400 	.word	0x40000400

0800153c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <MX_TIM4_Init+0xe8>)
 8001570:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <MX_TIM4_Init+0xec>)
 8001572:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001574:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <MX_TIM4_Init+0xe8>)
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <MX_TIM4_Init+0xe8>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001580:	4b28      	ldr	r3, [pc, #160]	; (8001624 <MX_TIM4_Init+0xe8>)
 8001582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001586:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001588:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MX_TIM4_Init+0xe8>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <MX_TIM4_Init+0xe8>)
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001594:	4823      	ldr	r0, [pc, #140]	; (8001624 <MX_TIM4_Init+0xe8>)
 8001596:	f003 feb7 	bl	8005308 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80015a0:	f000 f9d2 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ae:	4619      	mov	r1, r3
 80015b0:	481c      	ldr	r0, [pc, #112]	; (8001624 <MX_TIM4_Init+0xe8>)
 80015b2:	f004 fb0d 	bl	8005bd0 <HAL_TIM_ConfigClockSource>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80015bc:	f000 f9c4 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015c0:	4818      	ldr	r0, [pc, #96]	; (8001624 <MX_TIM4_Init+0xe8>)
 80015c2:	f003 ff69 	bl	8005498 <HAL_TIM_PWM_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80015cc:	f000 f9bc 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	4811      	ldr	r0, [pc, #68]	; (8001624 <MX_TIM4_Init+0xe8>)
 80015e0:	f005 f818 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015ea:	f000 f9ad 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ee:	2360      	movs	r3, #96	; 0x60
 80015f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	2208      	movs	r2, #8
 8001602:	4619      	mov	r1, r3
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <MX_TIM4_Init+0xe8>)
 8001606:	f004 f9cf 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001610:	f000 f99a 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <MX_TIM4_Init+0xe8>)
 8001616:	f000 fa7b 	bl	8001b10 <HAL_TIM_MspPostInit>

}
 800161a:	bf00      	nop
 800161c:	3738      	adds	r7, #56	; 0x38
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000018c 	.word	0x2000018c
 8001628:	40000800 	.word	0x40000800

0800162c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b09a      	sub	sp, #104	; 0x68
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	222c      	movs	r2, #44	; 0x2c
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f009 f8bc 	bl	800a7e4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <MX_TIM8_Init+0x14c>)
 800166e:	4a43      	ldr	r2, [pc, #268]	; (800177c <MX_TIM8_Init+0x150>)
 8001670:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <MX_TIM8_Init+0x14c>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <MX_TIM8_Init+0x14c>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <MX_TIM8_Init+0x14c>)
 8001680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001684:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <MX_TIM8_Init+0x14c>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <MX_TIM8_Init+0x14c>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001692:	4b39      	ldr	r3, [pc, #228]	; (8001778 <MX_TIM8_Init+0x14c>)
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001698:	4837      	ldr	r0, [pc, #220]	; (8001778 <MX_TIM8_Init+0x14c>)
 800169a:	f003 fe35 	bl	8005308 <HAL_TIM_Base_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80016a4:	f000 f950 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016b2:	4619      	mov	r1, r3
 80016b4:	4830      	ldr	r0, [pc, #192]	; (8001778 <MX_TIM8_Init+0x14c>)
 80016b6:	f004 fa8b 	bl	8005bd0 <HAL_TIM_ConfigClockSource>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80016c0:	f000 f942 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016c4:	482c      	ldr	r0, [pc, #176]	; (8001778 <MX_TIM8_Init+0x14c>)
 80016c6:	f003 fee7 	bl	8005498 <HAL_TIM_PWM_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80016d0:	f000 f93a 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016e4:	4619      	mov	r1, r3
 80016e6:	4824      	ldr	r0, [pc, #144]	; (8001778 <MX_TIM8_Init+0x14c>)
 80016e8:	f004 ff94 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80016f2:	f000 f929 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f6:	2360      	movs	r3, #96	; 0x60
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fe:	2300      	movs	r3, #0
 8001700:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800170e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001712:	220c      	movs	r2, #12
 8001714:	4619      	mov	r1, r3
 8001716:	4818      	ldr	r0, [pc, #96]	; (8001778 <MX_TIM8_Init+0x14c>)
 8001718:	f004 f946 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001722:	f000 f911 	bl	8001948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800173a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM8_Init+0x14c>)
 800175c:	f004 ffe2 	bl	8006724 <HAL_TIMEx_ConfigBreakDeadTime>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001766:	f000 f8ef 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM8_Init+0x14c>)
 800176c:	f000 f9d0 	bl	8001b10 <HAL_TIM_MspPostInit>

}
 8001770:	bf00      	nop
 8001772:	3768      	adds	r7, #104	; 0x68
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200001d8 	.word	0x200001d8
 800177c:	40013400 	.word	0x40013400

08001780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 8001786:	4a15      	ldr	r2, [pc, #84]	; (80017dc <MX_USART2_UART_Init+0x5c>)
 8001788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART2_UART_Init+0x58>)
 80017c4:	f005 f84a 	bl	800685c <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017ce:	f000 f8bb 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000224 	.word	0x20000224
 80017dc:	40004400 	.word	0x40004400

080017e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b43      	ldr	r3, [pc, #268]	; (8001904 <MX_GPIO_Init+0x124>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	4a42      	ldr	r2, [pc, #264]	; (8001904 <MX_GPIO_Init+0x124>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001802:	4b40      	ldr	r3, [pc, #256]	; (8001904 <MX_GPIO_Init+0x124>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <MX_GPIO_Init+0x124>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a3c      	ldr	r2, [pc, #240]	; (8001904 <MX_GPIO_Init+0x124>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <MX_GPIO_Init+0x124>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b37      	ldr	r3, [pc, #220]	; (8001904 <MX_GPIO_Init+0x124>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a36      	ldr	r2, [pc, #216]	; (8001904 <MX_GPIO_Init+0x124>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <MX_GPIO_Init+0x124>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <MX_GPIO_Init+0x124>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a30      	ldr	r2, [pc, #192]	; (8001904 <MX_GPIO_Init+0x124>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <MX_GPIO_Init+0x124>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MODE_ZOOM_1_Pin|MODE_ZOOM_2_Pin|MODE_ZOOM_3_Pin|DIR_MOTOR_ZOOM_Pin
 8001856:	2200      	movs	r2, #0
 8001858:	f24c 011c 	movw	r1, #49180	; 0xc01c
 800185c:	482a      	ldr	r0, [pc, #168]	; (8001908 <MX_GPIO_Init+0x128>)
 800185e:	f000 fe43 	bl	80024e8 <HAL_GPIO_WritePin>
                          |DIR_MOTOR_X_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MODE_Y_2_Pin|MODE_Y_1_Pin|DIR_MOTOR_Y_Pin|MODE_X_2_Pin
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 51e3 	mov.w	r1, #7264	; 0x1c60
 8001868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186c:	f000 fe3c 	bl	80024e8 <HAL_GPIO_WritePin>
                          |MODE_X_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODE_X_3_Pin|MODE_Y_3_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001876:	4825      	ldr	r0, [pc, #148]	; (800190c <MX_GPIO_Init+0x12c>)
 8001878:	f000 fe36 	bl	80024e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODE_ZOOM_1_Pin MODE_ZOOM_2_Pin MODE_ZOOM_3_Pin DIR_MOTOR_ZOOM_Pin
                           DIR_MOTOR_X_Pin */
  GPIO_InitStruct.Pin = MODE_ZOOM_1_Pin|MODE_ZOOM_2_Pin|MODE_ZOOM_3_Pin|DIR_MOTOR_ZOOM_Pin
 800187c:	f24c 031c 	movw	r3, #49180	; 0xc01c
 8001880:	617b      	str	r3, [r7, #20]
                          |DIR_MOTOR_X_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	481c      	ldr	r0, [pc, #112]	; (8001908 <MX_GPIO_Init+0x128>)
 8001896:	f000 fc7d 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Y_2_Pin MODE_Y_1_Pin DIR_MOTOR_Y_Pin MODE_X_2_Pin
                           MODE_X_1_Pin */
  GPIO_InitStruct.Pin = MODE_Y_2_Pin|MODE_Y_1_Pin|DIR_MOTOR_Y_Pin|MODE_X_2_Pin
 800189a:	f44f 53e3 	mov.w	r3, #7264	; 0x1c60
 800189e:	617b      	str	r3, [r7, #20]
                          |MODE_X_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b6:	f000 fc6d 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_X_3_Pin MODE_Y_3_Pin */
  GPIO_InitStruct.Pin = MODE_X_3_Pin|MODE_Y_3_Pin;
 80018ba:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	480e      	ldr	r0, [pc, #56]	; (800190c <MX_GPIO_Init+0x12c>)
 80018d4:	f000 fc5e 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80018d8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018de:	2312      	movs	r3, #18
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018ea:	2304      	movs	r3, #4
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_GPIO_Init+0x12c>)
 80018f6:	f000 fc4d 	bl	8002194 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	48000800 	.word	0x48000800
 800190c:	48000400 	.word	0x48000400

08001910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;) {
		osDelay(1000);
 8001918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800191c:	f005 fe60 	bl	80075e0 <osDelay>
 8001920:	e7fa      	b.n	8001918 <StartDefaultTask+0x8>
	...

08001924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001936:	f000 fadb 	bl	8001ef0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40012c00 	.word	0x40012c00

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
	...

08001954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_MspInit+0x4c>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_MspInit+0x4c>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6613      	str	r3, [r2, #96]	; 0x60
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_MspInit+0x4c>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_MspInit+0x4c>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_MspInit+0x4c>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6593      	str	r3, [r2, #88]	; 0x58
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_MspInit+0x4c>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	210f      	movs	r1, #15
 800198e:	f06f 0001 	mvn.w	r0, #1
 8001992:	f000 fb85 	bl	80020a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0ac      	sub	sp, #176	; 0xb0
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2288      	movs	r2, #136	; 0x88
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f008 ff0d 	bl	800a7e4 <memset>
  if(hi2c->Instance==I2C3)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <HAL_I2C_MspInit+0xd0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d14b      	bne.n	8001a6c <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80019d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80019da:	2300      	movs	r3, #0
 80019dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 ffd4 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019ee:	f7ff ffab 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_I2C_MspInit+0xd4>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <HAL_I2C_MspInit+0xd4>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_I2C_MspInit+0xd4>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a10:	2312      	movs	r3, #18
 8001a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a22:	2304      	movs	r3, #4
 8001a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4813      	ldr	r0, [pc, #76]	; (8001a7c <HAL_I2C_MspInit+0xd8>)
 8001a30:	f000 fbb0 	bl	8002194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_I2C_MspInit+0xd4>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <HAL_I2C_MspInit+0xd4>)
 8001a3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_I2C_MspInit+0xd4>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2105      	movs	r1, #5
 8001a50:	2048      	movs	r0, #72	; 0x48
 8001a52:	f000 fb25 	bl	80020a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001a56:	2048      	movs	r0, #72	; 0x48
 8001a58:	f000 fb3e 	bl	80020d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2105      	movs	r1, #5
 8001a60:	2049      	movs	r0, #73	; 0x49
 8001a62:	f000 fb1d 	bl	80020a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001a66:	2049      	movs	r0, #73	; 0x49
 8001a68:	f000 fb36 	bl	80020d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	37b0      	adds	r7, #176	; 0xb0
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005c00 	.word	0x40005c00
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	48000800 	.word	0x48000800

08001a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_TIM_Base_MspInit+0x80>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d10c      	bne.n	8001aac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <HAL_TIM_Base_MspInit+0x84>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_TIM_Base_MspInit+0x84>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_TIM_Base_MspInit+0x84>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001aaa:	e022      	b.n	8001af2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <HAL_TIM_Base_MspInit+0x88>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_TIM_Base_MspInit+0x84>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_TIM_Base_MspInit+0x84>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_TIM_Base_MspInit+0x84>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
}
 8001ace:	e010      	b.n	8001af2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_TIM_Base_MspInit+0x8c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10b      	bne.n	8001af2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_TIM_Base_MspInit+0x84>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_TIM_Base_MspInit+0x84>)
 8001ae0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_TIM_Base_MspInit+0x84>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	bf00      	nop
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40000400 	.word	0x40000400
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40000800 	.word	0x40000800
 8001b0c:	40013400 	.word	0x40013400

08001b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a34      	ldr	r2, [pc, #208]	; (8001c00 <HAL_TIM_MspPostInit+0xf0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d11d      	bne.n	8001b6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <HAL_TIM_MspPostInit+0xf4>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	4a33      	ldr	r2, [pc, #204]	; (8001c04 <HAL_TIM_MspPostInit+0xf4>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3e:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <HAL_TIM_MspPostInit+0xf4>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b68:	f000 fb14 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b6c:	e044      	b.n	8001bf8 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <HAL_TIM_MspPostInit+0xf8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d11d      	bne.n	8001bb4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_TIM_MspPostInit+0xf4>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <HAL_TIM_MspPostInit+0xf4>)
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_TIM_MspPostInit+0xf4>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4817      	ldr	r0, [pc, #92]	; (8001c0c <HAL_TIM_MspPostInit+0xfc>)
 8001bae:	f000 faf1 	bl	8002194 <HAL_GPIO_Init>
}
 8001bb2:	e021      	b.n	8001bf8 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM8)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <HAL_TIM_MspPostInit+0x100>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d11c      	bne.n	8001bf8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_TIM_MspPostInit+0xf4>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_TIM_MspPostInit+0xf4>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_TIM_MspPostInit+0xf4>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001be8:	2303      	movs	r3, #3
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4808      	ldr	r0, [pc, #32]	; (8001c14 <HAL_TIM_MspPostInit+0x104>)
 8001bf4:	f000 face 	bl	8002194 <HAL_GPIO_Init>
}
 8001bf8:	bf00      	nop
 8001bfa:	3728      	adds	r7, #40	; 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40000400 	.word	0x40000400
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40000800 	.word	0x40000800
 8001c0c:	48000400 	.word	0x48000400
 8001c10:	40013400 	.word	0x40013400
 8001c14:	48000800 	.word	0x48000800

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0ac      	sub	sp, #176	; 0xb0
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2288      	movs	r2, #136	; 0x88
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f008 fdd3 	bl	800a7e4 <memset>
  if(huart->Instance==USART2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <HAL_UART_MspInit+0xb0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d13b      	bne.n	8001cc0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fe9b 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c60:	f7ff fe72 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_UART_MspInit+0xb4>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c94:	230c      	movs	r3, #12
 8001c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cac:	2307      	movs	r3, #7
 8001cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbc:	f000 fa6a 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cc0:	bf00      	nop
 8001cc2:	37b0      	adds	r7, #176	; 0xb0
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40004400 	.word	0x40004400
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cde:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <HAL_InitTick+0xc8>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	4a2d      	ldr	r2, [pc, #180]	; (8001d98 <HAL_InitTick+0xc8>)
 8001ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cea:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <HAL_InitTick+0xc8>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cf6:	f107 020c 	add.w	r2, r7, #12
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fdb3 	bl	800486c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d06:	f002 fd9b 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 8001d0a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_InitTick+0xcc>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	0c9b      	lsrs	r3, r3, #18
 8001d16:	3b01      	subs	r3, #1
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_InitTick+0xd0>)
 8001d1c:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <HAL_InitTick+0xd4>)
 8001d1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <HAL_InitTick+0xd0>)
 8001d22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d26:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_InitTick+0xd0>)
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_InitTick+0xd0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_InitTick+0xd0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_InitTick+0xd0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d40:	4817      	ldr	r0, [pc, #92]	; (8001da0 <HAL_InitTick+0xd0>)
 8001d42:	f003 fae1 	bl	8005308 <HAL_TIM_Base_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d11b      	bne.n	8001d8c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d54:	4812      	ldr	r0, [pc, #72]	; (8001da0 <HAL_InitTick+0xd0>)
 8001d56:	f003 fb2f 	bl	80053b8 <HAL_TIM_Base_Start_IT>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d68:	2019      	movs	r0, #25
 8001d6a:	f000 f9b5 	bl	80020d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d808      	bhi.n	8001d86 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	2019      	movs	r0, #25
 8001d7a:	f000 f991 	bl	80020a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_InitTick+0xd8>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	e002      	b.n	8001d8c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3730      	adds	r7, #48	; 0x30
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	431bde83 	.word	0x431bde83
 8001da0:	200002b4 	.word	0x200002b4
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	20000004 	.word	0x20000004

08001dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <NMI_Handler+0x4>
	...

08001db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	uint8_t buf[12];
	strcpy((char*) buf, "Hard Fault!\r\n");
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HardFault_Handler+0x34>)
 8001dbe:	461c      	mov	r4, r3
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc4:	c407      	stmia	r4!, {r0, r1, r2}
 8001dc6:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(get_huart2(), buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001dc8:	f7ff fa4a 	bl	8001260 <get_huart2>
 8001dcc:	4604      	mov	r4, r0
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe f9fd 	bl	80001d0 <strlen>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	1d39      	adds	r1, r7, #4
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	4620      	mov	r0, r4
 8001de2:	f004 fd89 	bl	80068f8 <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <HardFault_Handler+0x32>
 8001de8:	0800a9e4 	.word	0x0800a9e4

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e12:	f003 fca9 	bl	8005768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200002b4 	.word	0x200002b4

08001e20 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <I2C3_EV_IRQHandler+0x10>)
 8001e26:	f000 fd6f 	bl	8002908 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200000ec 	.word	0x200000ec

08001e34 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <I2C3_ER_IRQHandler+0x10>)
 8001e3a:	f000 fd7f 	bl	800293c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200000ec 	.word	0x200000ec

08001e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <SystemInit+0x20>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <SystemInit+0x20>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e70:	f7ff ffea 	bl	8001e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e74:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e76:	490d      	ldr	r1, [pc, #52]	; (8001eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <LoopForever+0xe>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e8c:	4c0a      	ldr	r4, [pc, #40]	; (8001eb8 <LoopForever+0x16>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f008 fc6f 	bl	800a77c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e9e:	f7ff f9e9 	bl	8001274 <main>

08001ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ea2:	e7fe      	b.n	8001ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ea4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001eb0:	0800ab40 	.word	0x0800ab40
  ldr r2, =_sbss
 8001eb4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001eb8:	20001cd4 	.word	0x20001cd4

08001ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC1_2_IRQHandler>

08001ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 f8de 	bl	800208a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f7ff fefe 	bl	8001cd0 <HAL_InitTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	71fb      	strb	r3, [r7, #7]
 8001ede:	e001      	b.n	8001ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee0:	f7ff fd38 	bl	8001954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20000300 	.word	0x20000300

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000300 	.word	0x20000300

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ff4c 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b2:	f7ff ff61 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	6978      	ldr	r0, [r7, #20]
 80020be:	f7ff ffb1 	bl	8002024 <NVIC_EncodePriority>
 80020c2:	4602      	mov	r2, r0
 80020c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff80 	bl	8001fd0 <__NVIC_SetPriority>
}
 80020d0:	bf00      	nop
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff54 	bl	8001f94 <__NVIC_EnableIRQ>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d005      	beq.n	8002118 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2204      	movs	r2, #4
 8002110:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e029      	b.n	800216c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 020e 	bic.w	r2, r2, #14
 8002126:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f003 021c 	and.w	r2, r3, #28
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f202 	lsl.w	r2, r1, r2
 800214a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
    }
  }
  return status;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002184:	b2db      	uxtb	r3, r3
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a2:	e17f      	b.n	80024a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8171 	beq.w	800249e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d005      	beq.n	80021d4 <HAL_GPIO_Init+0x40>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d130      	bne.n	8002236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800220a:	2201      	movs	r2, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	f003 0201 	and.w	r2, r3, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b03      	cmp	r3, #3
 8002240:	d118      	bne.n	8002274 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002248:	2201      	movs	r2, #1
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	f003 0201 	and.w	r2, r3, #1
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d017      	beq.n	80022b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d123      	bne.n	8002304 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	6939      	ldr	r1, [r7, #16]
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0203 	and.w	r2, r3, #3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80ac 	beq.w	800249e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	4b5f      	ldr	r3, [pc, #380]	; (80024c4 <HAL_GPIO_Init+0x330>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	4a5e      	ldr	r2, [pc, #376]	; (80024c4 <HAL_GPIO_Init+0x330>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6613      	str	r3, [r2, #96]	; 0x60
 8002352:	4b5c      	ldr	r3, [pc, #368]	; (80024c4 <HAL_GPIO_Init+0x330>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800235e:	4a5a      	ldr	r2, [pc, #360]	; (80024c8 <HAL_GPIO_Init+0x334>)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002388:	d025      	beq.n	80023d6 <HAL_GPIO_Init+0x242>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4f      	ldr	r2, [pc, #316]	; (80024cc <HAL_GPIO_Init+0x338>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01f      	beq.n	80023d2 <HAL_GPIO_Init+0x23e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4e      	ldr	r2, [pc, #312]	; (80024d0 <HAL_GPIO_Init+0x33c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d019      	beq.n	80023ce <HAL_GPIO_Init+0x23a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4d      	ldr	r2, [pc, #308]	; (80024d4 <HAL_GPIO_Init+0x340>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_GPIO_Init+0x236>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4c      	ldr	r2, [pc, #304]	; (80024d8 <HAL_GPIO_Init+0x344>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00d      	beq.n	80023c6 <HAL_GPIO_Init+0x232>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4b      	ldr	r2, [pc, #300]	; (80024dc <HAL_GPIO_Init+0x348>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <HAL_GPIO_Init+0x22e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4a      	ldr	r2, [pc, #296]	; (80024e0 <HAL_GPIO_Init+0x34c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <HAL_GPIO_Init+0x22a>
 80023ba:	2306      	movs	r3, #6
 80023bc:	e00c      	b.n	80023d8 <HAL_GPIO_Init+0x244>
 80023be:	2307      	movs	r3, #7
 80023c0:	e00a      	b.n	80023d8 <HAL_GPIO_Init+0x244>
 80023c2:	2305      	movs	r3, #5
 80023c4:	e008      	b.n	80023d8 <HAL_GPIO_Init+0x244>
 80023c6:	2304      	movs	r3, #4
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x244>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x244>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x244>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x244>
 80023d6:	2300      	movs	r3, #0
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023e8:	4937      	ldr	r1, [pc, #220]	; (80024c8 <HAL_GPIO_Init+0x334>)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023f6:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <HAL_GPIO_Init+0x350>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800241a:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <HAL_GPIO_Init+0x350>)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002420:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <HAL_GPIO_Init+0x350>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002444:	4a27      	ldr	r2, [pc, #156]	; (80024e4 <HAL_GPIO_Init+0x350>)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_GPIO_Init+0x350>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800246e:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_GPIO_Init+0x350>)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002474:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <HAL_GPIO_Init+0x350>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002498:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <HAL_GPIO_Init+0x350>)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa22 f303 	lsr.w	r3, r2, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f47f ae78 	bne.w	80021a4 <HAL_GPIO_Init+0x10>
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40010000 	.word	0x40010000
 80024cc:	48000400 	.word	0x48000400
 80024d0:	48000800 	.word	0x48000800
 80024d4:	48000c00 	.word	0x48000c00
 80024d8:	48001000 	.word	0x48001000
 80024dc:	48001400 	.word	0x48001400
 80024e0:	48001800 	.word	0x48001800
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
 80024f4:	4613      	mov	r3, r2
 80024f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002504:	e002      	b.n	800250c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e081      	b.n	800262e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fa30 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002568:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002578:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	e006      	b.n	80025a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800259e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d104      	bne.n	80025b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69d9      	ldr	r1, [r3, #28]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002654:	2b28      	cmp	r3, #40	; 0x28
 8002656:	f040 808a 	bne.w	800276e <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d105      	bne.n	8002672 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07e      	b.n	8002770 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002672:	f248 0101 	movw	r1, #32769	; 0x8001
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f001 f9fe 	bl	8003a78 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8002686:	2302      	movs	r3, #2
 8002688:	e072      	b.n	8002770 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b2a      	cmp	r3, #42	; 0x2a
 800269c:	d12a      	bne.n	80026f4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800269e:	2102      	movs	r1, #2
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f001 f9e9 	bl	8003a78 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b4:	d11e      	bne.n	80026f4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c4:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	4a29      	ldr	r2, [pc, #164]	; (8002778 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fd0a 	bl	80020f4 <HAL_DMA_Abort_IT>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026f0:	4610      	mov	r0, r2
 80026f2:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2229      	movs	r2, #41	; 0x29
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002718:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a10      	ldr	r2, [pc, #64]	; (800277c <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 800273a:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	0c1b      	lsrs	r3, r3, #16
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d103      	bne.n	8002758 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2208      	movs	r2, #8
 8002756:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002760:	f248 0101 	movw	r1, #32769	; 0x8001
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f001 f91d 	bl	80039a4 <I2C_Enable_IRQ>

    return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
  }
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	08003903 	.word	0x08003903
 800277c:	08002a8f 	.word	0x08002a8f

08002780 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800279c:	2b28      	cmp	r3, #40	; 0x28
 800279e:	f040 808a 	bne.w	80028b6 <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07e      	b.n	80028b8 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80027ba:	f248 0102 	movw	r1, #32770	; 0x8002
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f001 f95a 	bl	8003a78 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e072      	b.n	80028b8 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b29      	cmp	r3, #41	; 0x29
 80027e4:	d12a      	bne.n	800283c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80027e6:	2101      	movs	r1, #1
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f001 f945 	bl	8003a78 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027fc:	d11e      	bne.n	800283c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800280c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	2b00      	cmp	r3, #0
 8002814:	d012      	beq.n	800283c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	4a29      	ldr	r2, [pc, #164]	; (80028c0 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 800281c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fc66 	bl	80020f4 <HAL_DMA_Abort_IT>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002838:	4610      	mov	r0, r2
 800283a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	222a      	movs	r2, #42	; 0x2a
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002860:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 8002882:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	0c1b      	lsrs	r3, r3, #16
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2208      	movs	r2, #8
 800289e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80028a8:	f248 0102 	movw	r1, #32770	; 0x8002
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f001 f879 	bl	80039a4 <I2C_Enable_IRQ>

    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	08003903 	.word	0x08003903
 80028c4:	08002a8f 	.word	0x08002a8f

080028c8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d10d      	bne.n	80028f8 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2228      	movs	r2, #40	; 0x28
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_I2C_EnableListen_IT+0x3c>)
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80028ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f001 f858 	bl	80039a4 <I2C_Enable_IRQ>

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	08002a8f 	.word	0x08002a8f

08002908 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	68f9      	ldr	r1, [r7, #12]
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
  }
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d010      	beq.n	8002982 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	09db      	lsrs	r3, r3, #7
 8002964:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002980:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	0a9b      	lsrs	r3, r3, #10
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d010      	beq.n	80029b0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	09db      	lsrs	r3, r3, #7
 8002992:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f043 0208 	orr.w	r2, r3, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	0a5b      	lsrs	r3, r3, #9
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d010      	beq.n	80029de <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	09db      	lsrs	r3, r3, #7
 80029c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f043 0202 	orr.w	r2, r3, #2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029dc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 030b 	and.w	r3, r3, #11
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80029ee:	68f9      	ldr	r1, [r7, #12]
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fe6b 	bl	80036cc <I2C_ITError>
  }
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <I2C_Slave_ISR_IT+0x24>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e0ec      	b.n	8002c8c <I2C_Slave_ISR_IT+0x1fe>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ad2:	6939      	ldr	r1, [r7, #16]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fc99 	bl	800340c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d04d      	beq.n	8002b82 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d047      	beq.n	8002b82 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d128      	bne.n	8002b4e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b28      	cmp	r3, #40	; 0x28
 8002b06:	d108      	bne.n	8002b1a <I2C_Slave_ISR_IT+0x8c>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b0e:	d104      	bne.n	8002b1a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b10:	6939      	ldr	r1, [r7, #16]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fd84 	bl	8003620 <I2C_ITListenCplt>
 8002b18:	e032      	b.n	8002b80 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b29      	cmp	r3, #41	; 0x29
 8002b24:	d10e      	bne.n	8002b44 <I2C_Slave_ISR_IT+0xb6>
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b2c:	d00a      	beq.n	8002b44 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2210      	movs	r2, #16
 8002b34:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 febf 	bl	80038ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fb3d 	bl	80031bc <I2C_ITSlaveSeqCplt>
 8002b42:	e01d      	b.n	8002b80 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002b4c:	e096      	b.n	8002c7c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2210      	movs	r2, #16
 8002b54:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <I2C_Slave_ISR_IT+0xe4>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b6e:	f040 8085 	bne.w	8002c7c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	4619      	mov	r1, r3
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fda7 	bl	80036cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b7e:	e07d      	b.n	8002c7c <I2C_Slave_ISR_IT+0x1ee>
 8002b80:	e07c      	b.n	8002c7c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d030      	beq.n	8002bf0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d02a      	beq.n	8002bf0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d018      	beq.n	8002bd6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d14f      	bne.n	8002c80 <I2C_Slave_ISR_IT+0x1f2>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002be6:	d04b      	beq.n	8002c80 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fae7 	bl	80031bc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002bee:	e047      	b.n	8002c80 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	08db      	lsrs	r3, r3, #3
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	08db      	lsrs	r3, r3, #3
 8002c00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c08:	6939      	ldr	r1, [r7, #16]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fa15 	bl	800303a <I2C_ITAddrCplt>
 8002c10:	e037      	b.n	8002c82 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	085b      	lsrs	r3, r3, #1
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d031      	beq.n	8002c82 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d02b      	beq.n	8002c82 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d018      	beq.n	8002c66 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c64:	e00d      	b.n	8002c82 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6c:	d002      	beq.n	8002c74 <I2C_Slave_ISR_IT+0x1e6>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 faa1 	bl	80031bc <I2C_ITSlaveSeqCplt>
 8002c7a:	e002      	b.n	8002c82 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002c7c:	bf00      	nop
 8002c7e:	e000      	b.n	8002c82 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002c80:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <I2C_Master_ISR_DMA+0x1a>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e0e1      	b.n	8002e72 <I2C_Master_ISR_DMA+0x1de>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d017      	beq.n	8002cf2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d011      	beq.n	8002cf2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002ce2:	2120      	movs	r1, #32
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fe5d 	bl	80039a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fde5 	bl	80038ba <I2C_Flush_TXDR>
 8002cf0:	e0ba      	b.n	8002e68 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	09db      	lsrs	r3, r3, #7
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d072      	beq.n	8002de4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d06c      	beq.n	8002de4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d18:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d04e      	beq.n	8002dc2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d30:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2bff      	cmp	r3, #255	; 0xff
 8002d3a:	d906      	bls.n	8002d4a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002d42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e010      	b.n	8002d6c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d5c:	d003      	beq.n	8002d66 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	e002      	b.n	8002d6c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	8a79      	ldrh	r1, [r7, #18]
 8002d74:	2300      	movs	r3, #0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fde0 	bl	8003940 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b22      	cmp	r3, #34	; 0x22
 8002d9c:	d108      	bne.n	8002db0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002dae:	e05b      	b.n	8002e68 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dbe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002dc0:	e052      	b.n	8002e68 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dd0:	d003      	beq.n	8002dda <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f9b5 	bl	8003142 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002dd8:	e046      	b.n	8002e68 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002dda:	2140      	movs	r1, #64	; 0x40
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fc75 	bl	80036cc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002de2:	e041      	b.n	8002e68 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d029      	beq.n	8002e44 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d023      	beq.n	8002e44 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d119      	bne.n	8002e3a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e14:	d027      	beq.n	8002e66 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e1e:	d108      	bne.n	8002e32 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e2e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002e30:	e019      	b.n	8002e66 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f985 	bl	8003142 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002e38:	e015      	b.n	8002e66 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e3a:	2140      	movs	r1, #64	; 0x40
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fc45 	bl	80036cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e42:	e010      	b.n	8002e66 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fa0a 	bl	8003278 <I2C_ITMasterCplt>
 8002e64:	e000      	b.n	8002e68 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002e66:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b088      	sub	sp, #32
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <I2C_Slave_ISR_DMA+0x24>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0c9      	b.n	8003032 <I2C_Slave_ISR_DMA+0x1b8>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 faa3 	bl	800340c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 809a 	beq.w	8003008 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8093 	beq.w	8003008 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0b9b      	lsrs	r3, r3, #14
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d105      	bne.n	8002efa <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0bdb      	lsrs	r3, r3, #15
 8002ef2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d07f      	beq.n	8002ffa <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	0bdb      	lsrs	r3, r3, #15
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0b9b      	lsrs	r3, r3, #14
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d128      	bne.n	8002f9a <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b28      	cmp	r3, #40	; 0x28
 8002f52:	d108      	bne.n	8002f66 <I2C_Slave_ISR_DMA+0xec>
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f5a:	d104      	bne.n	8002f66 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fb5e 	bl	8003620 <I2C_ITListenCplt>
 8002f64:	e048      	b.n	8002ff8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b29      	cmp	r3, #41	; 0x29
 8002f70:	d10e      	bne.n	8002f90 <I2C_Slave_ISR_DMA+0x116>
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f78:	d00a      	beq.n	8002f90 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2210      	movs	r2, #16
 8002f80:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fc99 	bl	80038ba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f917 	bl	80031bc <I2C_ITSlaveSeqCplt>
 8002f8e:	e033      	b.n	8002ff8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2210      	movs	r2, #16
 8002f96:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002f98:	e034      	b.n	8003004 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	f043 0204 	orr.w	r2, r3, #4
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <I2C_Slave_ISR_DMA+0x14a>
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc2:	d11f      	bne.n	8003004 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b21      	cmp	r3, #33	; 0x21
 8002fc8:	d002      	beq.n	8002fd0 <I2C_Slave_ISR_DMA+0x156>
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b29      	cmp	r3, #41	; 0x29
 8002fce:	d103      	bne.n	8002fd8 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2221      	movs	r2, #33	; 0x21
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd6:	e008      	b.n	8002fea <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b22      	cmp	r3, #34	; 0x22
 8002fdc:	d002      	beq.n	8002fe4 <I2C_Slave_ISR_DMA+0x16a>
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8002fe2:	d102      	bne.n	8002fea <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2222      	movs	r2, #34	; 0x22
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	4619      	mov	r1, r3
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fb6b 	bl	80036cc <I2C_ITError>
      if (treatdmanack == 1U)
 8002ff6:	e005      	b.n	8003004 <I2C_Slave_ISR_DMA+0x18a>
 8002ff8:	e004      	b.n	8003004 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2210      	movs	r2, #16
 8003000:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003002:	e011      	b.n	8003028 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003004:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003006:	e00f      	b.n	8003028 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	08db      	lsrs	r3, r3, #3
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	08db      	lsrs	r3, r3, #3
 8003018:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f809 	bl	800303a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003050:	2b28      	cmp	r3, #40	; 0x28
 8003052:	d16a      	bne.n	800312a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	0c1b      	lsrs	r3, r3, #16
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	0c1b      	lsrs	r3, r3, #16
 800306c:	b29b      	uxth	r3, r3
 800306e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003072:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	b29b      	uxth	r3, r3
 800307c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003080:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	b29b      	uxth	r3, r3
 800308a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800308e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d138      	bne.n	800310a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003098:	897b      	ldrh	r3, [r7, #10]
 800309a:	09db      	lsrs	r3, r3, #7
 800309c:	b29a      	uxth	r2, r3
 800309e:	89bb      	ldrh	r3, [r7, #12]
 80030a0:	4053      	eors	r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	f003 0306 	and.w	r3, r3, #6
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d11c      	bne.n	80030e6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80030ac:	897b      	ldrh	r3, [r7, #10]
 80030ae:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d13b      	bne.n	800313a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2208      	movs	r2, #8
 80030ce:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030d8:	89ba      	ldrh	r2, [r7, #12]
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	4619      	mov	r1, r3
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fda0 	bl	8000c24 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030e4:	e029      	b.n	800313a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80030e6:	893b      	ldrh	r3, [r7, #8]
 80030e8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fcc2 	bl	8003a78 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030fc:	89ba      	ldrh	r2, [r7, #12]
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	4619      	mov	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fd8e 	bl	8000c24 <HAL_I2C_AddrCallback>
}
 8003108:	e017      	b.n	800313a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800310a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fcb2 	bl	8003a78 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800311c:	89ba      	ldrh	r2, [r7, #12]
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	4619      	mov	r1, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fd fd7e 	bl	8000c24 <HAL_I2C_AddrCallback>
}
 8003128:	e007      	b.n	800313a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2208      	movs	r2, #8
 8003130:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800313a:	bf00      	nop
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b21      	cmp	r3, #33	; 0x21
 800315c:	d115      	bne.n	800318a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2211      	movs	r2, #17
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003172:	2101      	movs	r1, #1
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fc7f 	bl	8003a78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fc3b 	bl	80029fe <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003188:	e014      	b.n	80031b4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2212      	movs	r2, #18
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800319e:	2102      	movs	r1, #2
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fc69 	bl	8003a78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff fc2f 	bl	8002a12 <HAL_I2C_MasterRxCpltCallback>
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	0b9b      	lsrs	r3, r3, #14
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e00d      	b.n	800320e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0bdb      	lsrs	r3, r3, #15
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800320c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b29      	cmp	r3, #41	; 0x29
 8003218:	d112      	bne.n	8003240 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2228      	movs	r2, #40	; 0x28
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2221      	movs	r2, #33	; 0x21
 8003226:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003228:	2101      	movs	r1, #1
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fc24 	bl	8003a78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fbf4 	bl	8002a26 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800323e:	e017      	b.n	8003270 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b2a      	cmp	r3, #42	; 0x2a
 800324a:	d111      	bne.n	8003270 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2228      	movs	r2, #40	; 0x28
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2222      	movs	r2, #34	; 0x22
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800325a:	2102      	movs	r1, #2
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fc0b 	bl	8003a78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fb4a 	bl	8000904 <HAL_I2C_SlaveRxCpltCallback>
}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2220      	movs	r2, #32
 800328c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b21      	cmp	r3, #33	; 0x21
 8003298:	d107      	bne.n	80032aa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800329a:	2101      	movs	r1, #1
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fbeb 	bl	8003a78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2211      	movs	r2, #17
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
 80032a8:	e00c      	b.n	80032c4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b22      	cmp	r3, #34	; 0x22
 80032b4:	d106      	bne.n	80032c4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032b6:	2102      	movs	r1, #2
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fbdd 	bl	8003a78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2212      	movs	r2, #18
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6859      	ldr	r1, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4b4d      	ldr	r3, [pc, #308]	; (8003404 <I2C_ITMasterCplt+0x18c>)
 80032d0:	400b      	ands	r3, r1
 80032d2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4a      	ldr	r2, [pc, #296]	; (8003408 <I2C_ITMasterCplt+0x190>)
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d009      	beq.n	8003300 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2210      	movs	r2, #16
 80032f2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b60      	cmp	r3, #96	; 0x60
 800330a:	d10b      	bne.n	8003324 <I2C_ITMasterCplt+0xac>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	b2db      	uxtb	r3, r3
 8003320:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003322:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fac8 	bl	80038ba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b60      	cmp	r3, #96	; 0x60
 800333a:	d002      	beq.n	8003342 <I2C_ITMasterCplt+0xca>
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f9bf 	bl	80036cc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800334e:	e054      	b.n	80033fa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b21      	cmp	r3, #33	; 0x21
 800335a:	d124      	bne.n	80033a6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d10b      	bne.n	800338e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fb57 	bl	8002a3a <HAL_I2C_MemTxCpltCallback>
}
 800338c:	e035      	b.n	80033fa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff fb2d 	bl	80029fe <HAL_I2C_MasterTxCpltCallback>
}
 80033a4:	e029      	b.n	80033fa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b22      	cmp	r3, #34	; 0x22
 80033b0:	d123      	bne.n	80033fa <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d10b      	bne.n	80033e4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fb36 	bl	8002a4e <HAL_I2C_MemRxCpltCallback>
}
 80033e2:	e00a      	b.n	80033fa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff fb0c 	bl	8002a12 <HAL_I2C_MasterRxCpltCallback>
}
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	fe00e800 	.word	0xfe00e800
 8003408:	ffff0000 	.word	0xffff0000

0800340c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003428:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2220      	movs	r2, #32
 8003430:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b21      	cmp	r3, #33	; 0x21
 8003436:	d002      	beq.n	800343e <I2C_ITSlaveCplt+0x32>
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b29      	cmp	r3, #41	; 0x29
 800343c:	d108      	bne.n	8003450 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800343e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fb18 	bl	8003a78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2221      	movs	r2, #33	; 0x21
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
 800344e:	e00d      	b.n	800346c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b22      	cmp	r3, #34	; 0x22
 8003454:	d002      	beq.n	800345c <I2C_ITSlaveCplt+0x50>
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b2a      	cmp	r3, #42	; 0x2a
 800345a:	d107      	bne.n	800346c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800345c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fb09 	bl	8003a78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2222      	movs	r2, #34	; 0x22
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b64      	ldr	r3, [pc, #400]	; (8003618 <I2C_ITSlaveCplt+0x20c>)
 8003488:	400b      	ands	r3, r1
 800348a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fa14 	bl	80038ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	0b9b      	lsrs	r3, r3, #14
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d013      	beq.n	80034c6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d020      	beq.n	80034f8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034c4:	e018      	b.n	80034f8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	0bdb      	lsrs	r3, r3, #15
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d012      	beq.n	80034f8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0304 	bic.w	r3, r3, #4
 800350a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00c      	beq.n	8003546 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	2b00      	cmp	r3, #0
 8003570:	d010      	beq.n	8003594 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	4619      	mov	r1, r3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8a7 	bl	80036cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b28      	cmp	r3, #40	; 0x28
 8003588:	d141      	bne.n	800360e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800358a:	6979      	ldr	r1, [r7, #20]
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f847 	bl	8003620 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003592:	e03c      	b.n	800360e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800359c:	d014      	beq.n	80035c8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff fe0c 	bl	80031bc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <I2C_ITSlaveCplt+0x210>)
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7fd fb6b 	bl	8000c9c <HAL_I2C_ListenCpltCallback>
}
 80035c6:	e022      	b.n	800360e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b22      	cmp	r3, #34	; 0x22
 80035d2:	d10e      	bne.n	80035f2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd f98a 	bl	8000904 <HAL_I2C_SlaveRxCpltCallback>
}
 80035f0:	e00d      	b.n	800360e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fa0c 	bl	8002a26 <HAL_I2C_SlaveTxCpltCallback>
}
 800360e:	bf00      	nop
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	fe00e800 	.word	0xfe00e800
 800361c:	ffff0000 	.word	0xffff0000

08003620 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <I2C_ITListenCplt+0xa8>)
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d022      	beq.n	800369e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	d012      	beq.n	800369e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f043 0204 	orr.w	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800369e:	f248 0103 	movw	r1, #32771	; 0x8003
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f9e8 	bl	8003a78 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2210      	movs	r2, #16
 80036ae:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fd faef 	bl	8000c9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	ffff0000 	.word	0xffff0000

080036cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a5d      	ldr	r2, [pc, #372]	; (8003860 <I2C_ITError+0x194>)
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b28      	cmp	r3, #40	; 0x28
 8003702:	d005      	beq.n	8003710 <I2C_ITError+0x44>
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b29      	cmp	r3, #41	; 0x29
 8003708:	d002      	beq.n	8003710 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b2a      	cmp	r3, #42	; 0x2a
 800370e:	d10b      	bne.n	8003728 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003710:	2103      	movs	r1, #3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f9b0 	bl	8003a78 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2228      	movs	r2, #40	; 0x28
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a50      	ldr	r2, [pc, #320]	; (8003864 <I2C_ITError+0x198>)
 8003724:	635a      	str	r2, [r3, #52]	; 0x34
 8003726:	e011      	b.n	800374c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003728:	f248 0103 	movw	r1, #32771	; 0x8003
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f9a3 	bl	8003a78 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b60      	cmp	r3, #96	; 0x60
 800373c:	d003      	beq.n	8003746 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	2b00      	cmp	r3, #0
 8003758:	d039      	beq.n	80037ce <I2C_ITError+0x102>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b11      	cmp	r3, #17
 800375e:	d002      	beq.n	8003766 <I2C_ITError+0x9a>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b21      	cmp	r3, #33	; 0x21
 8003764:	d133      	bne.n	80037ce <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003774:	d107      	bne.n	8003786 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003784:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fcf3 	bl	8002176 <HAL_DMA_GetState>
 8003790:	4603      	mov	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d017      	beq.n	80037c6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	4a33      	ldr	r2, [pc, #204]	; (8003868 <I2C_ITError+0x19c>)
 800379c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fca2 	bl	80020f4 <HAL_DMA_Abort_IT>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d04d      	beq.n	8003852 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037c0:	4610      	mov	r0, r2
 80037c2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037c4:	e045      	b.n	8003852 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f850 	bl	800386c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037cc:	e041      	b.n	8003852 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d039      	beq.n	800384a <I2C_ITError+0x17e>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b12      	cmp	r3, #18
 80037da:	d002      	beq.n	80037e2 <I2C_ITError+0x116>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b22      	cmp	r3, #34	; 0x22
 80037e0:	d133      	bne.n	800384a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f0:	d107      	bne.n	8003802 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003800:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe fcb5 	bl	8002176 <HAL_DMA_GetState>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d017      	beq.n	8003842 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <I2C_ITError+0x19c>)
 8003818:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fc64 	bl	80020f4 <HAL_DMA_Abort_IT>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d011      	beq.n	8003856 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800383c:	4610      	mov	r0, r2
 800383e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003840:	e009      	b.n	8003856 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f812 	bl	800386c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003848:	e005      	b.n	8003856 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f80e 	bl	800386c <I2C_TreatErrorCallback>
  }
}
 8003850:	e002      	b.n	8003858 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003856:	bf00      	nop
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	ffff0000 	.word	0xffff0000
 8003864:	08002a8f 	.word	0x08002a8f
 8003868:	08003903 	.word	0x08003903

0800386c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b60      	cmp	r3, #96	; 0x60
 800387e:	d10e      	bne.n	800389e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff f8e3 	bl	8002a62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800389c:	e009      	b.n	80038b2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7fd fa09 	bl	8000cc4 <HAL_I2C_ErrorCallback>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d103      	bne.n	80038d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2200      	movs	r2, #0
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d007      	beq.n	80038f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	619a      	str	r2, [r3, #24]
  }
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	2200      	movs	r2, #0
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	2200      	movs	r2, #0
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff ff9b 	bl	800386c <I2C_TreatErrorCallback>
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	817b      	strh	r3, [r7, #10]
 800394e:	4613      	mov	r3, r2
 8003950:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003958:	7a7b      	ldrb	r3, [r7, #9]
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003960:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	4313      	orrs	r3, r2
 800396a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800396e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	0d5b      	lsrs	r3, r3, #21
 800397a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <I2C_TransferConfig+0x60>)
 8003980:	430b      	orrs	r3, r1
 8003982:	43db      	mvns	r3, r3
 8003984:	ea02 0103 	and.w	r1, r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	03ff63ff 	.word	0x03ff63ff

080039a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	4a2d      	ldr	r2, [pc, #180]	; (8003a70 <I2C_Enable_IRQ+0xcc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d004      	beq.n	80039c8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80039c2:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <I2C_Enable_IRQ+0xd0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d11d      	bne.n	8003a04 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	da03      	bge.n	80039d8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80039d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80039d8:	887b      	ldrh	r3, [r7, #2]
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d103      	bne.n	80039e6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80039e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d103      	bne.n	80039f4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039f2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80039f4:	887b      	ldrh	r3, [r7, #2]
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d12c      	bne.n	8003a54 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a00:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a02:	e027      	b.n	8003a54 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	da03      	bge.n	8003a14 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003a24:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d103      	bne.n	8003a46 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a46:	887b      	ldrh	r3, [r7, #2]
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d103      	bne.n	8003a54 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	08002c95 	.word	0x08002c95
 8003a74:	08002e7b 	.word	0x08002e7b

08003a78 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00f      	beq.n	8003ab2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003a98:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003aa6:	2b28      	cmp	r3, #40	; 0x28
 8003aa8:	d003      	beq.n	8003ab2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ab0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ab2:	887b      	ldrh	r3, [r7, #2]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00f      	beq.n	8003adc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003ac2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ad0:	2b28      	cmp	r3, #40	; 0x28
 8003ad2:	d003      	beq.n	8003adc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ada:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003adc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	da03      	bge.n	8003aec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003aea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d103      	bne.n	8003afa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003afa:	887b      	ldrh	r3, [r7, #2]
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d103      	bne.n	8003b08 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f043 0320 	orr.w	r3, r3, #32
 8003b06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b08:	887b      	ldrh	r3, [r7, #2]
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d103      	bne.n	8003b16 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	400a      	ands	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d138      	bne.n	8003bbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e032      	b.n	8003bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2224      	movs	r2, #36	; 0x24
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6819      	ldr	r1, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d139      	bne.n	8003c54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e033      	b.n	8003c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2224      	movs	r2, #36	; 0x24
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_PWREx_GetVoltageRange+0x18>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40007000 	.word	0x40007000

08003c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8e:	d130      	bne.n	8003cf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c90:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9c:	d038      	beq.n	8003d10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cae:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2232      	movs	r2, #50	; 0x32
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0c9b      	lsrs	r3, r3, #18
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc4:	e002      	b.n	8003ccc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ccc:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd8:	d102      	bne.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f2      	bne.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cec:	d110      	bne.n	8003d10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00f      	b.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d007      	beq.n	8003d10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d08:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40007000 	.word	0x40007000
 8003d24:	20000000 	.word	0x20000000
 8003d28:	431bde83 	.word	0x431bde83

08003d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e3ca      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3e:	4b97      	ldr	r3, [pc, #604]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d48:	4b94      	ldr	r3, [pc, #592]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80e4 	beq.w	8003f28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_RCC_OscConfig+0x4a>
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	f040 808b 	bne.w	8003e84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	f040 8087 	bne.w	8003e84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d76:	4b89      	ldr	r3, [pc, #548]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_RCC_OscConfig+0x62>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e3a2      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	4b82      	ldr	r3, [pc, #520]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <HAL_RCC_OscConfig+0x7c>
 8003d9e:	4b7f      	ldr	r3, [pc, #508]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da6:	e005      	b.n	8003db4 <HAL_RCC_OscConfig+0x88>
 8003da8:	4b7c      	ldr	r3, [pc, #496]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d223      	bcs.n	8003e00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fd87 	bl	80048d0 <RCC_SetFlashLatencyFromMSIRange>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e383      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dcc:	4b73      	ldr	r3, [pc, #460]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a72      	ldr	r2, [pc, #456]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003dd2:	f043 0308 	orr.w	r3, r3, #8
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b70      	ldr	r3, [pc, #448]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	496d      	ldr	r1, [pc, #436]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dea:	4b6c      	ldr	r3, [pc, #432]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	4968      	ldr	r1, [pc, #416]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
 8003dfe:	e025      	b.n	8003e4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e00:	4b66      	ldr	r3, [pc, #408]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a65      	ldr	r2, [pc, #404]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003e06:	f043 0308 	orr.w	r3, r3, #8
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4960      	ldr	r1, [pc, #384]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e1e:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	495b      	ldr	r1, [pc, #364]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fd47 	bl	80048d0 <RCC_SetFlashLatencyFromMSIRange>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e343      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e4c:	f000 fc4a 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b52      	ldr	r3, [pc, #328]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	4950      	ldr	r1, [pc, #320]	; (8003fa0 <HAL_RCC_OscConfig+0x274>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	4a4e      	ldr	r2, [pc, #312]	; (8003fa4 <HAL_RCC_OscConfig+0x278>)
 8003e6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e6c:	4b4e      	ldr	r3, [pc, #312]	; (8003fa8 <HAL_RCC_OscConfig+0x27c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fd ff2d 	bl	8001cd0 <HAL_InitTick>
 8003e76:	4603      	mov	r3, r0
 8003e78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d052      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	e327      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d032      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e8c:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a42      	ldr	r2, [pc, #264]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e98:	f7fe f83e 	bl	8001f18 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ea0:	f7fe f83a 	bl	8001f18 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e310      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb2:	4b3a      	ldr	r3, [pc, #232]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a36      	ldr	r2, [pc, #216]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	4931      	ldr	r1, [pc, #196]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003edc:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	492c      	ldr	r1, [pc, #176]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
 8003ef0:	e01a      	b.n	8003f28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003efe:	f7fe f80b 	bl	8001f18 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f06:	f7fe f807 	bl	8001f18 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e2dd      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f18:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x1da>
 8003f24:	e000      	b.n	8003f28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d074      	beq.n	800401e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d005      	beq.n	8003f46 <HAL_RCC_OscConfig+0x21a>
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	d10e      	bne.n	8003f5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d10b      	bne.n	8003f5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d064      	beq.n	800401c <HAL_RCC_OscConfig+0x2f0>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d160      	bne.n	800401c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e2ba      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f66:	d106      	bne.n	8003f76 <HAL_RCC_OscConfig+0x24a>
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	e026      	b.n	8003fc4 <HAL_RCC_OscConfig+0x298>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f7e:	d115      	bne.n	8003fac <HAL_RCC_OscConfig+0x280>
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a05      	ldr	r2, [pc, #20]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a02      	ldr	r2, [pc, #8]	; (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	e014      	b.n	8003fc4 <HAL_RCC_OscConfig+0x298>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	0800aa88 	.word	0x0800aa88
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	20000004 	.word	0x20000004
 8003fac:	4ba0      	ldr	r3, [pc, #640]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a9f      	ldr	r2, [pc, #636]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b9d      	ldr	r3, [pc, #628]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a9c      	ldr	r2, [pc, #624]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8003fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d013      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fd ffa4 	bl	8001f18 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fd ffa0 	bl	8001f18 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e276      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe6:	4b92      	ldr	r3, [pc, #584]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x2a8>
 8003ff2:	e014      	b.n	800401e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fd ff90 	bl	8001f18 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fd ff8c 	bl	8001f18 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e262      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800400e:	4b88      	ldr	r3, [pc, #544]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2d0>
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d060      	beq.n	80040ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b04      	cmp	r3, #4
 800402e:	d005      	beq.n	800403c <HAL_RCC_OscConfig+0x310>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b0c      	cmp	r3, #12
 8004034:	d119      	bne.n	800406a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d116      	bne.n	800406a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800403c:	4b7c      	ldr	r3, [pc, #496]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_OscConfig+0x328>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e23f      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004054:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	4973      	ldr	r1, [pc, #460]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004068:	e040      	b.n	80040ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d023      	beq.n	80040ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004072:	4b6f      	ldr	r3, [pc, #444]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a6e      	ldr	r2, [pc, #440]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7fd ff4b 	bl	8001f18 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004086:	f7fd ff47 	bl	8001f18 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e21d      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004098:	4b65      	ldr	r3, [pc, #404]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a4:	4b62      	ldr	r3, [pc, #392]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	495f      	ldr	r1, [pc, #380]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	604b      	str	r3, [r1, #4]
 80040b8:	e018      	b.n	80040ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ba:	4b5d      	ldr	r3, [pc, #372]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a5c      	ldr	r2, [pc, #368]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 80040c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fd ff27 	bl	8001f18 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ce:	f7fd ff23 	bl	8001f18 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e1f9      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040e0:	4b53      	ldr	r3, [pc, #332]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d03c      	beq.n	8004172 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01c      	beq.n	800413a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004100:	4b4b      	ldr	r3, [pc, #300]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004106:	4a4a      	ldr	r2, [pc, #296]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fd ff02 	bl	8001f18 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004118:	f7fd fefe 	bl	8001f18 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e1d4      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800412a:	4b41      	ldr	r3, [pc, #260]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 800412c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ef      	beq.n	8004118 <HAL_RCC_OscConfig+0x3ec>
 8004138:	e01b      	b.n	8004172 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800413a:	4b3d      	ldr	r3, [pc, #244]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 800413c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004140:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414a:	f7fd fee5 	bl	8001f18 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004152:	f7fd fee1 	bl	8001f18 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e1b7      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004164:	4b32      	ldr	r3, [pc, #200]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1ef      	bne.n	8004152 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80a6 	beq.w	80042cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004180:	2300      	movs	r3, #0
 8004182:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004184:	4b2a      	ldr	r3, [pc, #168]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10d      	bne.n	80041ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004190:	4b27      	ldr	r3, [pc, #156]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	4a26      	ldr	r2, [pc, #152]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	6593      	str	r3, [r2, #88]	; 0x58
 800419c:	4b24      	ldr	r3, [pc, #144]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a8:	2301      	movs	r3, #1
 80041aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ac:	4b21      	ldr	r3, [pc, #132]	; (8004234 <HAL_RCC_OscConfig+0x508>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d118      	bne.n	80041ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b8:	4b1e      	ldr	r3, [pc, #120]	; (8004234 <HAL_RCC_OscConfig+0x508>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <HAL_RCC_OscConfig+0x508>)
 80041be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c4:	f7fd fea8 	bl	8001f18 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041cc:	f7fd fea4 	bl	8001f18 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e17a      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <HAL_RCC_OscConfig+0x508>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d108      	bne.n	8004204 <HAL_RCC_OscConfig+0x4d8>
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004202:	e029      	b.n	8004258 <HAL_RCC_OscConfig+0x52c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b05      	cmp	r3, #5
 800420a:	d115      	bne.n	8004238 <HAL_RCC_OscConfig+0x50c>
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	4a07      	ldr	r2, [pc, #28]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	4a03      	ldr	r2, [pc, #12]	; (8004230 <HAL_RCC_OscConfig+0x504>)
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422c:	e014      	b.n	8004258 <HAL_RCC_OscConfig+0x52c>
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
 8004234:	40007000 	.word	0x40007000
 8004238:	4b9c      	ldr	r3, [pc, #624]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	4a9b      	ldr	r2, [pc, #620]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004248:	4b98      	ldr	r3, [pc, #608]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	4a97      	ldr	r2, [pc, #604]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004250:	f023 0304 	bic.w	r3, r3, #4
 8004254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d016      	beq.n	800428e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fd fe5a 	bl	8001f18 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004266:	e00a      	b.n	800427e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fd fe56 	bl	8001f18 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e12a      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427e:	4b8b      	ldr	r3, [pc, #556]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ed      	beq.n	8004268 <HAL_RCC_OscConfig+0x53c>
 800428c:	e015      	b.n	80042ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428e:	f7fd fe43 	bl	8001f18 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004294:	e00a      	b.n	80042ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7fd fe3f 	bl	8001f18 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e113      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042ac:	4b7f      	ldr	r3, [pc, #508]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1ed      	bne.n	8004296 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ba:	7ffb      	ldrb	r3, [r7, #31]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c0:	4b7a      	ldr	r3, [pc, #488]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	4a79      	ldr	r2, [pc, #484]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80fe 	beq.w	80044d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	2b02      	cmp	r3, #2
 80042dc:	f040 80d0 	bne.w	8004480 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042e0:	4b72      	ldr	r3, [pc, #456]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 0203 	and.w	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d130      	bne.n	8004356 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	3b01      	subs	r3, #1
 8004300:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d127      	bne.n	8004356 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004310:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d11f      	bne.n	8004356 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004320:	2a07      	cmp	r2, #7
 8004322:	bf14      	ite	ne
 8004324:	2201      	movne	r2, #1
 8004326:	2200      	moveq	r2, #0
 8004328:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800432a:	4293      	cmp	r3, r2
 800432c:	d113      	bne.n	8004356 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	3b01      	subs	r3, #1
 800433c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d109      	bne.n	8004356 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	3b01      	subs	r3, #1
 8004350:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d06e      	beq.n	8004434 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b0c      	cmp	r3, #12
 800435a:	d069      	beq.n	8004430 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800435c:	4b53      	ldr	r3, [pc, #332]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004368:	4b50      	ldr	r3, [pc, #320]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0ad      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004378:	4b4c      	ldr	r3, [pc, #304]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a4b      	ldr	r2, [pc, #300]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 800437e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004382:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004384:	f7fd fdc8 	bl	8001f18 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438c:	f7fd fdc4 	bl	8001f18 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e09a      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043aa:	4b40      	ldr	r3, [pc, #256]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	4b40      	ldr	r3, [pc, #256]	; (80044b0 <HAL_RCC_OscConfig+0x784>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043ba:	3a01      	subs	r2, #1
 80043bc:	0112      	lsls	r2, r2, #4
 80043be:	4311      	orrs	r1, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043c4:	0212      	lsls	r2, r2, #8
 80043c6:	4311      	orrs	r1, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043cc:	0852      	lsrs	r2, r2, #1
 80043ce:	3a01      	subs	r2, #1
 80043d0:	0552      	lsls	r2, r2, #21
 80043d2:	4311      	orrs	r1, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043d8:	0852      	lsrs	r2, r2, #1
 80043da:	3a01      	subs	r2, #1
 80043dc:	0652      	lsls	r2, r2, #25
 80043de:	4311      	orrs	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043e4:	0912      	lsrs	r2, r2, #4
 80043e6:	0452      	lsls	r2, r2, #17
 80043e8:	430a      	orrs	r2, r1
 80043ea:	4930      	ldr	r1, [pc, #192]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043f0:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2d      	ldr	r2, [pc, #180]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043fc:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a2a      	ldr	r2, [pc, #168]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004406:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004408:	f7fd fd86 	bl	8001f18 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd fd82 	bl	8001f18 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e058      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800442e:	e050      	b.n	80044d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e04f      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004434:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d148      	bne.n	80044d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800444a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800444c:	4b17      	ldr	r3, [pc, #92]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a16      	ldr	r2, [pc, #88]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004456:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004458:	f7fd fd5e 	bl	8001f18 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fd fd5a 	bl	8001f18 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e030      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x734>
 800447e:	e028      	b.n	80044d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b0c      	cmp	r3, #12
 8004484:	d023      	beq.n	80044ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a08      	ldr	r2, [pc, #32]	; (80044ac <HAL_RCC_OscConfig+0x780>)
 800448c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fd fd41 	bl	8001f18 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004498:	e00c      	b.n	80044b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449a:	f7fd fd3d 	bl	8001f18 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d905      	bls.n	80044b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e013      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
 80044ac:	40021000 	.word	0x40021000
 80044b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_RCC_OscConfig+0x7b0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ec      	bne.n	800449a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_RCC_OscConfig+0x7b0>)
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	4905      	ldr	r1, [pc, #20]	; (80044dc <HAL_RCC_OscConfig+0x7b0>)
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_RCC_OscConfig+0x7b4>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60cb      	str	r3, [r1, #12]
 80044cc:	e001      	b.n	80044d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000
 80044e0:	feeefffc 	.word	0xfeeefffc

080044e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0e7      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f8:	4b75      	ldr	r3, [pc, #468]	; (80046d0 <HAL_RCC_ClockConfig+0x1ec>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d910      	bls.n	8004528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b72      	ldr	r3, [pc, #456]	; (80046d0 <HAL_RCC_ClockConfig+0x1ec>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 0207 	bic.w	r2, r3, #7
 800450e:	4970      	ldr	r1, [pc, #448]	; (80046d0 <HAL_RCC_ClockConfig+0x1ec>)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b6e      	ldr	r3, [pc, #440]	; (80046d0 <HAL_RCC_ClockConfig+0x1ec>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0cf      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	4b66      	ldr	r3, [pc, #408]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004540:	429a      	cmp	r2, r3
 8004542:	d908      	bls.n	8004556 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004544:	4b63      	ldr	r3, [pc, #396]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4960      	ldr	r1, [pc, #384]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04c      	beq.n	80045fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456a:	4b5a      	ldr	r3, [pc, #360]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d121      	bne.n	80045ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0a6      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004582:	4b54      	ldr	r3, [pc, #336]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d115      	bne.n	80045ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e09a      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800459a:	4b4e      	ldr	r3, [pc, #312]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e08e      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045aa:	4b4a      	ldr	r3, [pc, #296]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e086      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ba:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4943      	ldr	r1, [pc, #268]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045cc:	f7fd fca4 	bl	8001f18 <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d4:	f7fd fca0 	bl	8001f18 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e06e      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 020c 	and.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1eb      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d010      	beq.n	800462a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	4b31      	ldr	r3, [pc, #196]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004614:	429a      	cmp	r2, r3
 8004616:	d208      	bcs.n	800462a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004618:	4b2e      	ldr	r3, [pc, #184]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	492b      	ldr	r1, [pc, #172]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800462a:	4b29      	ldr	r3, [pc, #164]	; (80046d0 <HAL_RCC_ClockConfig+0x1ec>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d210      	bcs.n	800465a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <HAL_RCC_ClockConfig+0x1ec>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f023 0207 	bic.w	r2, r3, #7
 8004640:	4923      	ldr	r1, [pc, #140]	; (80046d0 <HAL_RCC_ClockConfig+0x1ec>)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004648:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <HAL_RCC_ClockConfig+0x1ec>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d001      	beq.n	800465a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e036      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004666:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	4918      	ldr	r1, [pc, #96]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004674:	4313      	orrs	r3, r2
 8004676:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004684:	4b13      	ldr	r3, [pc, #76]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4910      	ldr	r1, [pc, #64]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004694:	4313      	orrs	r3, r2
 8004696:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004698:	f000 f824 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	490b      	ldr	r1, [pc, #44]	; (80046d8 <HAL_RCC_ClockConfig+0x1f4>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
 80046b4:	4a09      	ldr	r2, [pc, #36]	; (80046dc <HAL_RCC_ClockConfig+0x1f8>)
 80046b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046b8:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_RCC_ClockConfig+0x1fc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fd fb07 	bl	8001cd0 <HAL_InitTick>
 80046c2:	4603      	mov	r3, r0
 80046c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80046c6:	7afb      	ldrb	r3, [r7, #11]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40022000 	.word	0x40022000
 80046d4:	40021000 	.word	0x40021000
 80046d8:	0800aa88 	.word	0x0800aa88
 80046dc:	20000000 	.word	0x20000000
 80046e0:	20000004 	.word	0x20000004

080046e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	; 0x24
 80046e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	2300      	movs	r3, #0
 80046f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046f2:	4b3e      	ldr	r3, [pc, #248]	; (80047ec <HAL_RCC_GetSysClockFreq+0x108>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046fc:	4b3b      	ldr	r3, [pc, #236]	; (80047ec <HAL_RCC_GetSysClockFreq+0x108>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_GetSysClockFreq+0x34>
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d121      	bne.n	8004756 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d11e      	bne.n	8004756 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004718:	4b34      	ldr	r3, [pc, #208]	; (80047ec <HAL_RCC_GetSysClockFreq+0x108>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004724:	4b31      	ldr	r3, [pc, #196]	; (80047ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	e005      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004734:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004740:	4a2b      	ldr	r2, [pc, #172]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004748:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10d      	bne.n	800476c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004754:	e00a      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d102      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800475c:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e004      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b08      	cmp	r3, #8
 8004766:	d101      	bne.n	800476c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004768:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800476a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d134      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004772:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d003      	beq.n	800478a <HAL_RCC_GetSysClockFreq+0xa6>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d003      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0xac>
 8004788:	e005      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800478a:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800478c:	617b      	str	r3, [r7, #20]
      break;
 800478e:	e005      	b.n	800479c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004790:	4b19      	ldr	r3, [pc, #100]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004792:	617b      	str	r3, [r7, #20]
      break;
 8004794:	e002      	b.n	800479c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	617b      	str	r3, [r7, #20]
      break;
 800479a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800479c:	4b13      	ldr	r3, [pc, #76]	; (80047ec <HAL_RCC_GetSysClockFreq+0x108>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	3301      	adds	r3, #1
 80047a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_RCC_GetSysClockFreq+0x108>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	0a1b      	lsrs	r3, r3, #8
 80047b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	fb03 f202 	mul.w	r2, r3, r2
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_RCC_GetSysClockFreq+0x108>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	0e5b      	lsrs	r3, r3, #25
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	3301      	adds	r3, #1
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047dc:	69bb      	ldr	r3, [r7, #24]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3724      	adds	r7, #36	; 0x24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	0800aaa0 	.word	0x0800aaa0
 80047f4:	00f42400 	.word	0x00f42400
 80047f8:	007a1200 	.word	0x007a1200

080047fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004800:	4b03      	ldr	r3, [pc, #12]	; (8004810 <HAL_RCC_GetHCLKFreq+0x14>)
 8004802:	681b      	ldr	r3, [r3, #0]
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000000 	.word	0x20000000

08004814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004818:	f7ff fff0 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4904      	ldr	r1, [pc, #16]	; (800483c <HAL_RCC_GetPCLK1Freq+0x28>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	0800aa98 	.word	0x0800aa98

08004840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004844:	f7ff ffda 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b06      	ldr	r3, [pc, #24]	; (8004864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0adb      	lsrs	r3, r3, #11
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4904      	ldr	r1, [pc, #16]	; (8004868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000
 8004868:	0800aa98 	.word	0x0800aa98

0800486c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	220f      	movs	r2, #15
 800487a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800487c:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <HAL_RCC_GetClockConfig+0x5c>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0203 	and.w	r2, r3, #3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCC_GetClockConfig+0x5c>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_GetClockConfig+0x5c>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	08db      	lsrs	r3, r3, #3
 80048a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80048ae:	4b07      	ldr	r3, [pc, #28]	; (80048cc <HAL_RCC_GetClockConfig+0x60>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0207 	and.w	r2, r3, #7
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40022000 	.word	0x40022000

080048d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048dc:	4b2a      	ldr	r3, [pc, #168]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048e8:	f7ff f9bc 	bl	8003c64 <HAL_PWREx_GetVoltageRange>
 80048ec:	6178      	str	r0, [r7, #20]
 80048ee:	e014      	b.n	800491a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f0:	4b25      	ldr	r3, [pc, #148]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	4a24      	ldr	r2, [pc, #144]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6593      	str	r3, [r2, #88]	; 0x58
 80048fc:	4b22      	ldr	r3, [pc, #136]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004908:	f7ff f9ac 	bl	8003c64 <HAL_PWREx_GetVoltageRange>
 800490c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800490e:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004918:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004920:	d10b      	bne.n	800493a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b80      	cmp	r3, #128	; 0x80
 8004926:	d919      	bls.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2ba0      	cmp	r3, #160	; 0xa0
 800492c:	d902      	bls.n	8004934 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800492e:	2302      	movs	r3, #2
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	e013      	b.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004934:	2301      	movs	r3, #1
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	e010      	b.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b80      	cmp	r3, #128	; 0x80
 800493e:	d902      	bls.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004940:	2303      	movs	r3, #3
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	e00a      	b.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b80      	cmp	r3, #128	; 0x80
 800494a:	d102      	bne.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800494c:	2302      	movs	r3, #2
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e004      	b.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b70      	cmp	r3, #112	; 0x70
 8004956:	d101      	bne.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004958:	2301      	movs	r3, #1
 800495a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 0207 	bic.w	r2, r3, #7
 8004964:	4909      	ldr	r1, [pc, #36]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800496c:	4b07      	ldr	r3, [pc, #28]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	d001      	beq.n	800497e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40021000 	.word	0x40021000
 800498c:	40022000 	.word	0x40022000

08004990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004998:	2300      	movs	r3, #0
 800499a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800499c:	2300      	movs	r3, #0
 800499e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d041      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049b4:	d02a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049ba:	d824      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049c0:	d008      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049c6:	d81e      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d0:	d010      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049d2:	e018      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049d4:	4b86      	ldr	r3, [pc, #536]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a85      	ldr	r2, [pc, #532]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e0:	e015      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3304      	adds	r3, #4
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fabb 	bl	8004f64 <RCCEx_PLLSAI1_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f2:	e00c      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3320      	adds	r3, #32
 80049f8:	2100      	movs	r1, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fba6 	bl	800514c <RCCEx_PLLSAI2_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a04:	e003      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	74fb      	strb	r3, [r7, #19]
      break;
 8004a0a:	e000      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a14:	4b76      	ldr	r3, [pc, #472]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a22:	4973      	ldr	r1, [pc, #460]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a2a:	e001      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d041      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a44:	d02a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a4a:	d824      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a50:	d008      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a56:	d81e      	bhi.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a60:	d010      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a62:	e018      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a64:	4b62      	ldr	r3, [pc, #392]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4a61      	ldr	r2, [pc, #388]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a70:	e015      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3304      	adds	r3, #4
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fa73 	bl	8004f64 <RCCEx_PLLSAI1_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a82:	e00c      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3320      	adds	r3, #32
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fb5e 	bl	800514c <RCCEx_PLLSAI2_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a94:	e003      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	74fb      	strb	r3, [r7, #19]
      break;
 8004a9a:	e000      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a9e:	7cfb      	ldrb	r3, [r7, #19]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aa4:	4b52      	ldr	r3, [pc, #328]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab2:	494f      	ldr	r1, [pc, #316]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004aba:	e001      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80a0 	beq.w	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ad2:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00d      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae8:	4b41      	ldr	r3, [pc, #260]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	4a40      	ldr	r2, [pc, #256]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af2:	6593      	str	r3, [r2, #88]	; 0x58
 8004af4:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b00:	2301      	movs	r3, #1
 8004b02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b04:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a3a      	ldr	r2, [pc, #232]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b10:	f7fd fa02 	bl	8001f18 <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b16:	e009      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b18:	f7fd f9fe 	bl	8001f18 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d902      	bls.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	74fb      	strb	r3, [r7, #19]
        break;
 8004b2a:	e005      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b2c:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0ef      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b38:	7cfb      	ldrb	r3, [r7, #19]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d15c      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b3e:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01f      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d019      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b5c:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b68:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b78:	4b1d      	ldr	r3, [pc, #116]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fd f9bd 	bl	8001f18 <HAL_GetTick>
 8004b9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba0:	e00b      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fd f9b9 	bl	8001f18 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d902      	bls.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	74fb      	strb	r3, [r7, #19]
            break;
 8004bb8:	e006      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bba:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ec      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bde:	4904      	ldr	r1, [pc, #16]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004be6:	e009      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	74bb      	strb	r3, [r7, #18]
 8004bec:	e006      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf8:	7cfb      	ldrb	r3, [r7, #19]
 8004bfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bfc:	7c7b      	ldrb	r3, [r7, #17]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d105      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c02:	4b9e      	ldr	r3, [pc, #632]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c06:	4a9d      	ldr	r2, [pc, #628]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c1a:	4b98      	ldr	r3, [pc, #608]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c20:	f023 0203 	bic.w	r2, r3, #3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	4994      	ldr	r1, [pc, #592]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c3c:	4b8f      	ldr	r3, [pc, #572]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	f023 020c 	bic.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	498c      	ldr	r1, [pc, #560]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c5e:	4b87      	ldr	r3, [pc, #540]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	4983      	ldr	r1, [pc, #524]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c80:	4b7e      	ldr	r3, [pc, #504]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	497b      	ldr	r1, [pc, #492]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ca2:	4b76      	ldr	r3, [pc, #472]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb0:	4972      	ldr	r1, [pc, #456]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cc4:	4b6d      	ldr	r3, [pc, #436]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd2:	496a      	ldr	r1, [pc, #424]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ce6:	4b65      	ldr	r3, [pc, #404]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf4:	4961      	ldr	r1, [pc, #388]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d08:	4b5c      	ldr	r3, [pc, #368]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d16:	4959      	ldr	r1, [pc, #356]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d2a:	4b54      	ldr	r3, [pc, #336]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	4950      	ldr	r1, [pc, #320]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d4c:	4b4b      	ldr	r3, [pc, #300]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	4948      	ldr	r1, [pc, #288]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d6e:	4b43      	ldr	r3, [pc, #268]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	493f      	ldr	r1, [pc, #252]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d028      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d90:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9e:	4937      	ldr	r1, [pc, #220]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dae:	d106      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db0:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dba:	60d3      	str	r3, [r2, #12]
 8004dbc:	e011      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dc6:	d10c      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f8c8 	bl	8004f64 <RCCEx_PLLSAI1_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d028      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dee:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	491f      	ldr	r1, [pc, #124]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e0c:	d106      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	4a1a      	ldr	r2, [pc, #104]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e18:	60d3      	str	r3, [r2, #12]
 8004e1a:	e011      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 f899 	bl	8004f64 <RCCEx_PLLSAI1_Config>
 8004e32:	4603      	mov	r3, r0
 8004e34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e36:	7cfb      	ldrb	r3, [r7, #19]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02b      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5a:	4908      	ldr	r1, [pc, #32]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e6a:	d109      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a02      	ldr	r2, [pc, #8]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e76:	60d3      	str	r3, [r2, #12]
 8004e78:	e014      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	2101      	movs	r1, #1
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 f867 	bl	8004f64 <RCCEx_PLLSAI1_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02f      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eb0:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ebe:	4928      	ldr	r1, [pc, #160]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ece:	d10d      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	2102      	movs	r1, #2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f844 	bl	8004f64 <RCCEx_PLLSAI1_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d014      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ee6:	7cfb      	ldrb	r3, [r7, #19]
 8004ee8:	74bb      	strb	r3, [r7, #18]
 8004eea:	e011      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3320      	adds	r3, #32
 8004efa:	2102      	movs	r1, #2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f925 	bl	800514c <RCCEx_PLLSAI2_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f0c:	7cfb      	ldrb	r3, [r7, #19]
 8004f0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f1c:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f2a:	490d      	ldr	r1, [pc, #52]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f3e:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f4e:	4904      	ldr	r1, [pc, #16]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f56:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40021000 	.word	0x40021000

08004f64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f72:	4b75      	ldr	r3, [pc, #468]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d018      	beq.n	8004fb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f7e:	4b72      	ldr	r3, [pc, #456]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0203 	and.w	r2, r3, #3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d10d      	bne.n	8004faa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
       ||
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f96:	4b6c      	ldr	r3, [pc, #432]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
       ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d047      	beq.n	800503a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
 8004fae:	e044      	b.n	800503a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d018      	beq.n	8004fea <RCCEx_PLLSAI1_Config+0x86>
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d825      	bhi.n	8005008 <RCCEx_PLLSAI1_Config+0xa4>
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d002      	beq.n	8004fc6 <RCCEx_PLLSAI1_Config+0x62>
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d009      	beq.n	8004fd8 <RCCEx_PLLSAI1_Config+0x74>
 8004fc4:	e020      	b.n	8005008 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fc6:	4b60      	ldr	r3, [pc, #384]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d11d      	bne.n	800500e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd6:	e01a      	b.n	800500e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fd8:	4b5b      	ldr	r3, [pc, #364]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d116      	bne.n	8005012 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe8:	e013      	b.n	8005012 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fea:	4b57      	ldr	r3, [pc, #348]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ff6:	4b54      	ldr	r3, [pc, #336]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005006:	e006      	b.n	8005016 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
      break;
 800500c:	e004      	b.n	8005018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800500e:	bf00      	nop
 8005010:	e002      	b.n	8005018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005012:	bf00      	nop
 8005014:	e000      	b.n	8005018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005016:	bf00      	nop
    }

    if(status == HAL_OK)
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10d      	bne.n	800503a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800501e:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	3b01      	subs	r3, #1
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	430b      	orrs	r3, r1
 8005034:	4944      	ldr	r1, [pc, #272]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d17d      	bne.n	800513c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005040:	4b41      	ldr	r3, [pc, #260]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a40      	ldr	r2, [pc, #256]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005046:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800504a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504c:	f7fc ff64 	bl	8001f18 <HAL_GetTick>
 8005050:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005052:	e009      	b.n	8005068 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005054:	f7fc ff60 	bl	8001f18 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d902      	bls.n	8005068 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	73fb      	strb	r3, [r7, #15]
        break;
 8005066:	e005      	b.n	8005074 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005068:	4b37      	ldr	r3, [pc, #220]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1ef      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d160      	bne.n	800513c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d111      	bne.n	80050a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005080:	4b31      	ldr	r3, [pc, #196]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6892      	ldr	r2, [r2, #8]
 8005090:	0211      	lsls	r1, r2, #8
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68d2      	ldr	r2, [r2, #12]
 8005096:	0912      	lsrs	r2, r2, #4
 8005098:	0452      	lsls	r2, r2, #17
 800509a:	430a      	orrs	r2, r1
 800509c:	492a      	ldr	r1, [pc, #168]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	610b      	str	r3, [r1, #16]
 80050a2:	e027      	b.n	80050f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d112      	bne.n	80050d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050aa:	4b27      	ldr	r3, [pc, #156]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6892      	ldr	r2, [r2, #8]
 80050ba:	0211      	lsls	r1, r2, #8
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6912      	ldr	r2, [r2, #16]
 80050c0:	0852      	lsrs	r2, r2, #1
 80050c2:	3a01      	subs	r2, #1
 80050c4:	0552      	lsls	r2, r2, #21
 80050c6:	430a      	orrs	r2, r1
 80050c8:	491f      	ldr	r1, [pc, #124]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	610b      	str	r3, [r1, #16]
 80050ce:	e011      	b.n	80050f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6892      	ldr	r2, [r2, #8]
 80050e0:	0211      	lsls	r1, r2, #8
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6952      	ldr	r2, [r2, #20]
 80050e6:	0852      	lsrs	r2, r2, #1
 80050e8:	3a01      	subs	r2, #1
 80050ea:	0652      	lsls	r2, r2, #25
 80050ec:	430a      	orrs	r2, r1
 80050ee:	4916      	ldr	r1, [pc, #88]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050f4:	4b14      	ldr	r3, [pc, #80]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fc ff0a 	bl	8001f18 <HAL_GetTick>
 8005104:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005106:	e009      	b.n	800511c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005108:	f7fc ff06 	bl	8001f18 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d902      	bls.n	800511c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	73fb      	strb	r3, [r7, #15]
          break;
 800511a:	e005      	b.n	8005128 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0ef      	beq.n	8005108 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	4904      	ldr	r1, [pc, #16]	; (8005148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005138:	4313      	orrs	r3, r2
 800513a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000

0800514c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800515a:	4b6a      	ldr	r3, [pc, #424]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d018      	beq.n	8005198 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005166:	4b67      	ldr	r3, [pc, #412]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0203 	and.w	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d10d      	bne.n	8005192 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
       ||
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800517e:	4b61      	ldr	r3, [pc, #388]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
       ||
 800518e:	429a      	cmp	r2, r3
 8005190:	d047      	beq.n	8005222 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
 8005196:	e044      	b.n	8005222 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d018      	beq.n	80051d2 <RCCEx_PLLSAI2_Config+0x86>
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d825      	bhi.n	80051f0 <RCCEx_PLLSAI2_Config+0xa4>
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d002      	beq.n	80051ae <RCCEx_PLLSAI2_Config+0x62>
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d009      	beq.n	80051c0 <RCCEx_PLLSAI2_Config+0x74>
 80051ac:	e020      	b.n	80051f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051ae:	4b55      	ldr	r3, [pc, #340]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d11d      	bne.n	80051f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051be:	e01a      	b.n	80051f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051c0:	4b50      	ldr	r3, [pc, #320]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d116      	bne.n	80051fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d0:	e013      	b.n	80051fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051d2:	4b4c      	ldr	r3, [pc, #304]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10f      	bne.n	80051fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051de:	4b49      	ldr	r3, [pc, #292]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051ee:	e006      	b.n	80051fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
      break;
 80051f4:	e004      	b.n	8005200 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051f6:	bf00      	nop
 80051f8:	e002      	b.n	8005200 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10d      	bne.n	8005222 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005206:	4b3f      	ldr	r3, [pc, #252]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6819      	ldr	r1, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	3b01      	subs	r3, #1
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	430b      	orrs	r3, r1
 800521c:	4939      	ldr	r1, [pc, #228]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800521e:	4313      	orrs	r3, r2
 8005220:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d167      	bne.n	80052f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005228:	4b36      	ldr	r3, [pc, #216]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a35      	ldr	r2, [pc, #212]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005234:	f7fc fe70 	bl	8001f18 <HAL_GetTick>
 8005238:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800523a:	e009      	b.n	8005250 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800523c:	f7fc fe6c 	bl	8001f18 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d902      	bls.n	8005250 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	73fb      	strb	r3, [r7, #15]
        break;
 800524e:	e005      	b.n	800525c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005250:	4b2c      	ldr	r3, [pc, #176]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1ef      	bne.n	800523c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d14a      	bne.n	80052f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d111      	bne.n	800528c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005268:	4b26      	ldr	r3, [pc, #152]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6892      	ldr	r2, [r2, #8]
 8005278:	0211      	lsls	r1, r2, #8
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	68d2      	ldr	r2, [r2, #12]
 800527e:	0912      	lsrs	r2, r2, #4
 8005280:	0452      	lsls	r2, r2, #17
 8005282:	430a      	orrs	r2, r1
 8005284:	491f      	ldr	r1, [pc, #124]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005286:	4313      	orrs	r3, r2
 8005288:	614b      	str	r3, [r1, #20]
 800528a:	e011      	b.n	80052b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005294:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6892      	ldr	r2, [r2, #8]
 800529c:	0211      	lsls	r1, r2, #8
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6912      	ldr	r2, [r2, #16]
 80052a2:	0852      	lsrs	r2, r2, #1
 80052a4:	3a01      	subs	r2, #1
 80052a6:	0652      	lsls	r2, r2, #25
 80052a8:	430a      	orrs	r2, r1
 80052aa:	4916      	ldr	r1, [pc, #88]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052b0:	4b14      	ldr	r3, [pc, #80]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a13      	ldr	r2, [pc, #76]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052bc:	f7fc fe2c 	bl	8001f18 <HAL_GetTick>
 80052c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052c2:	e009      	b.n	80052d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052c4:	f7fc fe28 	bl	8001f18 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d902      	bls.n	80052d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	73fb      	strb	r3, [r7, #15]
          break;
 80052d6:	e005      	b.n	80052e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0ef      	beq.n	80052c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	4904      	ldr	r1, [pc, #16]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40021000 	.word	0x40021000

08005308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e049      	b.n	80053ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fc fba6 	bl	8001a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f000 fd34 	bl	8005db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d001      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e04f      	b.n	8005470 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a23      	ldr	r2, [pc, #140]	; (800547c <HAL_TIM_Base_Start_IT+0xc4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d01d      	beq.n	800542e <HAL_TIM_Base_Start_IT+0x76>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fa:	d018      	beq.n	800542e <HAL_TIM_Base_Start_IT+0x76>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1f      	ldr	r2, [pc, #124]	; (8005480 <HAL_TIM_Base_Start_IT+0xc8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <HAL_TIM_Base_Start_IT+0x76>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1e      	ldr	r2, [pc, #120]	; (8005484 <HAL_TIM_Base_Start_IT+0xcc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00e      	beq.n	800542e <HAL_TIM_Base_Start_IT+0x76>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <HAL_TIM_Base_Start_IT+0xd0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d009      	beq.n	800542e <HAL_TIM_Base_Start_IT+0x76>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1b      	ldr	r2, [pc, #108]	; (800548c <HAL_TIM_Base_Start_IT+0xd4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d004      	beq.n	800542e <HAL_TIM_Base_Start_IT+0x76>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a19      	ldr	r2, [pc, #100]	; (8005490 <HAL_TIM_Base_Start_IT+0xd8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d115      	bne.n	800545a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	4b17      	ldr	r3, [pc, #92]	; (8005494 <HAL_TIM_Base_Start_IT+0xdc>)
 8005436:	4013      	ands	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b06      	cmp	r3, #6
 800543e:	d015      	beq.n	800546c <HAL_TIM_Base_Start_IT+0xb4>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005446:	d011      	beq.n	800546c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005458:	e008      	b.n	800546c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e000      	b.n	800546e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40014000 	.word	0x40014000
 8005494:	00010007 	.word	0x00010007

08005498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e049      	b.n	800553e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f841 	bl	8005546 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f000 fc6c 	bl	8005db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d109      	bne.n	8005580 <HAL_TIM_PWM_Start+0x24>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	bf14      	ite	ne
 8005578:	2301      	movne	r3, #1
 800557a:	2300      	moveq	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	e03c      	b.n	80055fa <HAL_TIM_PWM_Start+0x9e>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b04      	cmp	r3, #4
 8005584:	d109      	bne.n	800559a <HAL_TIM_PWM_Start+0x3e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b01      	cmp	r3, #1
 8005590:	bf14      	ite	ne
 8005592:	2301      	movne	r3, #1
 8005594:	2300      	moveq	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	e02f      	b.n	80055fa <HAL_TIM_PWM_Start+0x9e>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d109      	bne.n	80055b4 <HAL_TIM_PWM_Start+0x58>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e022      	b.n	80055fa <HAL_TIM_PWM_Start+0x9e>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d109      	bne.n	80055ce <HAL_TIM_PWM_Start+0x72>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e015      	b.n	80055fa <HAL_TIM_PWM_Start+0x9e>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d109      	bne.n	80055e8 <HAL_TIM_PWM_Start+0x8c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	e008      	b.n	80055fa <HAL_TIM_PWM_Start+0x9e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e09c      	b.n	800573c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_Start+0xb6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005610:	e023      	b.n	800565a <HAL_TIM_PWM_Start+0xfe>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b04      	cmp	r3, #4
 8005616:	d104      	bne.n	8005622 <HAL_TIM_PWM_Start+0xc6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005620:	e01b      	b.n	800565a <HAL_TIM_PWM_Start+0xfe>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d104      	bne.n	8005632 <HAL_TIM_PWM_Start+0xd6>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005630:	e013      	b.n	800565a <HAL_TIM_PWM_Start+0xfe>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b0c      	cmp	r3, #12
 8005636:	d104      	bne.n	8005642 <HAL_TIM_PWM_Start+0xe6>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005640:	e00b      	b.n	800565a <HAL_TIM_PWM_Start+0xfe>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b10      	cmp	r3, #16
 8005646:	d104      	bne.n	8005652 <HAL_TIM_PWM_Start+0xf6>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005650:	e003      	b.n	800565a <HAL_TIM_PWM_Start+0xfe>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2201      	movs	r2, #1
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 ffb0 	bl	80065c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a35      	ldr	r2, [pc, #212]	; (8005744 <HAL_TIM_PWM_Start+0x1e8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <HAL_TIM_PWM_Start+0x13e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a34      	ldr	r2, [pc, #208]	; (8005748 <HAL_TIM_PWM_Start+0x1ec>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00e      	beq.n	800569a <HAL_TIM_PWM_Start+0x13e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a32      	ldr	r2, [pc, #200]	; (800574c <HAL_TIM_PWM_Start+0x1f0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_TIM_PWM_Start+0x13e>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a31      	ldr	r2, [pc, #196]	; (8005750 <HAL_TIM_PWM_Start+0x1f4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_TIM_PWM_Start+0x13e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2f      	ldr	r2, [pc, #188]	; (8005754 <HAL_TIM_PWM_Start+0x1f8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d101      	bne.n	800569e <HAL_TIM_PWM_Start+0x142>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <HAL_TIM_PWM_Start+0x144>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a22      	ldr	r2, [pc, #136]	; (8005744 <HAL_TIM_PWM_Start+0x1e8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01d      	beq.n	80056fa <HAL_TIM_PWM_Start+0x19e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d018      	beq.n	80056fa <HAL_TIM_PWM_Start+0x19e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a22      	ldr	r2, [pc, #136]	; (8005758 <HAL_TIM_PWM_Start+0x1fc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d013      	beq.n	80056fa <HAL_TIM_PWM_Start+0x19e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a21      	ldr	r2, [pc, #132]	; (800575c <HAL_TIM_PWM_Start+0x200>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00e      	beq.n	80056fa <HAL_TIM_PWM_Start+0x19e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1f      	ldr	r2, [pc, #124]	; (8005760 <HAL_TIM_PWM_Start+0x204>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_TIM_PWM_Start+0x19e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a17      	ldr	r2, [pc, #92]	; (8005748 <HAL_TIM_PWM_Start+0x1ec>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_TIM_PWM_Start+0x19e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a15      	ldr	r2, [pc, #84]	; (800574c <HAL_TIM_PWM_Start+0x1f0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d115      	bne.n	8005726 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	4b18      	ldr	r3, [pc, #96]	; (8005764 <HAL_TIM_PWM_Start+0x208>)
 8005702:	4013      	ands	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b06      	cmp	r3, #6
 800570a:	d015      	beq.n	8005738 <HAL_TIM_PWM_Start+0x1dc>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005712:	d011      	beq.n	8005738 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005724:	e008      	b.n	8005738 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	e000      	b.n	800573a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005738:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40013400 	.word	0x40013400
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800
 8005760:	40000c00 	.word	0x40000c00
 8005764:	00010007 	.word	0x00010007

08005768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b02      	cmp	r3, #2
 800577c:	d122      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d11b      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0202 	mvn.w	r2, #2
 8005794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fae3 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fad5 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fae6 	bl	8005d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d122      	bne.n	8005818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d11b      	bne.n	8005818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0204 	mvn.w	r2, #4
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fab9 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 faab 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fabc 	bl	8005d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b08      	cmp	r3, #8
 8005824:	d122      	bne.n	800586c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b08      	cmp	r3, #8
 8005832:	d11b      	bne.n	800586c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0208 	mvn.w	r2, #8
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2204      	movs	r2, #4
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fa8f 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa81 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fa92 	bl	8005d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b10      	cmp	r3, #16
 8005878:	d122      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b10      	cmp	r3, #16
 8005886:	d11b      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0210 	mvn.w	r2, #16
 8005890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2208      	movs	r2, #8
 8005896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fa65 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa57 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fa68 	bl	8005d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d10e      	bne.n	80058ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d107      	bne.n	80058ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0201 	mvn.w	r2, #1
 80058e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc f81c 	bl	8001924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	2b80      	cmp	r3, #128	; 0x80
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005904:	2b80      	cmp	r3, #128	; 0x80
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 ff8e 	bl	8006834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005926:	d10e      	bne.n	8005946 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d107      	bne.n	8005946 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800593e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 ff81 	bl	8006848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d10e      	bne.n	8005972 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d107      	bne.n	8005972 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fa16 	bl	8005d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b20      	cmp	r3, #32
 800597e:	d10e      	bne.n	800599e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b20      	cmp	r3, #32
 800598c:	d107      	bne.n	800599e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0220 	mvn.w	r2, #32
 8005996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 ff41 	bl	8006820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0ff      	b.n	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b14      	cmp	r3, #20
 80059d2:	f200 80f0 	bhi.w	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	08005bb7 	.word	0x08005bb7
 80059e4:	08005bb7 	.word	0x08005bb7
 80059e8:	08005bb7 	.word	0x08005bb7
 80059ec:	08005a71 	.word	0x08005a71
 80059f0:	08005bb7 	.word	0x08005bb7
 80059f4:	08005bb7 	.word	0x08005bb7
 80059f8:	08005bb7 	.word	0x08005bb7
 80059fc:	08005ab3 	.word	0x08005ab3
 8005a00:	08005bb7 	.word	0x08005bb7
 8005a04:	08005bb7 	.word	0x08005bb7
 8005a08:	08005bb7 	.word	0x08005bb7
 8005a0c:	08005af3 	.word	0x08005af3
 8005a10:	08005bb7 	.word	0x08005bb7
 8005a14:	08005bb7 	.word	0x08005bb7
 8005a18:	08005bb7 	.word	0x08005bb7
 8005a1c:	08005b35 	.word	0x08005b35
 8005a20:	08005bb7 	.word	0x08005bb7
 8005a24:	08005bb7 	.word	0x08005bb7
 8005a28:	08005bb7 	.word	0x08005bb7
 8005a2c:	08005b75 	.word	0x08005b75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fa56 	bl	8005ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0208 	orr.w	r2, r2, #8
 8005a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0204 	bic.w	r2, r2, #4
 8005a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6999      	ldr	r1, [r3, #24]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	619a      	str	r2, [r3, #24]
      break;
 8005a6e:	e0a5      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fac6 	bl	8006008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6999      	ldr	r1, [r3, #24]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	021a      	lsls	r2, r3, #8
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	619a      	str	r2, [r3, #24]
      break;
 8005ab0:	e084      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fb2f 	bl	800611c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0208 	orr.w	r2, r2, #8
 8005acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0204 	bic.w	r2, r2, #4
 8005adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69d9      	ldr	r1, [r3, #28]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	61da      	str	r2, [r3, #28]
      break;
 8005af0:	e064      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fb97 	bl	800622c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69d9      	ldr	r1, [r3, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	021a      	lsls	r2, r3, #8
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	61da      	str	r2, [r3, #28]
      break;
 8005b32:	e043      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fbe0 	bl	8006300 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0208 	orr.w	r2, r2, #8
 8005b4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0204 	bic.w	r2, r2, #4
 8005b5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b72:	e023      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fc24 	bl	80063c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bb4:	e002      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop

08005bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_TIM_ConfigClockSource+0x1c>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e0b6      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x18a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c28:	d03e      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0xd8>
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2e:	f200 8087 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x170>
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	f000 8086 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x176>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d87f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x170>
 8005c40:	2b70      	cmp	r3, #112	; 0x70
 8005c42:	d01a      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0xaa>
 8005c44:	2b70      	cmp	r3, #112	; 0x70
 8005c46:	d87b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x170>
 8005c48:	2b60      	cmp	r3, #96	; 0x60
 8005c4a:	d050      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x11e>
 8005c4c:	2b60      	cmp	r3, #96	; 0x60
 8005c4e:	d877      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x170>
 8005c50:	2b50      	cmp	r3, #80	; 0x50
 8005c52:	d03c      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0xfe>
 8005c54:	2b50      	cmp	r3, #80	; 0x50
 8005c56:	d873      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x170>
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d058      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x13e>
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d86f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x170>
 8005c60:	2b30      	cmp	r3, #48	; 0x30
 8005c62:	d064      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15e>
 8005c64:	2b30      	cmp	r3, #48	; 0x30
 8005c66:	d86b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x170>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d060      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15e>
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d867      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x170>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05c      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15e>
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d05a      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15e>
 8005c78:	e062      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6899      	ldr	r1, [r3, #8]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f000 fc7d 	bl	8006588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	609a      	str	r2, [r3, #8]
      break;
 8005ca6:	e04f      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6899      	ldr	r1, [r3, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f000 fc66 	bl	8006588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cca:	609a      	str	r2, [r3, #8]
      break;
 8005ccc:	e03c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 fbda 	bl	8006494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2150      	movs	r1, #80	; 0x50
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fc33 	bl	8006552 <TIM_ITRx_SetConfig>
      break;
 8005cec:	e02c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6859      	ldr	r1, [r3, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f000 fbf9 	bl	80064f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2160      	movs	r1, #96	; 0x60
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fc23 	bl	8006552 <TIM_ITRx_SetConfig>
      break;
 8005d0c:	e01c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6859      	ldr	r1, [r3, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 fbba 	bl	8006494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2140      	movs	r1, #64	; 0x40
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fc13 	bl	8006552 <TIM_ITRx_SetConfig>
      break;
 8005d2c:	e00c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f000 fc0a 	bl	8006552 <TIM_ITRx_SetConfig>
      break;
 8005d3e:	e003      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
      break;
 8005d44:	e000      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a40      	ldr	r2, [pc, #256]	; (8005ec8 <TIM_Base_SetConfig+0x114>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d00f      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a3d      	ldr	r2, [pc, #244]	; (8005ecc <TIM_Base_SetConfig+0x118>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00b      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a3c      	ldr	r2, [pc, #240]	; (8005ed0 <TIM_Base_SetConfig+0x11c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d007      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a3b      	ldr	r2, [pc, #236]	; (8005ed4 <TIM_Base_SetConfig+0x120>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3a      	ldr	r2, [pc, #232]	; (8005ed8 <TIM_Base_SetConfig+0x124>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d108      	bne.n	8005e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2f      	ldr	r2, [pc, #188]	; (8005ec8 <TIM_Base_SetConfig+0x114>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d01f      	beq.n	8005e4e <TIM_Base_SetConfig+0x9a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e14:	d01b      	beq.n	8005e4e <TIM_Base_SetConfig+0x9a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2c      	ldr	r2, [pc, #176]	; (8005ecc <TIM_Base_SetConfig+0x118>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d017      	beq.n	8005e4e <TIM_Base_SetConfig+0x9a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a2b      	ldr	r2, [pc, #172]	; (8005ed0 <TIM_Base_SetConfig+0x11c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <TIM_Base_SetConfig+0x9a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2a      	ldr	r2, [pc, #168]	; (8005ed4 <TIM_Base_SetConfig+0x120>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00f      	beq.n	8005e4e <TIM_Base_SetConfig+0x9a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a29      	ldr	r2, [pc, #164]	; (8005ed8 <TIM_Base_SetConfig+0x124>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00b      	beq.n	8005e4e <TIM_Base_SetConfig+0x9a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a28      	ldr	r2, [pc, #160]	; (8005edc <TIM_Base_SetConfig+0x128>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d007      	beq.n	8005e4e <TIM_Base_SetConfig+0x9a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a27      	ldr	r2, [pc, #156]	; (8005ee0 <TIM_Base_SetConfig+0x12c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_Base_SetConfig+0x9a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <TIM_Base_SetConfig+0x130>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d108      	bne.n	8005e60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a10      	ldr	r2, [pc, #64]	; (8005ec8 <TIM_Base_SetConfig+0x114>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00f      	beq.n	8005eac <TIM_Base_SetConfig+0xf8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <TIM_Base_SetConfig+0x124>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00b      	beq.n	8005eac <TIM_Base_SetConfig+0xf8>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a11      	ldr	r2, [pc, #68]	; (8005edc <TIM_Base_SetConfig+0x128>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d007      	beq.n	8005eac <TIM_Base_SetConfig+0xf8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a10      	ldr	r2, [pc, #64]	; (8005ee0 <TIM_Base_SetConfig+0x12c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_Base_SetConfig+0xf8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a0f      	ldr	r2, [pc, #60]	; (8005ee4 <TIM_Base_SetConfig+0x130>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d103      	bne.n	8005eb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	615a      	str	r2, [r3, #20]
}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40012c00 	.word	0x40012c00
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40013400 	.word	0x40013400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40014400 	.word	0x40014400
 8005ee4:	40014800 	.word	0x40014800

08005ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f023 0201 	bic.w	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 0302 	bic.w	r3, r3, #2
 8005f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a2c      	ldr	r2, [pc, #176]	; (8005ff4 <TIM_OC1_SetConfig+0x10c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00f      	beq.n	8005f68 <TIM_OC1_SetConfig+0x80>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a2b      	ldr	r2, [pc, #172]	; (8005ff8 <TIM_OC1_SetConfig+0x110>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00b      	beq.n	8005f68 <TIM_OC1_SetConfig+0x80>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <TIM_OC1_SetConfig+0x114>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d007      	beq.n	8005f68 <TIM_OC1_SetConfig+0x80>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a29      	ldr	r2, [pc, #164]	; (8006000 <TIM_OC1_SetConfig+0x118>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d003      	beq.n	8005f68 <TIM_OC1_SetConfig+0x80>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a28      	ldr	r2, [pc, #160]	; (8006004 <TIM_OC1_SetConfig+0x11c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d10c      	bne.n	8005f82 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f023 0308 	bic.w	r3, r3, #8
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f023 0304 	bic.w	r3, r3, #4
 8005f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1b      	ldr	r2, [pc, #108]	; (8005ff4 <TIM_OC1_SetConfig+0x10c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00f      	beq.n	8005faa <TIM_OC1_SetConfig+0xc2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <TIM_OC1_SetConfig+0x110>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_OC1_SetConfig+0xc2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <TIM_OC1_SetConfig+0x114>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_OC1_SetConfig+0xc2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a18      	ldr	r2, [pc, #96]	; (8006000 <TIM_OC1_SetConfig+0x118>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_OC1_SetConfig+0xc2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a17      	ldr	r2, [pc, #92]	; (8006004 <TIM_OC1_SetConfig+0x11c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d111      	bne.n	8005fce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	621a      	str	r2, [r3, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40013400 	.word	0x40013400
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800

08006008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f023 0210 	bic.w	r2, r3, #16
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f023 0320 	bic.w	r3, r3, #32
 8006056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4313      	orrs	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a28      	ldr	r2, [pc, #160]	; (8006108 <TIM_OC2_SetConfig+0x100>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_OC2_SetConfig+0x6c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a27      	ldr	r2, [pc, #156]	; (800610c <TIM_OC2_SetConfig+0x104>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d10d      	bne.n	8006090 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800607a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800608e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <TIM_OC2_SetConfig+0x100>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00f      	beq.n	80060b8 <TIM_OC2_SetConfig+0xb0>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a1c      	ldr	r2, [pc, #112]	; (800610c <TIM_OC2_SetConfig+0x104>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00b      	beq.n	80060b8 <TIM_OC2_SetConfig+0xb0>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <TIM_OC2_SetConfig+0x108>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d007      	beq.n	80060b8 <TIM_OC2_SetConfig+0xb0>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <TIM_OC2_SetConfig+0x10c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_OC2_SetConfig+0xb0>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a19      	ldr	r2, [pc, #100]	; (8006118 <TIM_OC2_SetConfig+0x110>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d113      	bne.n	80060e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40013400 	.word	0x40013400
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400
 8006118:	40014800 	.word	0x40014800

0800611c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800614a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0303 	bic.w	r3, r3, #3
 8006156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a27      	ldr	r2, [pc, #156]	; (8006218 <TIM_OC3_SetConfig+0xfc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_OC3_SetConfig+0x6a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a26      	ldr	r2, [pc, #152]	; (800621c <TIM_OC3_SetConfig+0x100>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d10d      	bne.n	80061a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800618c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1c      	ldr	r2, [pc, #112]	; (8006218 <TIM_OC3_SetConfig+0xfc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00f      	beq.n	80061ca <TIM_OC3_SetConfig+0xae>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1b      	ldr	r2, [pc, #108]	; (800621c <TIM_OC3_SetConfig+0x100>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00b      	beq.n	80061ca <TIM_OC3_SetConfig+0xae>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1a      	ldr	r2, [pc, #104]	; (8006220 <TIM_OC3_SetConfig+0x104>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d007      	beq.n	80061ca <TIM_OC3_SetConfig+0xae>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a19      	ldr	r2, [pc, #100]	; (8006224 <TIM_OC3_SetConfig+0x108>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_OC3_SetConfig+0xae>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a18      	ldr	r2, [pc, #96]	; (8006228 <TIM_OC3_SetConfig+0x10c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d113      	bne.n	80061f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	621a      	str	r2, [r3, #32]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40013400 	.word	0x40013400
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800

0800622c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800625a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	021b      	lsls	r3, r3, #8
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800627a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	031b      	lsls	r3, r3, #12
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a18      	ldr	r2, [pc, #96]	; (80062ec <TIM_OC4_SetConfig+0xc0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00f      	beq.n	80062b0 <TIM_OC4_SetConfig+0x84>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <TIM_OC4_SetConfig+0xc4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00b      	beq.n	80062b0 <TIM_OC4_SetConfig+0x84>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <TIM_OC4_SetConfig+0xc8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d007      	beq.n	80062b0 <TIM_OC4_SetConfig+0x84>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <TIM_OC4_SetConfig+0xcc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_OC4_SetConfig+0x84>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a14      	ldr	r2, [pc, #80]	; (80062fc <TIM_OC4_SetConfig+0xd0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d109      	bne.n	80062c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	019b      	lsls	r3, r3, #6
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	621a      	str	r2, [r3, #32]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40013400 	.word	0x40013400
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400
 80062fc:	40014800 	.word	0x40014800

08006300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006344:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	041b      	lsls	r3, r3, #16
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a17      	ldr	r2, [pc, #92]	; (80063b4 <TIM_OC5_SetConfig+0xb4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00f      	beq.n	800637a <TIM_OC5_SetConfig+0x7a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <TIM_OC5_SetConfig+0xb8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00b      	beq.n	800637a <TIM_OC5_SetConfig+0x7a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a15      	ldr	r2, [pc, #84]	; (80063bc <TIM_OC5_SetConfig+0xbc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d007      	beq.n	800637a <TIM_OC5_SetConfig+0x7a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a14      	ldr	r2, [pc, #80]	; (80063c0 <TIM_OC5_SetConfig+0xc0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d003      	beq.n	800637a <TIM_OC5_SetConfig+0x7a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a13      	ldr	r2, [pc, #76]	; (80063c4 <TIM_OC5_SetConfig+0xc4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d109      	bne.n	800638e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006380:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	021b      	lsls	r3, r3, #8
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	621a      	str	r2, [r3, #32]
}
 80063a8:	bf00      	nop
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40013400 	.word	0x40013400
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40014400 	.word	0x40014400
 80063c4:	40014800 	.word	0x40014800

080063c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	051b      	lsls	r3, r3, #20
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a18      	ldr	r2, [pc, #96]	; (8006480 <TIM_OC6_SetConfig+0xb8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00f      	beq.n	8006444 <TIM_OC6_SetConfig+0x7c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a17      	ldr	r2, [pc, #92]	; (8006484 <TIM_OC6_SetConfig+0xbc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00b      	beq.n	8006444 <TIM_OC6_SetConfig+0x7c>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a16      	ldr	r2, [pc, #88]	; (8006488 <TIM_OC6_SetConfig+0xc0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d007      	beq.n	8006444 <TIM_OC6_SetConfig+0x7c>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a15      	ldr	r2, [pc, #84]	; (800648c <TIM_OC6_SetConfig+0xc4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC6_SetConfig+0x7c>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a14      	ldr	r2, [pc, #80]	; (8006490 <TIM_OC6_SetConfig+0xc8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d109      	bne.n	8006458 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 030a 	bic.w	r3, r3, #10
 80064d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b087      	sub	sp, #28
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0210 	bic.w	r2, r3, #16
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800651c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	031b      	lsls	r3, r3, #12
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800652e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	f043 0307 	orr.w	r3, r3, #7
 8006574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	609a      	str	r2, [r3, #8]
}
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	021a      	lsls	r2, r3, #8
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	609a      	str	r2, [r3, #8]
}
 80065bc:	bf00      	nop
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2201      	movs	r2, #1
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a1a      	ldr	r2, [r3, #32]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	401a      	ands	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1a      	ldr	r2, [r3, #32]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	431a      	orrs	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006628:	2302      	movs	r3, #2
 800662a:	e068      	b.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a2e      	ldr	r2, [pc, #184]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2d      	ldr	r2, [pc, #180]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d108      	bne.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006666:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006678:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1e      	ldr	r2, [pc, #120]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d01d      	beq.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669e:	d018      	beq.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1b      	ldr	r2, [pc, #108]	; (8006714 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d013      	beq.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1a      	ldr	r2, [pc, #104]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00e      	beq.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a18      	ldr	r2, [pc, #96]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d009      	beq.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a13      	ldr	r2, [pc, #76]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d004      	beq.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a14      	ldr	r2, [pc, #80]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d10c      	bne.n	80066ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40014000 	.word	0x40014000

08006724 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800673c:	2302      	movs	r3, #2
 800673e:	e065      	b.n	800680c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	041b      	lsls	r3, r3, #16
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a16      	ldr	r2, [pc, #88]	; (8006818 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a14      	ldr	r2, [pc, #80]	; (800681c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d115      	bne.n	80067fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	051b      	lsls	r3, r3, #20
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40012c00 	.word	0x40012c00
 800681c:	40013400 	.word	0x40013400

08006820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e040      	b.n	80068f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fb f9ca 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2224      	movs	r2, #36	; 0x24
 8006888:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0201 	bic.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f8c0 	bl	8006a20 <UART_SetConfig>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e022      	b.n	80068f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fb6c 	bl	8006f90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fbf3 	bl	80070d4 <UART_CheckIdleState>
 80068ee:	4603      	mov	r3, r0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	4613      	mov	r3, r2
 8006906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690c:	2b20      	cmp	r3, #32
 800690e:	f040 8082 	bne.w	8006a16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_UART_Transmit+0x26>
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e07a      	b.n	8006a18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_UART_Transmit+0x38>
 800692c:	2302      	movs	r3, #2
 800692e:	e073      	b.n	8006a18 <HAL_UART_Transmit+0x120>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2221      	movs	r2, #33	; 0x21
 8006944:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006946:	f7fb fae7 	bl	8001f18 <HAL_GetTick>
 800694a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	88fa      	ldrh	r2, [r7, #6]
 8006950:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006964:	d108      	bne.n	8006978 <HAL_UART_Transmit+0x80>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d104      	bne.n	8006978 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	e003      	b.n	8006980 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800697c:	2300      	movs	r3, #0
 800697e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006988:	e02d      	b.n	80069e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2200      	movs	r2, #0
 8006992:	2180      	movs	r1, #128	; 0x80
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 fbe6 	bl	8007166 <UART_WaitOnFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e039      	b.n	8006a18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	881a      	ldrh	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b6:	b292      	uxth	r2, r2
 80069b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	3302      	adds	r3, #2
 80069be:	61bb      	str	r3, [r7, #24]
 80069c0:	e008      	b.n	80069d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	781a      	ldrb	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	b292      	uxth	r2, r2
 80069cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	3301      	adds	r3, #1
 80069d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1cb      	bne.n	800698a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2200      	movs	r2, #0
 80069fa:	2140      	movs	r1, #64	; 0x40
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fbb2 	bl	8007166 <UART_WaitOnFlagUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e005      	b.n	8006a18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e000      	b.n	8006a18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a16:	2302      	movs	r3, #2
  }
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3720      	adds	r7, #32
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a24:	b08a      	sub	sp, #40	; 0x28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4ba4      	ldr	r3, [pc, #656]	; (8006ce0 <UART_SetConfig+0x2c0>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	6812      	ldr	r2, [r2, #0]
 8006a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a99      	ldr	r2, [pc, #612]	; (8006ce4 <UART_SetConfig+0x2c4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d004      	beq.n	8006a8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a90      	ldr	r2, [pc, #576]	; (8006ce8 <UART_SetConfig+0x2c8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d126      	bne.n	8006af8 <UART_SetConfig+0xd8>
 8006aaa:	4b90      	ldr	r3, [pc, #576]	; (8006cec <UART_SetConfig+0x2cc>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d81b      	bhi.n	8006af0 <UART_SetConfig+0xd0>
 8006ab8:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <UART_SetConfig+0xa0>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006ad1 	.word	0x08006ad1
 8006ac4:	08006ae1 	.word	0x08006ae1
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad6:	e116      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ade:	e112      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae6:	e10e      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006ae8:	2308      	movs	r3, #8
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aee:	e10a      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006af0:	2310      	movs	r3, #16
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af6:	e106      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a7c      	ldr	r2, [pc, #496]	; (8006cf0 <UART_SetConfig+0x2d0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d138      	bne.n	8006b74 <UART_SetConfig+0x154>
 8006b02:	4b7a      	ldr	r3, [pc, #488]	; (8006cec <UART_SetConfig+0x2cc>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b08:	f003 030c 	and.w	r3, r3, #12
 8006b0c:	2b0c      	cmp	r3, #12
 8006b0e:	d82d      	bhi.n	8006b6c <UART_SetConfig+0x14c>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <UART_SetConfig+0xf8>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b4d 	.word	0x08006b4d
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006b6d 	.word	0x08006b6d
 8006b24:	08006b6d 	.word	0x08006b6d
 8006b28:	08006b5d 	.word	0x08006b5d
 8006b2c:	08006b6d 	.word	0x08006b6d
 8006b30:	08006b6d 	.word	0x08006b6d
 8006b34:	08006b6d 	.word	0x08006b6d
 8006b38:	08006b55 	.word	0x08006b55
 8006b3c:	08006b6d 	.word	0x08006b6d
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	08006b6d 	.word	0x08006b6d
 8006b48:	08006b65 	.word	0x08006b65
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b52:	e0d8      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006b54:	2302      	movs	r3, #2
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5a:	e0d4      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b62:	e0d0      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006b64:	2308      	movs	r3, #8
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e0cc      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b72:	e0c8      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a5e      	ldr	r2, [pc, #376]	; (8006cf4 <UART_SetConfig+0x2d4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d125      	bne.n	8006bca <UART_SetConfig+0x1aa>
 8006b7e:	4b5b      	ldr	r3, [pc, #364]	; (8006cec <UART_SetConfig+0x2cc>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b88:	2b30      	cmp	r3, #48	; 0x30
 8006b8a:	d016      	beq.n	8006bba <UART_SetConfig+0x19a>
 8006b8c:	2b30      	cmp	r3, #48	; 0x30
 8006b8e:	d818      	bhi.n	8006bc2 <UART_SetConfig+0x1a2>
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d00a      	beq.n	8006baa <UART_SetConfig+0x18a>
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d814      	bhi.n	8006bc2 <UART_SetConfig+0x1a2>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <UART_SetConfig+0x182>
 8006b9c:	2b10      	cmp	r3, #16
 8006b9e:	d008      	beq.n	8006bb2 <UART_SetConfig+0x192>
 8006ba0:	e00f      	b.n	8006bc2 <UART_SetConfig+0x1a2>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba8:	e0ad      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006baa:	2302      	movs	r3, #2
 8006bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb0:	e0a9      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb8:	e0a5      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006bba:	2308      	movs	r3, #8
 8006bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc0:	e0a1      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006bc2:	2310      	movs	r3, #16
 8006bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc8:	e09d      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a4a      	ldr	r2, [pc, #296]	; (8006cf8 <UART_SetConfig+0x2d8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d125      	bne.n	8006c20 <UART_SetConfig+0x200>
 8006bd4:	4b45      	ldr	r3, [pc, #276]	; (8006cec <UART_SetConfig+0x2cc>)
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bde:	2bc0      	cmp	r3, #192	; 0xc0
 8006be0:	d016      	beq.n	8006c10 <UART_SetConfig+0x1f0>
 8006be2:	2bc0      	cmp	r3, #192	; 0xc0
 8006be4:	d818      	bhi.n	8006c18 <UART_SetConfig+0x1f8>
 8006be6:	2b80      	cmp	r3, #128	; 0x80
 8006be8:	d00a      	beq.n	8006c00 <UART_SetConfig+0x1e0>
 8006bea:	2b80      	cmp	r3, #128	; 0x80
 8006bec:	d814      	bhi.n	8006c18 <UART_SetConfig+0x1f8>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <UART_SetConfig+0x1d8>
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	d008      	beq.n	8006c08 <UART_SetConfig+0x1e8>
 8006bf6:	e00f      	b.n	8006c18 <UART_SetConfig+0x1f8>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfe:	e082      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006c00:	2302      	movs	r3, #2
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c06:	e07e      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006c08:	2304      	movs	r3, #4
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0e:	e07a      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006c10:	2308      	movs	r3, #8
 8006c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c16:	e076      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1e:	e072      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a35      	ldr	r2, [pc, #212]	; (8006cfc <UART_SetConfig+0x2dc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d12a      	bne.n	8006c80 <UART_SetConfig+0x260>
 8006c2a:	4b30      	ldr	r3, [pc, #192]	; (8006cec <UART_SetConfig+0x2cc>)
 8006c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c38:	d01a      	beq.n	8006c70 <UART_SetConfig+0x250>
 8006c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c3e:	d81b      	bhi.n	8006c78 <UART_SetConfig+0x258>
 8006c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c44:	d00c      	beq.n	8006c60 <UART_SetConfig+0x240>
 8006c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4a:	d815      	bhi.n	8006c78 <UART_SetConfig+0x258>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <UART_SetConfig+0x238>
 8006c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c54:	d008      	beq.n	8006c68 <UART_SetConfig+0x248>
 8006c56:	e00f      	b.n	8006c78 <UART_SetConfig+0x258>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5e:	e052      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c66:	e04e      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6e:	e04a      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c76:	e046      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7e:	e042      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a17      	ldr	r2, [pc, #92]	; (8006ce4 <UART_SetConfig+0x2c4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d13a      	bne.n	8006d00 <UART_SetConfig+0x2e0>
 8006c8a:	4b18      	ldr	r3, [pc, #96]	; (8006cec <UART_SetConfig+0x2cc>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c98:	d01a      	beq.n	8006cd0 <UART_SetConfig+0x2b0>
 8006c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c9e:	d81b      	bhi.n	8006cd8 <UART_SetConfig+0x2b8>
 8006ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca4:	d00c      	beq.n	8006cc0 <UART_SetConfig+0x2a0>
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006caa:	d815      	bhi.n	8006cd8 <UART_SetConfig+0x2b8>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <UART_SetConfig+0x298>
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	d008      	beq.n	8006cc8 <UART_SetConfig+0x2a8>
 8006cb6:	e00f      	b.n	8006cd8 <UART_SetConfig+0x2b8>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cbe:	e022      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc6:	e01e      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cce:	e01a      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd6:	e016      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cde:	e012      	b.n	8006d06 <UART_SetConfig+0x2e6>
 8006ce0:	efff69f3 	.word	0xefff69f3
 8006ce4:	40008000 	.word	0x40008000
 8006ce8:	40013800 	.word	0x40013800
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	40004400 	.word	0x40004400
 8006cf4:	40004800 	.word	0x40004800
 8006cf8:	40004c00 	.word	0x40004c00
 8006cfc:	40005000 	.word	0x40005000
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a9f      	ldr	r2, [pc, #636]	; (8006f88 <UART_SetConfig+0x568>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d17a      	bne.n	8006e06 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d824      	bhi.n	8006d62 <UART_SetConfig+0x342>
 8006d18:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <UART_SetConfig+0x300>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006d45 	.word	0x08006d45
 8006d24:	08006d63 	.word	0x08006d63
 8006d28:	08006d4d 	.word	0x08006d4d
 8006d2c:	08006d63 	.word	0x08006d63
 8006d30:	08006d53 	.word	0x08006d53
 8006d34:	08006d63 	.word	0x08006d63
 8006d38:	08006d63 	.word	0x08006d63
 8006d3c:	08006d63 	.word	0x08006d63
 8006d40:	08006d5b 	.word	0x08006d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d44:	f7fd fd66 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8006d48:	61f8      	str	r0, [r7, #28]
        break;
 8006d4a:	e010      	b.n	8006d6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d4c:	4b8f      	ldr	r3, [pc, #572]	; (8006f8c <UART_SetConfig+0x56c>)
 8006d4e:	61fb      	str	r3, [r7, #28]
        break;
 8006d50:	e00d      	b.n	8006d6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d52:	f7fd fcc7 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006d56:	61f8      	str	r0, [r7, #28]
        break;
 8006d58:	e009      	b.n	8006d6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d5e:	61fb      	str	r3, [r7, #28]
        break;
 8006d60:	e005      	b.n	8006d6e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80fb 	beq.w	8006f6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d305      	bcc.n	8006d92 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d903      	bls.n	8006d9a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d98:	e0e8      	b.n	8006f6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	461c      	mov	r4, r3
 8006da0:	4615      	mov	r5, r2
 8006da2:	f04f 0200 	mov.w	r2, #0
 8006da6:	f04f 0300 	mov.w	r3, #0
 8006daa:	022b      	lsls	r3, r5, #8
 8006dac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006db0:	0222      	lsls	r2, r4, #8
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	6849      	ldr	r1, [r1, #4]
 8006db6:	0849      	lsrs	r1, r1, #1
 8006db8:	2000      	movs	r0, #0
 8006dba:	4688      	mov	r8, r1
 8006dbc:	4681      	mov	r9, r0
 8006dbe:	eb12 0a08 	adds.w	sl, r2, r8
 8006dc2:	eb43 0b09 	adc.w	fp, r3, r9
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd4:	4650      	mov	r0, sl
 8006dd6:	4659      	mov	r1, fp
 8006dd8:	f7f9 fbde 	bl	8000598 <__aeabi_uldivmod>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4613      	mov	r3, r2
 8006de2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dea:	d308      	bcc.n	8006dfe <UART_SetConfig+0x3de>
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006df2:	d204      	bcs.n	8006dfe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	60da      	str	r2, [r3, #12]
 8006dfc:	e0b6      	b.n	8006f6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e04:	e0b2      	b.n	8006f6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e0e:	d15e      	bne.n	8006ece <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d828      	bhi.n	8006e6a <UART_SetConfig+0x44a>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0x400>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e45 	.word	0x08006e45
 8006e24:	08006e4d 	.word	0x08006e4d
 8006e28:	08006e55 	.word	0x08006e55
 8006e2c:	08006e6b 	.word	0x08006e6b
 8006e30:	08006e5b 	.word	0x08006e5b
 8006e34:	08006e6b 	.word	0x08006e6b
 8006e38:	08006e6b 	.word	0x08006e6b
 8006e3c:	08006e6b 	.word	0x08006e6b
 8006e40:	08006e63 	.word	0x08006e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e44:	f7fd fce6 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8006e48:	61f8      	str	r0, [r7, #28]
        break;
 8006e4a:	e014      	b.n	8006e76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e4c:	f7fd fcf8 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 8006e50:	61f8      	str	r0, [r7, #28]
        break;
 8006e52:	e010      	b.n	8006e76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e54:	4b4d      	ldr	r3, [pc, #308]	; (8006f8c <UART_SetConfig+0x56c>)
 8006e56:	61fb      	str	r3, [r7, #28]
        break;
 8006e58:	e00d      	b.n	8006e76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e5a:	f7fd fc43 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006e5e:	61f8      	str	r0, [r7, #28]
        break;
 8006e60:	e009      	b.n	8006e76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e66:	61fb      	str	r3, [r7, #28]
        break;
 8006e68:	e005      	b.n	8006e76 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d077      	beq.n	8006f6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	005a      	lsls	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	441a      	add	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b0f      	cmp	r3, #15
 8006e96:	d916      	bls.n	8006ec6 <UART_SetConfig+0x4a6>
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e9e:	d212      	bcs.n	8006ec6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f023 030f 	bic.w	r3, r3, #15
 8006ea8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	8afb      	ldrh	r3, [r7, #22]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	8afa      	ldrh	r2, [r7, #22]
 8006ec2:	60da      	str	r2, [r3, #12]
 8006ec4:	e052      	b.n	8006f6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ecc:	e04e      	b.n	8006f6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ed2:	2b08      	cmp	r3, #8
 8006ed4:	d827      	bhi.n	8006f26 <UART_SetConfig+0x506>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <UART_SetConfig+0x4bc>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f09 	.word	0x08006f09
 8006ee4:	08006f11 	.word	0x08006f11
 8006ee8:	08006f27 	.word	0x08006f27
 8006eec:	08006f17 	.word	0x08006f17
 8006ef0:	08006f27 	.word	0x08006f27
 8006ef4:	08006f27 	.word	0x08006f27
 8006ef8:	08006f27 	.word	0x08006f27
 8006efc:	08006f1f 	.word	0x08006f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f00:	f7fd fc88 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8006f04:	61f8      	str	r0, [r7, #28]
        break;
 8006f06:	e014      	b.n	8006f32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f08:	f7fd fc9a 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 8006f0c:	61f8      	str	r0, [r7, #28]
        break;
 8006f0e:	e010      	b.n	8006f32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f10:	4b1e      	ldr	r3, [pc, #120]	; (8006f8c <UART_SetConfig+0x56c>)
 8006f12:	61fb      	str	r3, [r7, #28]
        break;
 8006f14:	e00d      	b.n	8006f32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f16:	f7fd fbe5 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006f1a:	61f8      	str	r0, [r7, #28]
        break;
 8006f1c:	e009      	b.n	8006f32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f22:	61fb      	str	r3, [r7, #28]
        break;
 8006f24:	e005      	b.n	8006f32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f30:	bf00      	nop
    }

    if (pclk != 0U)
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d019      	beq.n	8006f6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	085a      	lsrs	r2, r3, #1
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	441a      	add	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2b0f      	cmp	r3, #15
 8006f50:	d909      	bls.n	8006f66 <UART_SetConfig+0x546>
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f58:	d205      	bcs.n	8006f66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60da      	str	r2, [r3, #12]
 8006f64:	e002      	b.n	8006f6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3728      	adds	r7, #40	; 0x28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f86:	bf00      	nop
 8006f88:	40008000 	.word	0x40008000
 8006f8c:	00f42400 	.word	0x00f42400

08006f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00a      	beq.n	8006fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01a      	beq.n	80070a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800708e:	d10a      	bne.n	80070a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	605a      	str	r2, [r3, #4]
  }
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af02      	add	r7, sp, #8
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070e4:	f7fa ff18 	bl	8001f18 <HAL_GetTick>
 80070e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d10e      	bne.n	8007116 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f82d 	bl	8007166 <UART_WaitOnFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e023      	b.n	800715e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b04      	cmp	r3, #4
 8007122:	d10e      	bne.n	8007142 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f817 	bl	8007166 <UART_WaitOnFlagUntilTimeout>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e00d      	b.n	800715e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b09c      	sub	sp, #112	; 0x70
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	603b      	str	r3, [r7, #0]
 8007172:	4613      	mov	r3, r2
 8007174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007176:	e0a5      	b.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800717a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717e:	f000 80a1 	beq.w	80072c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007182:	f7fa fec9 	bl	8001f18 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <UART_WaitOnFlagUntilTimeout+0x32>
 8007192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007194:	2b00      	cmp	r3, #0
 8007196:	d13e      	bne.n	8007216 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071ac:	667b      	str	r3, [r7, #100]	; 0x64
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e6      	bne.n	8007198 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	f023 0301 	bic.w	r3, r3, #1
 80071e0:	663b      	str	r3, [r7, #96]	; 0x60
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80071ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e5      	bne.n	80071ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2220      	movs	r2, #32
 8007208:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e067      	b.n	80072e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d04f      	beq.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800722e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007232:	d147      	bne.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800723c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007252:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725c:	637b      	str	r3, [r7, #52]	; 0x34
 800725e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e6      	bne.n	800723e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3308      	adds	r3, #8
 8007276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	613b      	str	r3, [r7, #16]
   return(result);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f023 0301 	bic.w	r3, r3, #1
 8007286:	66bb      	str	r3, [r7, #104]	; 0x68
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3308      	adds	r3, #8
 800728e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007290:	623a      	str	r2, [r7, #32]
 8007292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	69f9      	ldr	r1, [r7, #28]
 8007296:	6a3a      	ldr	r2, [r7, #32]
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	61bb      	str	r3, [r7, #24]
   return(result);
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e5      	bne.n	8007270 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2220      	movs	r2, #32
 80072ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e010      	b.n	80072e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	69da      	ldr	r2, [r3, #28]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	4013      	ands	r3, r2
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	bf0c      	ite	eq
 80072d4:	2301      	moveq	r3, #1
 80072d6:	2300      	movne	r3, #0
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	461a      	mov	r2, r3
 80072dc:	79fb      	ldrb	r3, [r7, #7]
 80072de:	429a      	cmp	r2, r3
 80072e0:	f43f af4a 	beq.w	8007178 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3770      	adds	r7, #112	; 0x70
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <__NVIC_SetPriority>:
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	6039      	str	r1, [r7, #0]
 80072fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007300:	2b00      	cmp	r3, #0
 8007302:	db0a      	blt.n	800731a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	b2da      	uxtb	r2, r3
 8007308:	490c      	ldr	r1, [pc, #48]	; (800733c <__NVIC_SetPriority+0x4c>)
 800730a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800730e:	0112      	lsls	r2, r2, #4
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	440b      	add	r3, r1
 8007314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007318:	e00a      	b.n	8007330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	b2da      	uxtb	r2, r3
 800731e:	4908      	ldr	r1, [pc, #32]	; (8007340 <__NVIC_SetPriority+0x50>)
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	3b04      	subs	r3, #4
 8007328:	0112      	lsls	r2, r2, #4
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	440b      	add	r3, r1
 800732e:	761a      	strb	r2, [r3, #24]
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	e000e100 	.word	0xe000e100
 8007340:	e000ed00 	.word	0xe000ed00

08007344 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <SysTick_Handler+0x1c>)
 800734a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800734c:	f002 f8b2 	bl	80094b4 <xTaskGetSchedulerState>
 8007350:	4603      	mov	r3, r0
 8007352:	2b01      	cmp	r3, #1
 8007354:	d001      	beq.n	800735a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007356:	f002 ff97 	bl	800a288 <xPortSysTickHandler>
  }
}
 800735a:	bf00      	nop
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	e000e010 	.word	0xe000e010

08007364 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007368:	2100      	movs	r1, #0
 800736a:	f06f 0004 	mvn.w	r0, #4
 800736e:	f7ff ffbf 	bl	80072f0 <__NVIC_SetPriority>
#endif
}
 8007372:	bf00      	nop
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800737e:	f3ef 8305 	mrs	r3, IPSR
 8007382:	603b      	str	r3, [r7, #0]
  return(result);
 8007384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800738a:	f06f 0305 	mvn.w	r3, #5
 800738e:	607b      	str	r3, [r7, #4]
 8007390:	e00c      	b.n	80073ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007392:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <osKernelInitialize+0x44>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800739a:	4b08      	ldr	r3, [pc, #32]	; (80073bc <osKernelInitialize+0x44>)
 800739c:	2201      	movs	r2, #1
 800739e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	607b      	str	r3, [r7, #4]
 80073a4:	e002      	b.n	80073ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073a6:	f04f 33ff 	mov.w	r3, #4294967295
 80073aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073ac:	687b      	ldr	r3, [r7, #4]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20000304 	.word	0x20000304

080073c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c6:	f3ef 8305 	mrs	r3, IPSR
 80073ca:	603b      	str	r3, [r7, #0]
  return(result);
 80073cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <osKernelStart+0x1a>
    stat = osErrorISR;
 80073d2:	f06f 0305 	mvn.w	r3, #5
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	e010      	b.n	80073fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073da:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <osKernelStart+0x48>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d109      	bne.n	80073f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073e2:	f7ff ffbf 	bl	8007364 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073e6:	4b08      	ldr	r3, [pc, #32]	; (8007408 <osKernelStart+0x48>)
 80073e8:	2202      	movs	r2, #2
 80073ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073ec:	f001 fbf6 	bl	8008bdc <vTaskStartScheduler>
      stat = osOK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	607b      	str	r3, [r7, #4]
 80073f4:	e002      	b.n	80073fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295
 80073fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073fc:	687b      	ldr	r3, [r7, #4]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000304 	.word	0x20000304

0800740c <osKernelLock>:

int32_t osKernelLock (void) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007412:	f3ef 8305 	mrs	r3, IPSR
 8007416:	603b      	str	r3, [r7, #0]
  return(result);
 8007418:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <osKernelLock+0x1a>
    lock = (int32_t)osErrorISR;
 800741e:	f06f 0305 	mvn.w	r3, #5
 8007422:	607b      	str	r3, [r7, #4]
 8007424:	e013      	b.n	800744e <osKernelLock+0x42>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8007426:	f002 f845 	bl	80094b4 <xTaskGetSchedulerState>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <osKernelLock+0x2a>
 8007430:	2b02      	cmp	r3, #2
 8007432:	d003      	beq.n	800743c <osKernelLock+0x30>
 8007434:	e007      	b.n	8007446 <osKernelLock+0x3a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8007436:	2301      	movs	r3, #1
 8007438:	607b      	str	r3, [r7, #4]
        break;
 800743a:	e008      	b.n	800744e <osKernelLock+0x42>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 800743c:	f001 fc3e 	bl	8008cbc <vTaskSuspendAll>
        lock = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	607b      	str	r3, [r7, #4]
        break;
 8007444:	e003      	b.n	800744e <osKernelLock+0x42>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8007446:	f04f 33ff 	mov.w	r3, #4294967295
 800744a:	607b      	str	r3, [r7, #4]
        break;
 800744c:	bf00      	nop
    }
  }

  return (lock);
 800744e:	687b      	ldr	r3, [r7, #4]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800745e:	f3ef 8305 	mrs	r3, IPSR
 8007462:	603b      	str	r3, [r7, #0]
  return(result);
 8007464:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <osKernelUnlock+0x1a>
    lock = (int32_t)osErrorISR;
 800746a:	f06f 0305 	mvn.w	r3, #5
 800746e:	607b      	str	r3, [r7, #4]
 8007470:	e01f      	b.n	80074b2 <osKernelUnlock+0x5a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8007472:	f002 f81f 	bl	80094b4 <xTaskGetSchedulerState>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <osKernelUnlock+0x2a>
 800747c:	2b02      	cmp	r3, #2
 800747e:	d010      	beq.n	80074a2 <osKernelUnlock+0x4a>
 8007480:	e012      	b.n	80074a8 <osKernelUnlock+0x50>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8007482:	2301      	movs	r3, #1
 8007484:	607b      	str	r3, [r7, #4]

        if (xTaskResumeAll() != pdTRUE) {
 8007486:	f001 fc27 	bl	8008cd8 <xTaskResumeAll>
 800748a:	4603      	mov	r3, r0
 800748c:	2b01      	cmp	r3, #1
 800748e:	d00f      	beq.n	80074b0 <osKernelUnlock+0x58>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 8007490:	f002 f810 	bl	80094b4 <xTaskGetSchedulerState>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <osKernelUnlock+0x58>
            lock = (int32_t)osError;
 800749a:	f04f 33ff 	mov.w	r3, #4294967295
 800749e:	607b      	str	r3, [r7, #4]
          }
        }
        break;
 80074a0:	e006      	b.n	80074b0 <osKernelUnlock+0x58>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	607b      	str	r3, [r7, #4]
        break;
 80074a6:	e004      	b.n	80074b2 <osKernelUnlock+0x5a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 80074a8:	f04f 33ff 	mov.w	r3, #4294967295
 80074ac:	607b      	str	r3, [r7, #4]
        break;
 80074ae:	e000      	b.n	80074b2 <osKernelUnlock+0x5a>
        break;
 80074b0:	bf00      	nop
    }
  }

  return (lock);
 80074b2:	687b      	ldr	r3, [r7, #4]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08e      	sub	sp, #56	; 0x38
 80074c0:	af04      	add	r7, sp, #16
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074cc:	f3ef 8305 	mrs	r3, IPSR
 80074d0:	617b      	str	r3, [r7, #20]
  return(result);
 80074d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d17e      	bne.n	80075d6 <osThreadNew+0x11a>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d07b      	beq.n	80075d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80074de:	2380      	movs	r3, #128	; 0x80
 80074e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80074e2:	2318      	movs	r3, #24
 80074e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80074ea:	f04f 33ff 	mov.w	r3, #4294967295
 80074ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d045      	beq.n	8007582 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <osThreadNew+0x48>
        name = attr->name;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <osThreadNew+0x6e>
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2b38      	cmp	r3, #56	; 0x38
 800751c:	d805      	bhi.n	800752a <osThreadNew+0x6e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <osThreadNew+0x72>
        return (NULL);
 800752a:	2300      	movs	r3, #0
 800752c:	e054      	b.n	80075d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	089b      	lsrs	r3, r3, #2
 800753c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00e      	beq.n	8007564 <osThreadNew+0xa8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	2bbb      	cmp	r3, #187	; 0xbb
 800754c:	d90a      	bls.n	8007564 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007552:	2b00      	cmp	r3, #0
 8007554:	d006      	beq.n	8007564 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <osThreadNew+0xa8>
        mem = 1;
 800755e:	2301      	movs	r3, #1
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	e010      	b.n	8007586 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10c      	bne.n	8007586 <osThreadNew+0xca>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d108      	bne.n	8007586 <osThreadNew+0xca>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d104      	bne.n	8007586 <osThreadNew+0xca>
          mem = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	e001      	b.n	8007586 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d110      	bne.n	80075ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007594:	9202      	str	r2, [sp, #8]
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	6a3a      	ldr	r2, [r7, #32]
 80075a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f001 f92e 	bl	8008804 <xTaskCreateStatic>
 80075a8:	4603      	mov	r3, r0
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	e013      	b.n	80075d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d110      	bne.n	80075d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	f107 0310 	add.w	r3, r7, #16
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f001 f979 	bl	80088be <xTaskCreate>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d001      	beq.n	80075d6 <osThreadNew+0x11a>
            hTask = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075d6:	693b      	ldr	r3, [r7, #16]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3728      	adds	r7, #40	; 0x28
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075e8:	f3ef 8305 	mrs	r3, IPSR
 80075ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80075ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <osDelay+0x1c>
    stat = osErrorISR;
 80075f4:	f06f 0305 	mvn.w	r3, #5
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	e007      	b.n	800760c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fab4 	bl	8008b74 <vTaskDelay>
    }
  }

  return (stat);
 800760c:	68fb      	ldr	r3, [r7, #12]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007616:	b580      	push	{r7, lr}
 8007618:	b088      	sub	sp, #32
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007622:	f3ef 8305 	mrs	r3, IPSR
 8007626:	60bb      	str	r3, [r7, #8]
  return(result);
 8007628:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800762a:	2b00      	cmp	r3, #0
 800762c:	d174      	bne.n	8007718 <osMutexNew+0x102>
    if (attr != NULL) {
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <osMutexNew+0x26>
      type = attr->attr_bits;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e001      	b.n	8007640 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <osMutexNew+0x3a>
      rmtx = 1U;
 800764a:	2301      	movs	r3, #1
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e001      	b.n	8007654 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d15c      	bne.n	8007718 <osMutexNew+0x102>
      mem = -1;
 800765e:	f04f 33ff 	mov.w	r3, #4294967295
 8007662:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d015      	beq.n	8007696 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d006      	beq.n	8007680 <osMutexNew+0x6a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b4f      	cmp	r3, #79	; 0x4f
 8007678:	d902      	bls.n	8007680 <osMutexNew+0x6a>
          mem = 1;
 800767a:	2301      	movs	r3, #1
 800767c:	613b      	str	r3, [r7, #16]
 800767e:	e00c      	b.n	800769a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d108      	bne.n	800769a <osMutexNew+0x84>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <osMutexNew+0x84>
            mem = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	e001      	b.n	800769a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d112      	bne.n	80076c6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	4619      	mov	r1, r3
 80076ac:	2004      	movs	r0, #4
 80076ae:	f000 fb18 	bl	8007ce2 <xQueueCreateMutexStatic>
 80076b2:	61f8      	str	r0, [r7, #28]
 80076b4:	e016      	b.n	80076e4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	4619      	mov	r1, r3
 80076bc:	2001      	movs	r0, #1
 80076be:	f000 fb10 	bl	8007ce2 <xQueueCreateMutexStatic>
 80076c2:	61f8      	str	r0, [r7, #28]
 80076c4:	e00e      	b.n	80076e4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10b      	bne.n	80076e4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80076d2:	2004      	movs	r0, #4
 80076d4:	f000 faed 	bl	8007cb2 <xQueueCreateMutex>
 80076d8:	61f8      	str	r0, [r7, #28]
 80076da:	e003      	b.n	80076e4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80076dc:	2001      	movs	r0, #1
 80076de:	f000 fae8 	bl	8007cb2 <xQueueCreateMutex>
 80076e2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00c      	beq.n	8007704 <osMutexNew+0xee>
        if (attr != NULL) {
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <osMutexNew+0xe2>
          name = attr->name;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	e001      	b.n	80076fc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80076fc:	68f9      	ldr	r1, [r7, #12]
 80076fe:	69f8      	ldr	r0, [r7, #28]
 8007700:	f001 f822 	bl	8008748 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d006      	beq.n	8007718 <osMutexNew+0x102>
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f043 0301 	orr.w	r3, r3, #1
 8007716:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007718:	69fb      	ldr	r3, [r7, #28]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007722:	b580      	push	{r7, lr}
 8007724:	b086      	sub	sp, #24
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f023 0301 	bic.w	r3, r3, #1
 8007732:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007740:	f3ef 8305 	mrs	r3, IPSR
 8007744:	60bb      	str	r3, [r7, #8]
  return(result);
 8007746:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800774c:	f06f 0305 	mvn.w	r3, #5
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	e02c      	b.n	80077ae <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d103      	bne.n	8007762 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800775a:	f06f 0303 	mvn.w	r3, #3
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	e025      	b.n	80077ae <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d011      	beq.n	800778c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6938      	ldr	r0, [r7, #16]
 800776c:	f000 fb08 	bl	8007d80 <xQueueTakeMutexRecursive>
 8007770:	4603      	mov	r3, r0
 8007772:	2b01      	cmp	r3, #1
 8007774:	d01b      	beq.n	80077ae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800777c:	f06f 0301 	mvn.w	r3, #1
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	e014      	b.n	80077ae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007784:	f06f 0302 	mvn.w	r3, #2
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e010      	b.n	80077ae <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6938      	ldr	r0, [r7, #16]
 8007790:	f000 fda6 	bl	80082e0 <xQueueSemaphoreTake>
 8007794:	4603      	mov	r3, r0
 8007796:	2b01      	cmp	r3, #1
 8007798:	d009      	beq.n	80077ae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80077a0:	f06f 0301 	mvn.w	r3, #1
 80077a4:	617b      	str	r3, [r7, #20]
 80077a6:	e002      	b.n	80077ae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80077a8:	f06f 0302 	mvn.w	r3, #2
 80077ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80077ae:	697b      	ldr	r3, [r7, #20]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077d4:	f3ef 8305 	mrs	r3, IPSR
 80077d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80077da:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80077e0:	f06f 0305 	mvn.w	r3, #5
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	e01f      	b.n	8007828 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d103      	bne.n	80077f6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80077ee:	f06f 0303 	mvn.w	r3, #3
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	e018      	b.n	8007828 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d009      	beq.n	8007810 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80077fc:	6938      	ldr	r0, [r7, #16]
 80077fe:	f000 fa8b 	bl	8007d18 <xQueueGiveMutexRecursive>
 8007802:	4603      	mov	r3, r0
 8007804:	2b01      	cmp	r3, #1
 8007806:	d00f      	beq.n	8007828 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007808:	f06f 0302 	mvn.w	r3, #2
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	e00b      	b.n	8007828 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007810:	2300      	movs	r3, #0
 8007812:	2200      	movs	r2, #0
 8007814:	2100      	movs	r1, #0
 8007816:	6938      	ldr	r0, [r7, #16]
 8007818:	f000 fae8 	bl	8007dec <xQueueGenericSend>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d002      	beq.n	8007828 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007822:	f06f 0302 	mvn.w	r3, #2
 8007826:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007828:	697b      	ldr	r3, [r7, #20]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4a07      	ldr	r2, [pc, #28]	; (8007860 <vApplicationGetIdleTaskMemory+0x2c>)
 8007844:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4a06      	ldr	r2, [pc, #24]	; (8007864 <vApplicationGetIdleTaskMemory+0x30>)
 800784a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2280      	movs	r2, #128	; 0x80
 8007850:	601a      	str	r2, [r3, #0]
}
 8007852:	bf00      	nop
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20000308 	.word	0x20000308
 8007864:	200003c4 	.word	0x200003c4

08007868 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4a07      	ldr	r2, [pc, #28]	; (8007894 <vApplicationGetTimerTaskMemory+0x2c>)
 8007878:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4a06      	ldr	r2, [pc, #24]	; (8007898 <vApplicationGetTimerTaskMemory+0x30>)
 800787e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007886:	601a      	str	r2, [r3, #0]
}
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	200005c4 	.word	0x200005c4
 8007898:	20000680 	.word	0x20000680

0800789c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f103 0208 	add.w	r2, r3, #8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f04f 32ff 	mov.w	r2, #4294967295
 80078b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f103 0208 	add.w	r2, r3, #8
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f103 0208 	add.w	r2, r3, #8
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
}
 8007932:	bf00      	nop
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007954:	d103      	bne.n	800795e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	e00c      	b.n	8007978 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3308      	adds	r3, #8
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e002      	b.n	800796c <vListInsert+0x2e>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	429a      	cmp	r2, r3
 8007976:	d2f6      	bcs.n	8007966 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
}
 80079a4:	bf00      	nop
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6892      	ldr	r2, [r2, #8]
 80079c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6852      	ldr	r2, [r2, #4]
 80079d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d103      	bne.n	80079e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	1e5a      	subs	r2, r3, #1
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a2e:	f002 fb99 	bl	800a164 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3a:	68f9      	ldr	r1, [r7, #12]
 8007a3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a3e:	fb01 f303 	mul.w	r3, r1, r3
 8007a42:	441a      	add	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	68f9      	ldr	r1, [r7, #12]
 8007a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a64:	fb01 f303 	mul.w	r3, r1, r3
 8007a68:	441a      	add	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	22ff      	movs	r2, #255	; 0xff
 8007a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	22ff      	movs	r2, #255	; 0xff
 8007a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d114      	bne.n	8007aae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01a      	beq.n	8007ac2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3310      	adds	r3, #16
 8007a90:	4618      	mov	r0, r3
 8007a92:	f001 fb3d 	bl	8009110 <xTaskRemoveFromEventList>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d012      	beq.n	8007ac2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <xQueueGenericReset+0xcc>)
 8007a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	e009      	b.n	8007ac2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3310      	adds	r3, #16
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7ff fef2 	bl	800789c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3324      	adds	r3, #36	; 0x24
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7ff feed 	bl	800789c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ac2:	f002 fb7f 	bl	800a1c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ac6:	2301      	movs	r3, #1
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08e      	sub	sp, #56	; 0x38
 8007ad8:	af02      	add	r7, sp, #8
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <xQueueGenericCreateStatic+0x52>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <xQueueGenericCreateStatic+0x56>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e000      	b.n	8007b2c <xQueueGenericCreateStatic+0x58>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10a      	bne.n	8007b46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	623b      	str	r3, [r7, #32]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <xQueueGenericCreateStatic+0x7e>
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <xQueueGenericCreateStatic+0x82>
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <xQueueGenericCreateStatic+0x84>
 8007b56:	2300      	movs	r3, #0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	61fb      	str	r3, [r7, #28]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b72:	2350      	movs	r3, #80	; 0x50
 8007b74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2b50      	cmp	r3, #80	; 0x50
 8007b7a:	d00a      	beq.n	8007b92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	61bb      	str	r3, [r7, #24]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00d      	beq.n	8007bba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ba6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 f83f 	bl	8007c38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3730      	adds	r7, #48	; 0x30
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	; 0x28
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10a      	bne.n	8007bee <xQueueGenericCreate+0x2a>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	613b      	str	r3, [r7, #16]
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	fb02 f303 	mul.w	r3, r2, r3
 8007bf6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	3350      	adds	r3, #80	; 0x50
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f002 fbd3 	bl	800a3a8 <pvPortMalloc>
 8007c02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d011      	beq.n	8007c2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	3350      	adds	r3, #80	; 0x50
 8007c12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c1c:	79fa      	ldrb	r2, [r7, #7]
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	4613      	mov	r3, r2
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f805 	bl	8007c38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
	}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3720      	adds	r7, #32
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e002      	b.n	8007c5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c66:	2101      	movs	r1, #1
 8007c68:	69b8      	ldr	r0, [r7, #24]
 8007c6a:	f7ff fecb 	bl	8007a04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	78fa      	ldrb	r2, [r7, #3]
 8007c72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00e      	beq.n	8007caa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f8a1 	bl	8007dec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b086      	sub	sp, #24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	4603      	mov	r3, r0
 8007cba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	617b      	str	r3, [r7, #20]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	6939      	ldr	r1, [r7, #16]
 8007cca:	6978      	ldr	r0, [r7, #20]
 8007ccc:	f7ff ff7a 	bl	8007bc4 <xQueueGenericCreate>
 8007cd0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f7ff ffd3 	bl	8007c7e <prvInitialiseMutex>

		return xNewQueue;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
	}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b088      	sub	sp, #32
 8007ce6:	af02      	add	r7, sp, #8
 8007ce8:	4603      	mov	r3, r0
 8007cea:	6039      	str	r1, [r7, #0]
 8007cec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	617b      	str	r3, [r7, #20]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	6939      	ldr	r1, [r7, #16]
 8007d00:	6978      	ldr	r0, [r7, #20]
 8007d02:	f7ff fee7 	bl	8007ad4 <xQueueGenericCreateStatic>
 8007d06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff ffb8 	bl	8007c7e <prvInitialiseMutex>

		return xNewQueue;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
	}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	60fb      	str	r3, [r7, #12]
}
 8007d3c:	bf00      	nop
 8007d3e:	e7fe      	b.n	8007d3e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	689c      	ldr	r4, [r3, #8]
 8007d44:	f001 fba6 	bl	8009494 <xTaskGetCurrentTaskHandle>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	429c      	cmp	r4, r3
 8007d4c:	d111      	bne.n	8007d72 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	1e5a      	subs	r2, r3, #1
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d105      	bne.n	8007d6c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007d60:	2300      	movs	r3, #0
 8007d62:	2200      	movs	r2, #0
 8007d64:	2100      	movs	r1, #0
 8007d66:	6938      	ldr	r0, [r7, #16]
 8007d68:	f000 f840 	bl	8007dec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	e001      	b.n	8007d76 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007d76:	697b      	ldr	r3, [r7, #20]
	}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	371c      	adds	r7, #28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd90      	pop	{r4, r7, pc}

08007d80 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007d80:	b590      	push	{r4, r7, lr}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	60fb      	str	r3, [r7, #12]
}
 8007da6:	bf00      	nop
 8007da8:	e7fe      	b.n	8007da8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	689c      	ldr	r4, [r3, #8]
 8007dae:	f001 fb71 	bl	8009494 <xTaskGetCurrentTaskHandle>
 8007db2:	4603      	mov	r3, r0
 8007db4:	429c      	cmp	r4, r3
 8007db6:	d107      	bne.n	8007dc8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	617b      	str	r3, [r7, #20]
 8007dc6:	e00c      	b.n	8007de2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6938      	ldr	r0, [r7, #16]
 8007dcc:	f000 fa88 	bl	80082e0 <xQueueSemaphoreTake>
 8007dd0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007de2:	697b      	ldr	r3, [r7, #20]
	}
 8007de4:	4618      	mov	r0, r3
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd90      	pop	{r4, r7, pc}

08007dec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08e      	sub	sp, #56	; 0x38
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <xQueueGenericSend+0x32>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e1a:	bf00      	nop
 8007e1c:	e7fe      	b.n	8007e1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d103      	bne.n	8007e2c <xQueueGenericSend+0x40>
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <xQueueGenericSend+0x44>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e000      	b.n	8007e32 <xQueueGenericSend+0x46>
 8007e30:	2300      	movs	r3, #0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10a      	bne.n	8007e4c <xQueueGenericSend+0x60>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d103      	bne.n	8007e5a <xQueueGenericSend+0x6e>
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <xQueueGenericSend+0x72>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <xQueueGenericSend+0x74>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <xQueueGenericSend+0x8e>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	623b      	str	r3, [r7, #32]
}
 8007e76:	bf00      	nop
 8007e78:	e7fe      	b.n	8007e78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e7a:	f001 fb1b 	bl	80094b4 <xTaskGetSchedulerState>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <xQueueGenericSend+0x9e>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <xQueueGenericSend+0xa2>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e000      	b.n	8007e90 <xQueueGenericSend+0xa4>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10a      	bne.n	8007eaa <xQueueGenericSend+0xbe>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	61fb      	str	r3, [r7, #28]
}
 8007ea6:	bf00      	nop
 8007ea8:	e7fe      	b.n	8007ea8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007eaa:	f002 f95b 	bl	800a164 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d302      	bcc.n	8007ec0 <xQueueGenericSend+0xd4>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d129      	bne.n	8007f14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ec6:	f000 fb2f 	bl	8008528 <prvCopyDataToQueue>
 8007eca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d010      	beq.n	8007ef6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	3324      	adds	r3, #36	; 0x24
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f001 f919 	bl	8009110 <xTaskRemoveFromEventList>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d013      	beq.n	8007f0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ee4:	4b3f      	ldr	r3, [pc, #252]	; (8007fe4 <xQueueGenericSend+0x1f8>)
 8007ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	e00a      	b.n	8007f0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d007      	beq.n	8007f0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007efc:	4b39      	ldr	r3, [pc, #228]	; (8007fe4 <xQueueGenericSend+0x1f8>)
 8007efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f0c:	f002 f95a 	bl	800a1c4 <vPortExitCritical>
				return pdPASS;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e063      	b.n	8007fdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f1a:	f002 f953 	bl	800a1c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e05c      	b.n	8007fdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f28:	f107 0314 	add.w	r3, r7, #20
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 f953 	bl	80091d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f36:	f002 f945 	bl	800a1c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f3a:	f000 febf 	bl	8008cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f3e:	f002 f911 	bl	800a164 <vPortEnterCritical>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f48:	b25b      	sxtb	r3, r3
 8007f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4e:	d103      	bne.n	8007f58 <xQueueGenericSend+0x16c>
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f5e:	b25b      	sxtb	r3, r3
 8007f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f64:	d103      	bne.n	8007f6e <xQueueGenericSend+0x182>
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f6e:	f002 f929 	bl	800a1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f72:	1d3a      	adds	r2, r7, #4
 8007f74:	f107 0314 	add.w	r3, r7, #20
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 f942 	bl	8009204 <xTaskCheckForTimeOut>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d124      	bne.n	8007fd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f88:	f000 fbc6 	bl	8008718 <prvIsQueueFull>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d018      	beq.n	8007fc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	3310      	adds	r3, #16
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 f868 	bl	8009070 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fa2:	f000 fb51 	bl	8008648 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007fa6:	f000 fe97 	bl	8008cd8 <xTaskResumeAll>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f47f af7c 	bne.w	8007eaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007fb2:	4b0c      	ldr	r3, [pc, #48]	; (8007fe4 <xQueueGenericSend+0x1f8>)
 8007fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	e772      	b.n	8007eaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fc6:	f000 fb3f 	bl	8008648 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fca:	f000 fe85 	bl	8008cd8 <xTaskResumeAll>
 8007fce:	e76c      	b.n	8007eaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fd2:	f000 fb39 	bl	8008648 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fd6:	f000 fe7f 	bl	8008cd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3738      	adds	r7, #56	; 0x38
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b090      	sub	sp, #64	; 0x40
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10a      	bne.n	8008016 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008012:	bf00      	nop
 8008014:	e7fe      	b.n	8008014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <xQueueGenericSendFromISR+0x3c>
 800801c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <xQueueGenericSendFromISR+0x40>
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <xQueueGenericSendFromISR+0x42>
 8008028:	2300      	movs	r3, #0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	2b02      	cmp	r3, #2
 8008048:	d103      	bne.n	8008052 <xQueueGenericSendFromISR+0x6a>
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804e:	2b01      	cmp	r3, #1
 8008050:	d101      	bne.n	8008056 <xQueueGenericSendFromISR+0x6e>
 8008052:	2301      	movs	r3, #1
 8008054:	e000      	b.n	8008058 <xQueueGenericSendFromISR+0x70>
 8008056:	2300      	movs	r3, #0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	623b      	str	r3, [r7, #32]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008072:	f002 f959 	bl	800a328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008076:	f3ef 8211 	mrs	r2, BASEPRI
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	61fa      	str	r2, [r7, #28]
 800808c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800808e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <xQueueGenericSendFromISR+0xbc>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d12f      	bne.n	8008104 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080ba:	f000 fa35 	bl	8008528 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c6:	d112      	bne.n	80080ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d016      	beq.n	80080fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	3324      	adds	r3, #36	; 0x24
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 f81b 	bl	8009110 <xTaskRemoveFromEventList>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00e      	beq.n	80080fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00b      	beq.n	80080fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e007      	b.n	80080fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080f2:	3301      	adds	r3, #1
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	b25a      	sxtb	r2, r3
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080fe:	2301      	movs	r3, #1
 8008100:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008102:	e001      	b.n	8008108 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008104:	2300      	movs	r3, #0
 8008106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008112:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008116:	4618      	mov	r0, r3
 8008118:	3740      	adds	r7, #64	; 0x40
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08c      	sub	sp, #48	; 0x30
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <xQueueReceive+0x30>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	623b      	str	r3, [r7, #32]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <xQueueReceive+0x3e>
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <xQueueReceive+0x42>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <xQueueReceive+0x44>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10a      	bne.n	800817e <xQueueReceive+0x5e>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	61fb      	str	r3, [r7, #28]
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800817e:	f001 f999 	bl	80094b4 <xTaskGetSchedulerState>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d102      	bne.n	800818e <xQueueReceive+0x6e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <xQueueReceive+0x72>
 800818e:	2301      	movs	r3, #1
 8008190:	e000      	b.n	8008194 <xQueueReceive+0x74>
 8008192:	2300      	movs	r3, #0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <xQueueReceive+0x8e>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	61bb      	str	r3, [r7, #24]
}
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081ae:	f001 ffd9 	bl	800a164 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d01f      	beq.n	80081fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c2:	f000 fa1b 	bl	80085fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	1e5a      	subs	r2, r3, #1
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00f      	beq.n	80081f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	3310      	adds	r3, #16
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 ff98 	bl	8009110 <xTaskRemoveFromEventList>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081e6:	4b3d      	ldr	r3, [pc, #244]	; (80082dc <xQueueReceive+0x1bc>)
 80081e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081f6:	f001 ffe5 	bl	800a1c4 <vPortExitCritical>
				return pdPASS;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e069      	b.n	80082d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d103      	bne.n	800820c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008204:	f001 ffde 	bl	800a1c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008208:	2300      	movs	r3, #0
 800820a:	e062      	b.n	80082d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008212:	f107 0310 	add.w	r3, r7, #16
 8008216:	4618      	mov	r0, r3
 8008218:	f000 ffde 	bl	80091d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800821c:	2301      	movs	r3, #1
 800821e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008220:	f001 ffd0 	bl	800a1c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008224:	f000 fd4a 	bl	8008cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008228:	f001 ff9c 	bl	800a164 <vPortEnterCritical>
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008232:	b25b      	sxtb	r3, r3
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d103      	bne.n	8008242 <xQueueReceive+0x122>
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008248:	b25b      	sxtb	r3, r3
 800824a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824e:	d103      	bne.n	8008258 <xQueueReceive+0x138>
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008258:	f001 ffb4 	bl	800a1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800825c:	1d3a      	adds	r2, r7, #4
 800825e:	f107 0310 	add.w	r3, r7, #16
 8008262:	4611      	mov	r1, r2
 8008264:	4618      	mov	r0, r3
 8008266:	f000 ffcd 	bl	8009204 <xTaskCheckForTimeOut>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d123      	bne.n	80082b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008272:	f000 fa3b 	bl	80086ec <prvIsQueueEmpty>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d017      	beq.n	80082ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	3324      	adds	r3, #36	; 0x24
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	4611      	mov	r1, r2
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fef3 	bl	8009070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800828a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800828c:	f000 f9dc 	bl	8008648 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008290:	f000 fd22 	bl	8008cd8 <xTaskResumeAll>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d189      	bne.n	80081ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800829a:	4b10      	ldr	r3, [pc, #64]	; (80082dc <xQueueReceive+0x1bc>)
 800829c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	e780      	b.n	80081ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80082ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ae:	f000 f9cb 	bl	8008648 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082b2:	f000 fd11 	bl	8008cd8 <xTaskResumeAll>
 80082b6:	e77a      	b.n	80081ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80082b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ba:	f000 f9c5 	bl	8008648 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082be:	f000 fd0b 	bl	8008cd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c4:	f000 fa12 	bl	80086ec <prvIsQueueEmpty>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f43f af6f 	beq.w	80081ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3730      	adds	r7, #48	; 0x30
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	e000ed04 	.word	0xe000ed04

080082e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08e      	sub	sp, #56	; 0x38
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80082ea:	2300      	movs	r3, #0
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	623b      	str	r3, [r7, #32]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	61fb      	str	r3, [r7, #28]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008330:	f001 f8c0 	bl	80094b4 <xTaskGetSchedulerState>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <xQueueSemaphoreTake+0x60>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <xQueueSemaphoreTake+0x64>
 8008340:	2301      	movs	r3, #1
 8008342:	e000      	b.n	8008346 <xQueueSemaphoreTake+0x66>
 8008344:	2300      	movs	r3, #0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10a      	bne.n	8008360 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	61bb      	str	r3, [r7, #24]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008360:	f001 ff00 	bl	800a164 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008368:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	2b00      	cmp	r3, #0
 800836e:	d024      	beq.n	80083ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	1e5a      	subs	r2, r3, #1
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d104      	bne.n	800838a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008380:	f001 fa0e 	bl	80097a0 <pvTaskIncrementMutexHeldCount>
 8008384:	4602      	mov	r2, r0
 8008386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008388:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00f      	beq.n	80083b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008394:	3310      	adds	r3, #16
 8008396:	4618      	mov	r0, r3
 8008398:	f000 feba 	bl	8009110 <xTaskRemoveFromEventList>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083a2:	4b54      	ldr	r3, [pc, #336]	; (80084f4 <xQueueSemaphoreTake+0x214>)
 80083a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083b2:	f001 ff07 	bl	800a1c4 <vPortExitCritical>
				return pdPASS;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e097      	b.n	80084ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d111      	bne.n	80083e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	617b      	str	r3, [r7, #20]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083dc:	f001 fef2 	bl	800a1c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083e0:	2300      	movs	r3, #0
 80083e2:	e082      	b.n	80084ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d106      	bne.n	80083f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083ea:	f107 030c 	add.w	r3, r7, #12
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 fef2 	bl	80091d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083f8:	f001 fee4 	bl	800a1c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083fc:	f000 fc5e 	bl	8008cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008400:	f001 feb0 	bl	800a164 <vPortEnterCritical>
 8008404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800840a:	b25b      	sxtb	r3, r3
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d103      	bne.n	800841a <xQueueSemaphoreTake+0x13a>
 8008412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008420:	b25b      	sxtb	r3, r3
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008426:	d103      	bne.n	8008430 <xQueueSemaphoreTake+0x150>
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008430:	f001 fec8 	bl	800a1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008434:	463a      	mov	r2, r7
 8008436:	f107 030c 	add.w	r3, r7, #12
 800843a:	4611      	mov	r1, r2
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fee1 	bl	8009204 <xTaskCheckForTimeOut>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d132      	bne.n	80084ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800844a:	f000 f94f 	bl	80086ec <prvIsQueueEmpty>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d026      	beq.n	80084a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d109      	bne.n	8008470 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800845c:	f001 fe82 	bl	800a164 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	4618      	mov	r0, r3
 8008466:	f001 f843 	bl	80094f0 <xTaskPriorityInherit>
 800846a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800846c:	f001 feaa 	bl	800a1c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	3324      	adds	r3, #36	; 0x24
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f000 fdf9 	bl	8009070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800847e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008480:	f000 f8e2 	bl	8008648 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008484:	f000 fc28 	bl	8008cd8 <xTaskResumeAll>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	f47f af68 	bne.w	8008360 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008490:	4b18      	ldr	r3, [pc, #96]	; (80084f4 <xQueueSemaphoreTake+0x214>)
 8008492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	e75e      	b.n	8008360 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80084a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084a4:	f000 f8d0 	bl	8008648 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084a8:	f000 fc16 	bl	8008cd8 <xTaskResumeAll>
 80084ac:	e758      	b.n	8008360 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80084ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084b0:	f000 f8ca 	bl	8008648 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084b4:	f000 fc10 	bl	8008cd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084ba:	f000 f917 	bl	80086ec <prvIsQueueEmpty>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f43f af4d 	beq.w	8008360 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00d      	beq.n	80084e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80084cc:	f001 fe4a 	bl	800a164 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80084d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084d2:	f000 f811 	bl	80084f8 <prvGetDisinheritPriorityAfterTimeout>
 80084d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 f8dc 	bl	800969c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80084e4:	f001 fe6e 	bl	800a1c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3738      	adds	r7, #56	; 0x38
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	e000ed04 	.word	0xe000ed04

080084f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	2b00      	cmp	r3, #0
 8008506:	d006      	beq.n	8008516 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	e001      	b.n	800851a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008516:	2300      	movs	r3, #0
 8008518:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800851a:	68fb      	ldr	r3, [r7, #12]
	}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008534:	2300      	movs	r3, #0
 8008536:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10d      	bne.n	8008562 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d14d      	bne.n	80085ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	4618      	mov	r0, r3
 8008554:	f001 f834 	bl	80095c0 <xTaskPriorityDisinherit>
 8008558:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	609a      	str	r2, [r3, #8]
 8008560:	e043      	b.n	80085ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d119      	bne.n	800859c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6858      	ldr	r0, [r3, #4]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008570:	461a      	mov	r2, r3
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	f002 f928 	bl	800a7c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008580:	441a      	add	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	429a      	cmp	r2, r3
 8008590:	d32b      	bcc.n	80085ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	605a      	str	r2, [r3, #4]
 800859a:	e026      	b.n	80085ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	68d8      	ldr	r0, [r3, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a4:	461a      	mov	r2, r3
 80085a6:	68b9      	ldr	r1, [r7, #8]
 80085a8:	f002 f90e 	bl	800a7c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	68da      	ldr	r2, [r3, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b4:	425b      	negs	r3, r3
 80085b6:	441a      	add	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d207      	bcs.n	80085d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	689a      	ldr	r2, [r3, #8]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d0:	425b      	negs	r3, r3
 80085d2:	441a      	add	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d105      	bne.n	80085ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085f2:	697b      	ldr	r3, [r7, #20]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	2b00      	cmp	r3, #0
 800860c:	d018      	beq.n	8008640 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008616:	441a      	add	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68da      	ldr	r2, [r3, #12]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	429a      	cmp	r2, r3
 8008626:	d303      	bcc.n	8008630 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68d9      	ldr	r1, [r3, #12]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008638:	461a      	mov	r2, r3
 800863a:	6838      	ldr	r0, [r7, #0]
 800863c:	f002 f8c4 	bl	800a7c8 <memcpy>
	}
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008650:	f001 fd88 	bl	800a164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800865a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800865c:	e011      	b.n	8008682 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	d012      	beq.n	800868c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3324      	adds	r3, #36	; 0x24
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fd50 	bl	8009110 <xTaskRemoveFromEventList>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008676:	f000 fe27 	bl	80092c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	3b01      	subs	r3, #1
 800867e:	b2db      	uxtb	r3, r3
 8008680:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008686:	2b00      	cmp	r3, #0
 8008688:	dce9      	bgt.n	800865e <prvUnlockQueue+0x16>
 800868a:	e000      	b.n	800868e <prvUnlockQueue+0x46>
					break;
 800868c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	22ff      	movs	r2, #255	; 0xff
 8008692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008696:	f001 fd95 	bl	800a1c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800869a:	f001 fd63 	bl	800a164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086a6:	e011      	b.n	80086cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d012      	beq.n	80086d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3310      	adds	r3, #16
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fd2b 	bl	8009110 <xTaskRemoveFromEventList>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086c0:	f000 fe02 	bl	80092c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	dce9      	bgt.n	80086a8 <prvUnlockQueue+0x60>
 80086d4:	e000      	b.n	80086d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	22ff      	movs	r2, #255	; 0xff
 80086dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80086e0:	f001 fd70 	bl	800a1c4 <vPortExitCritical>
}
 80086e4:	bf00      	nop
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086f4:	f001 fd36 	bl	800a164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e001      	b.n	800870a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800870a:	f001 fd5b 	bl	800a1c4 <vPortExitCritical>

	return xReturn;
 800870e:	68fb      	ldr	r3, [r7, #12]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008720:	f001 fd20 	bl	800a164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872c:	429a      	cmp	r2, r3
 800872e:	d102      	bne.n	8008736 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008730:	2301      	movs	r3, #1
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e001      	b.n	800873a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800873a:	f001 fd43 	bl	800a1c4 <vPortExitCritical>

	return xReturn;
 800873e:	68fb      	ldr	r3, [r7, #12]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	e014      	b.n	8008782 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008758:	4a0f      	ldr	r2, [pc, #60]	; (8008798 <vQueueAddToRegistry+0x50>)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10b      	bne.n	800877c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008764:	490c      	ldr	r1, [pc, #48]	; (8008798 <vQueueAddToRegistry+0x50>)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800876e:	4a0a      	ldr	r2, [pc, #40]	; (8008798 <vQueueAddToRegistry+0x50>)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	4413      	add	r3, r2
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800877a:	e006      	b.n	800878a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b07      	cmp	r3, #7
 8008786:	d9e7      	bls.n	8008758 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	20000a80 	.word	0x20000a80

0800879c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087ac:	f001 fcda 	bl	800a164 <vPortEnterCritical>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087b6:	b25b      	sxtb	r3, r3
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087bc:	d103      	bne.n	80087c6 <vQueueWaitForMessageRestricted+0x2a>
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087cc:	b25b      	sxtb	r3, r3
 80087ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d2:	d103      	bne.n	80087dc <vQueueWaitForMessageRestricted+0x40>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087dc:	f001 fcf2 	bl	800a1c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d106      	bne.n	80087f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	3324      	adds	r3, #36	; 0x24
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 fc61 	bl	80090b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087f6:	6978      	ldr	r0, [r7, #20]
 80087f8:	f7ff ff26 	bl	8008648 <prvUnlockQueue>
	}
 80087fc:	bf00      	nop
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08e      	sub	sp, #56	; 0x38
 8008808:	af04      	add	r7, sp, #16
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	623b      	str	r3, [r7, #32]
}
 800882a:	bf00      	nop
 800882c:	e7fe      	b.n	800882c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10a      	bne.n	800884a <xTaskCreateStatic+0x46>
	__asm volatile
 8008834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	61fb      	str	r3, [r7, #28]
}
 8008846:	bf00      	nop
 8008848:	e7fe      	b.n	8008848 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800884a:	23bc      	movs	r3, #188	; 0xbc
 800884c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2bbc      	cmp	r3, #188	; 0xbc
 8008852:	d00a      	beq.n	800886a <xTaskCreateStatic+0x66>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	61bb      	str	r3, [r7, #24]
}
 8008866:	bf00      	nop
 8008868:	e7fe      	b.n	8008868 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800886a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	2b00      	cmp	r3, #0
 8008870:	d01e      	beq.n	80088b0 <xTaskCreateStatic+0xac>
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01b      	beq.n	80088b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008880:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	2202      	movs	r2, #2
 8008886:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800888a:	2300      	movs	r3, #0
 800888c:	9303      	str	r3, [sp, #12]
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	9302      	str	r3, [sp, #8]
 8008892:	f107 0314 	add.w	r3, r7, #20
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 f850 	bl	8008948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088aa:	f000 f8f3 	bl	8008a94 <prvAddNewTaskToReadyList>
 80088ae:	e001      	b.n	80088b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088b4:	697b      	ldr	r3, [r7, #20]
	}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3728      	adds	r7, #40	; 0x28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b08c      	sub	sp, #48	; 0x30
 80088c2:	af04      	add	r7, sp, #16
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	603b      	str	r3, [r7, #0]
 80088ca:	4613      	mov	r3, r2
 80088cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088ce:	88fb      	ldrh	r3, [r7, #6]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f001 fd68 	bl	800a3a8 <pvPortMalloc>
 80088d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00e      	beq.n	80088fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088e0:	20bc      	movs	r0, #188	; 0xbc
 80088e2:	f001 fd61 	bl	800a3a8 <pvPortMalloc>
 80088e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	631a      	str	r2, [r3, #48]	; 0x30
 80088f4:	e005      	b.n	8008902 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088f6:	6978      	ldr	r0, [r7, #20]
 80088f8:	f001 fe22 	bl	800a540 <vPortFree>
 80088fc:	e001      	b.n	8008902 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d017      	beq.n	8008938 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008910:	88fa      	ldrh	r2, [r7, #6]
 8008912:	2300      	movs	r3, #0
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	9302      	str	r3, [sp, #8]
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 f80e 	bl	8008948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800892c:	69f8      	ldr	r0, [r7, #28]
 800892e:	f000 f8b1 	bl	8008a94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008932:	2301      	movs	r3, #1
 8008934:	61bb      	str	r3, [r7, #24]
 8008936:	e002      	b.n	800893e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008938:	f04f 33ff 	mov.w	r3, #4294967295
 800893c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800893e:	69bb      	ldr	r3, [r7, #24]
	}
 8008940:	4618      	mov	r0, r3
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	461a      	mov	r2, r3
 8008960:	21a5      	movs	r1, #165	; 0xa5
 8008962:	f001 ff3f 	bl	800a7e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008970:	3b01      	subs	r3, #1
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	f023 0307 	bic.w	r3, r3, #7
 800897e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	617b      	str	r3, [r7, #20]
}
 800899c:	bf00      	nop
 800899e:	e7fe      	b.n	800899e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d01f      	beq.n	80089e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	e012      	b.n	80089d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	4413      	add	r3, r2
 80089b2:	7819      	ldrb	r1, [r3, #0]
 80089b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	4413      	add	r3, r2
 80089ba:	3334      	adds	r3, #52	; 0x34
 80089bc:	460a      	mov	r2, r1
 80089be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	4413      	add	r3, r2
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d006      	beq.n	80089da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	3301      	adds	r3, #1
 80089d0:	61fb      	str	r3, [r7, #28]
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	2b0f      	cmp	r3, #15
 80089d6:	d9e9      	bls.n	80089ac <prvInitialiseNewTask+0x64>
 80089d8:	e000      	b.n	80089dc <prvInitialiseNewTask+0x94>
			{
				break;
 80089da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089e4:	e003      	b.n	80089ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	2b37      	cmp	r3, #55	; 0x37
 80089f2:	d901      	bls.n	80089f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089f4:	2337      	movs	r3, #55	; 0x37
 80089f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	2200      	movs	r2, #0
 8008a08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe ff64 	bl	80078dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	3318      	adds	r3, #24
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fe ff5f 	bl	80078dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	3354      	adds	r3, #84	; 0x54
 8008a48:	2260      	movs	r2, #96	; 0x60
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f001 fec9 	bl	800a7e4 <memset>
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	4a0c      	ldr	r2, [pc, #48]	; (8008a88 <prvInitialiseNewTask+0x140>)
 8008a56:	659a      	str	r2, [r3, #88]	; 0x58
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	4a0c      	ldr	r2, [pc, #48]	; (8008a8c <prvInitialiseNewTask+0x144>)
 8008a5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	4a0b      	ldr	r2, [pc, #44]	; (8008a90 <prvInitialiseNewTask+0x148>)
 8008a62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	68f9      	ldr	r1, [r7, #12]
 8008a68:	69b8      	ldr	r0, [r7, #24]
 8008a6a:	f001 fa4f 	bl	8009f0c <pxPortInitialiseStack>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a80:	bf00      	nop
 8008a82:	3720      	adds	r7, #32
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	0800aaf0 	.word	0x0800aaf0
 8008a8c:	0800ab10 	.word	0x0800ab10
 8008a90:	0800aad0 	.word	0x0800aad0

08008a94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a9c:	f001 fb62 	bl	800a164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008aa0:	4b2d      	ldr	r3, [pc, #180]	; (8008b58 <prvAddNewTaskToReadyList+0xc4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	4a2c      	ldr	r2, [pc, #176]	; (8008b58 <prvAddNewTaskToReadyList+0xc4>)
 8008aa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008aaa:	4b2c      	ldr	r3, [pc, #176]	; (8008b5c <prvAddNewTaskToReadyList+0xc8>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d109      	bne.n	8008ac6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ab2:	4a2a      	ldr	r2, [pc, #168]	; (8008b5c <prvAddNewTaskToReadyList+0xc8>)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ab8:	4b27      	ldr	r3, [pc, #156]	; (8008b58 <prvAddNewTaskToReadyList+0xc4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d110      	bne.n	8008ae2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ac0:	f000 fc26 	bl	8009310 <prvInitialiseTaskLists>
 8008ac4:	e00d      	b.n	8008ae2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ac6:	4b26      	ldr	r3, [pc, #152]	; (8008b60 <prvAddNewTaskToReadyList+0xcc>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d109      	bne.n	8008ae2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ace:	4b23      	ldr	r3, [pc, #140]	; (8008b5c <prvAddNewTaskToReadyList+0xc8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d802      	bhi.n	8008ae2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008adc:	4a1f      	ldr	r2, [pc, #124]	; (8008b5c <prvAddNewTaskToReadyList+0xc8>)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ae2:	4b20      	ldr	r3, [pc, #128]	; (8008b64 <prvAddNewTaskToReadyList+0xd0>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	4a1e      	ldr	r2, [pc, #120]	; (8008b64 <prvAddNewTaskToReadyList+0xd0>)
 8008aea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008aec:	4b1d      	ldr	r3, [pc, #116]	; (8008b64 <prvAddNewTaskToReadyList+0xd0>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af8:	4b1b      	ldr	r3, [pc, #108]	; (8008b68 <prvAddNewTaskToReadyList+0xd4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d903      	bls.n	8008b08 <prvAddNewTaskToReadyList+0x74>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	4a18      	ldr	r2, [pc, #96]	; (8008b68 <prvAddNewTaskToReadyList+0xd4>)
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4a15      	ldr	r2, [pc, #84]	; (8008b6c <prvAddNewTaskToReadyList+0xd8>)
 8008b16:	441a      	add	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f7fe fee9 	bl	80078f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b24:	f001 fb4e 	bl	800a1c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b28:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <prvAddNewTaskToReadyList+0xcc>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00e      	beq.n	8008b4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b30:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <prvAddNewTaskToReadyList+0xc8>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d207      	bcs.n	8008b4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b3e:	4b0c      	ldr	r3, [pc, #48]	; (8008b70 <prvAddNewTaskToReadyList+0xdc>)
 8008b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20000f94 	.word	0x20000f94
 8008b5c:	20000ac0 	.word	0x20000ac0
 8008b60:	20000fa0 	.word	0x20000fa0
 8008b64:	20000fb0 	.word	0x20000fb0
 8008b68:	20000f9c 	.word	0x20000f9c
 8008b6c:	20000ac4 	.word	0x20000ac4
 8008b70:	e000ed04 	.word	0xe000ed04

08008b74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d017      	beq.n	8008bb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b86:	4b13      	ldr	r3, [pc, #76]	; (8008bd4 <vTaskDelay+0x60>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00a      	beq.n	8008ba4 <vTaskDelay+0x30>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	60bb      	str	r3, [r7, #8]
}
 8008ba0:	bf00      	nop
 8008ba2:	e7fe      	b.n	8008ba2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ba4:	f000 f88a 	bl	8008cbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ba8:	2100      	movs	r1, #0
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fe0c 	bl	80097c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008bb0:	f000 f892 	bl	8008cd8 <xTaskResumeAll>
 8008bb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d107      	bne.n	8008bcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008bbc:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <vTaskDelay+0x64>)
 8008bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bcc:	bf00      	nop
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20000fbc 	.word	0x20000fbc
 8008bd8:	e000ed04 	.word	0xe000ed04

08008bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	; 0x28
 8008be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bea:	463a      	mov	r2, r7
 8008bec:	1d39      	adds	r1, r7, #4
 8008bee:	f107 0308 	add.w	r3, r7, #8
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fe1e 	bl	8007834 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	9202      	str	r2, [sp, #8]
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	2300      	movs	r3, #0
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	2300      	movs	r3, #0
 8008c08:	460a      	mov	r2, r1
 8008c0a:	4924      	ldr	r1, [pc, #144]	; (8008c9c <vTaskStartScheduler+0xc0>)
 8008c0c:	4824      	ldr	r0, [pc, #144]	; (8008ca0 <vTaskStartScheduler+0xc4>)
 8008c0e:	f7ff fdf9 	bl	8008804 <xTaskCreateStatic>
 8008c12:	4603      	mov	r3, r0
 8008c14:	4a23      	ldr	r2, [pc, #140]	; (8008ca4 <vTaskStartScheduler+0xc8>)
 8008c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c18:	4b22      	ldr	r3, [pc, #136]	; (8008ca4 <vTaskStartScheduler+0xc8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c20:	2301      	movs	r3, #1
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	e001      	b.n	8008c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d102      	bne.n	8008c36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c30:	f000 fe1e 	bl	8009870 <xTimerCreateTimerTask>
 8008c34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d11b      	bne.n	8008c74 <vTaskStartScheduler+0x98>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	613b      	str	r3, [r7, #16]
}
 8008c4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c50:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <vTaskStartScheduler+0xcc>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3354      	adds	r3, #84	; 0x54
 8008c56:	4a15      	ldr	r2, [pc, #84]	; (8008cac <vTaskStartScheduler+0xd0>)
 8008c58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c5a:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <vTaskStartScheduler+0xd4>)
 8008c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c62:	4b14      	ldr	r3, [pc, #80]	; (8008cb4 <vTaskStartScheduler+0xd8>)
 8008c64:	2201      	movs	r2, #1
 8008c66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c68:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <vTaskStartScheduler+0xdc>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c6e:	f001 f9d7 	bl	800a020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c72:	e00e      	b.n	8008c92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d10a      	bne.n	8008c92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60fb      	str	r3, [r7, #12]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <vTaskStartScheduler+0xb4>
}
 8008c92:	bf00      	nop
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	0800a9f4 	.word	0x0800a9f4
 8008ca0:	080092e1 	.word	0x080092e1
 8008ca4:	20000fb8 	.word	0x20000fb8
 8008ca8:	20000ac0 	.word	0x20000ac0
 8008cac:	20000010 	.word	0x20000010
 8008cb0:	20000fb4 	.word	0x20000fb4
 8008cb4:	20000fa0 	.word	0x20000fa0
 8008cb8:	20000f98 	.word	0x20000f98

08008cbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cc0:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <vTaskSuspendAll+0x18>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	4a03      	ldr	r2, [pc, #12]	; (8008cd4 <vTaskSuspendAll+0x18>)
 8008cc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008cca:	bf00      	nop
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	20000fbc 	.word	0x20000fbc

08008cd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ce6:	4b42      	ldr	r3, [pc, #264]	; (8008df0 <xTaskResumeAll+0x118>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <xTaskResumeAll+0x2c>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	603b      	str	r3, [r7, #0]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d04:	f001 fa2e 	bl	800a164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d08:	4b39      	ldr	r3, [pc, #228]	; (8008df0 <xTaskResumeAll+0x118>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	4a38      	ldr	r2, [pc, #224]	; (8008df0 <xTaskResumeAll+0x118>)
 8008d10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d12:	4b37      	ldr	r3, [pc, #220]	; (8008df0 <xTaskResumeAll+0x118>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d162      	bne.n	8008de0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d1a:	4b36      	ldr	r3, [pc, #216]	; (8008df4 <xTaskResumeAll+0x11c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d05e      	beq.n	8008de0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d22:	e02f      	b.n	8008d84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d24:	4b34      	ldr	r3, [pc, #208]	; (8008df8 <xTaskResumeAll+0x120>)
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3318      	adds	r3, #24
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe fe3d 	bl	80079b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fe38 	bl	80079b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	4b2d      	ldr	r3, [pc, #180]	; (8008dfc <xTaskResumeAll+0x124>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d903      	bls.n	8008d54 <xTaskResumeAll+0x7c>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	4a2a      	ldr	r2, [pc, #168]	; (8008dfc <xTaskResumeAll+0x124>)
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4a27      	ldr	r2, [pc, #156]	; (8008e00 <xTaskResumeAll+0x128>)
 8008d62:	441a      	add	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	f7fe fdc3 	bl	80078f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d74:	4b23      	ldr	r3, [pc, #140]	; (8008e04 <xTaskResumeAll+0x12c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d302      	bcc.n	8008d84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d7e:	4b22      	ldr	r3, [pc, #136]	; (8008e08 <xTaskResumeAll+0x130>)
 8008d80:	2201      	movs	r2, #1
 8008d82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d84:	4b1c      	ldr	r3, [pc, #112]	; (8008df8 <xTaskResumeAll+0x120>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1cb      	bne.n	8008d24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d92:	f000 fb5f 	bl	8009454 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d96:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <xTaskResumeAll+0x134>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d010      	beq.n	8008dc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008da2:	f000 f847 	bl	8008e34 <xTaskIncrementTick>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008dac:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <xTaskResumeAll+0x130>)
 8008dae:	2201      	movs	r2, #1
 8008db0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1f1      	bne.n	8008da2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008dbe:	4b13      	ldr	r3, [pc, #76]	; (8008e0c <xTaskResumeAll+0x134>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008dc4:	4b10      	ldr	r3, [pc, #64]	; (8008e08 <xTaskResumeAll+0x130>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d009      	beq.n	8008de0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008dd0:	4b0f      	ldr	r3, [pc, #60]	; (8008e10 <xTaskResumeAll+0x138>)
 8008dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008de0:	f001 f9f0 	bl	800a1c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008de4:	68bb      	ldr	r3, [r7, #8]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20000fbc 	.word	0x20000fbc
 8008df4:	20000f94 	.word	0x20000f94
 8008df8:	20000f54 	.word	0x20000f54
 8008dfc:	20000f9c 	.word	0x20000f9c
 8008e00:	20000ac4 	.word	0x20000ac4
 8008e04:	20000ac0 	.word	0x20000ac0
 8008e08:	20000fa8 	.word	0x20000fa8
 8008e0c:	20000fa4 	.word	0x20000fa4
 8008e10:	e000ed04 	.word	0xe000ed04

08008e14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e1a:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <xTaskGetTickCount+0x1c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e20:	687b      	ldr	r3, [r7, #4]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	20000f98 	.word	0x20000f98

08008e34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e3e:	4b4f      	ldr	r3, [pc, #316]	; (8008f7c <xTaskIncrementTick+0x148>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f040 808f 	bne.w	8008f66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e48:	4b4d      	ldr	r3, [pc, #308]	; (8008f80 <xTaskIncrementTick+0x14c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e50:	4a4b      	ldr	r2, [pc, #300]	; (8008f80 <xTaskIncrementTick+0x14c>)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d120      	bne.n	8008e9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e5c:	4b49      	ldr	r3, [pc, #292]	; (8008f84 <xTaskIncrementTick+0x150>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <xTaskIncrementTick+0x48>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	603b      	str	r3, [r7, #0]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <xTaskIncrementTick+0x46>
 8008e7c:	4b41      	ldr	r3, [pc, #260]	; (8008f84 <xTaskIncrementTick+0x150>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	4b41      	ldr	r3, [pc, #260]	; (8008f88 <xTaskIncrementTick+0x154>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a3f      	ldr	r2, [pc, #252]	; (8008f84 <xTaskIncrementTick+0x150>)
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	4a3f      	ldr	r2, [pc, #252]	; (8008f88 <xTaskIncrementTick+0x154>)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	4b3e      	ldr	r3, [pc, #248]	; (8008f8c <xTaskIncrementTick+0x158>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3301      	adds	r3, #1
 8008e96:	4a3d      	ldr	r2, [pc, #244]	; (8008f8c <xTaskIncrementTick+0x158>)
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	f000 fadb 	bl	8009454 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e9e:	4b3c      	ldr	r3, [pc, #240]	; (8008f90 <xTaskIncrementTick+0x15c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d349      	bcc.n	8008f3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ea8:	4b36      	ldr	r3, [pc, #216]	; (8008f84 <xTaskIncrementTick+0x150>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d104      	bne.n	8008ebc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb2:	4b37      	ldr	r3, [pc, #220]	; (8008f90 <xTaskIncrementTick+0x15c>)
 8008eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb8:	601a      	str	r2, [r3, #0]
					break;
 8008eba:	e03f      	b.n	8008f3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ebc:	4b31      	ldr	r3, [pc, #196]	; (8008f84 <xTaskIncrementTick+0x150>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d203      	bcs.n	8008edc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ed4:	4a2e      	ldr	r2, [pc, #184]	; (8008f90 <xTaskIncrementTick+0x15c>)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008eda:	e02f      	b.n	8008f3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe fd65 	bl	80079b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d004      	beq.n	8008ef8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	3318      	adds	r3, #24
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe fd5c 	bl	80079b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efc:	4b25      	ldr	r3, [pc, #148]	; (8008f94 <xTaskIncrementTick+0x160>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d903      	bls.n	8008f0c <xTaskIncrementTick+0xd8>
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f08:	4a22      	ldr	r2, [pc, #136]	; (8008f94 <xTaskIncrementTick+0x160>)
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f10:	4613      	mov	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4a1f      	ldr	r2, [pc, #124]	; (8008f98 <xTaskIncrementTick+0x164>)
 8008f1a:	441a      	add	r2, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	4619      	mov	r1, r3
 8008f22:	4610      	mov	r0, r2
 8008f24:	f7fe fce7 	bl	80078f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2c:	4b1b      	ldr	r3, [pc, #108]	; (8008f9c <xTaskIncrementTick+0x168>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d3b8      	bcc.n	8008ea8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008f36:	2301      	movs	r3, #1
 8008f38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f3a:	e7b5      	b.n	8008ea8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f3c:	4b17      	ldr	r3, [pc, #92]	; (8008f9c <xTaskIncrementTick+0x168>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f42:	4915      	ldr	r1, [pc, #84]	; (8008f98 <xTaskIncrementTick+0x164>)
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d901      	bls.n	8008f58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008f54:	2301      	movs	r3, #1
 8008f56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f58:	4b11      	ldr	r3, [pc, #68]	; (8008fa0 <xTaskIncrementTick+0x16c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	617b      	str	r3, [r7, #20]
 8008f64:	e004      	b.n	8008f70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f66:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <xTaskIncrementTick+0x170>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	4a0d      	ldr	r2, [pc, #52]	; (8008fa4 <xTaskIncrementTick+0x170>)
 8008f6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f70:	697b      	ldr	r3, [r7, #20]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000fbc 	.word	0x20000fbc
 8008f80:	20000f98 	.word	0x20000f98
 8008f84:	20000f4c 	.word	0x20000f4c
 8008f88:	20000f50 	.word	0x20000f50
 8008f8c:	20000fac 	.word	0x20000fac
 8008f90:	20000fb4 	.word	0x20000fb4
 8008f94:	20000f9c 	.word	0x20000f9c
 8008f98:	20000ac4 	.word	0x20000ac4
 8008f9c:	20000ac0 	.word	0x20000ac0
 8008fa0:	20000fa8 	.word	0x20000fa8
 8008fa4:	20000fa4 	.word	0x20000fa4

08008fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fae:	4b2a      	ldr	r3, [pc, #168]	; (8009058 <vTaskSwitchContext+0xb0>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fb6:	4b29      	ldr	r3, [pc, #164]	; (800905c <vTaskSwitchContext+0xb4>)
 8008fb8:	2201      	movs	r2, #1
 8008fba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fbc:	e046      	b.n	800904c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008fbe:	4b27      	ldr	r3, [pc, #156]	; (800905c <vTaskSwitchContext+0xb4>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fc4:	4b26      	ldr	r3, [pc, #152]	; (8009060 <vTaskSwitchContext+0xb8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	e010      	b.n	8008fee <vTaskSwitchContext+0x46>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10a      	bne.n	8008fe8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	607b      	str	r3, [r7, #4]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <vTaskSwitchContext+0x3e>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	60fb      	str	r3, [r7, #12]
 8008fee:	491d      	ldr	r1, [pc, #116]	; (8009064 <vTaskSwitchContext+0xbc>)
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	440b      	add	r3, r1
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0e4      	beq.n	8008fcc <vTaskSwitchContext+0x24>
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4a15      	ldr	r2, [pc, #84]	; (8009064 <vTaskSwitchContext+0xbc>)
 800900e:	4413      	add	r3, r2
 8009010:	60bb      	str	r3, [r7, #8]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	605a      	str	r2, [r3, #4]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	3308      	adds	r3, #8
 8009024:	429a      	cmp	r2, r3
 8009026:	d104      	bne.n	8009032 <vTaskSwitchContext+0x8a>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	605a      	str	r2, [r3, #4]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	4a0b      	ldr	r2, [pc, #44]	; (8009068 <vTaskSwitchContext+0xc0>)
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	4a08      	ldr	r2, [pc, #32]	; (8009060 <vTaskSwitchContext+0xb8>)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009042:	4b09      	ldr	r3, [pc, #36]	; (8009068 <vTaskSwitchContext+0xc0>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3354      	adds	r3, #84	; 0x54
 8009048:	4a08      	ldr	r2, [pc, #32]	; (800906c <vTaskSwitchContext+0xc4>)
 800904a:	6013      	str	r3, [r2, #0]
}
 800904c:	bf00      	nop
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	20000fbc 	.word	0x20000fbc
 800905c:	20000fa8 	.word	0x20000fa8
 8009060:	20000f9c 	.word	0x20000f9c
 8009064:	20000ac4 	.word	0x20000ac4
 8009068:	20000ac0 	.word	0x20000ac0
 800906c:	20000010 	.word	0x20000010

08009070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10a      	bne.n	8009096 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	60fb      	str	r3, [r7, #12]
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009096:	4b07      	ldr	r3, [pc, #28]	; (80090b4 <vTaskPlaceOnEventList+0x44>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3318      	adds	r3, #24
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7fe fc4d 	bl	800793e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090a4:	2101      	movs	r1, #1
 80090a6:	6838      	ldr	r0, [r7, #0]
 80090a8:	f000 fb8e 	bl	80097c8 <prvAddCurrentTaskToDelayedList>
}
 80090ac:	bf00      	nop
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000ac0 	.word	0x20000ac0

080090b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10a      	bne.n	80090e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	617b      	str	r3, [r7, #20]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <vTaskPlaceOnEventListRestricted+0x54>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3318      	adds	r3, #24
 80090e6:	4619      	mov	r1, r3
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f7fe fc04 	bl	80078f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295
 80090f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	68b8      	ldr	r0, [r7, #8]
 80090fe:	f000 fb63 	bl	80097c8 <prvAddCurrentTaskToDelayedList>
	}
 8009102:	bf00      	nop
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20000ac0 	.word	0x20000ac0

08009110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10a      	bne.n	800913c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	60fb      	str	r3, [r7, #12]
}
 8009138:	bf00      	nop
 800913a:	e7fe      	b.n	800913a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	3318      	adds	r3, #24
 8009140:	4618      	mov	r0, r3
 8009142:	f7fe fc35 	bl	80079b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009146:	4b1e      	ldr	r3, [pc, #120]	; (80091c0 <xTaskRemoveFromEventList+0xb0>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d11d      	bne.n	800918a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	3304      	adds	r3, #4
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe fc2c 	bl	80079b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915c:	4b19      	ldr	r3, [pc, #100]	; (80091c4 <xTaskRemoveFromEventList+0xb4>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	429a      	cmp	r2, r3
 8009162:	d903      	bls.n	800916c <xTaskRemoveFromEventList+0x5c>
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009168:	4a16      	ldr	r2, [pc, #88]	; (80091c4 <xTaskRemoveFromEventList+0xb4>)
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4a13      	ldr	r2, [pc, #76]	; (80091c8 <xTaskRemoveFromEventList+0xb8>)
 800917a:	441a      	add	r2, r3
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	3304      	adds	r3, #4
 8009180:	4619      	mov	r1, r3
 8009182:	4610      	mov	r0, r2
 8009184:	f7fe fbb7 	bl	80078f6 <vListInsertEnd>
 8009188:	e005      	b.n	8009196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	3318      	adds	r3, #24
 800918e:	4619      	mov	r1, r3
 8009190:	480e      	ldr	r0, [pc, #56]	; (80091cc <xTaskRemoveFromEventList+0xbc>)
 8009192:	f7fe fbb0 	bl	80078f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919a:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <xTaskRemoveFromEventList+0xc0>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d905      	bls.n	80091b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091a8:	4b0a      	ldr	r3, [pc, #40]	; (80091d4 <xTaskRemoveFromEventList+0xc4>)
 80091aa:	2201      	movs	r2, #1
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e001      	b.n	80091b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091b4:	697b      	ldr	r3, [r7, #20]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20000fbc 	.word	0x20000fbc
 80091c4:	20000f9c 	.word	0x20000f9c
 80091c8:	20000ac4 	.word	0x20000ac4
 80091cc:	20000f54 	.word	0x20000f54
 80091d0:	20000ac0 	.word	0x20000ac0
 80091d4:	20000fa8 	.word	0x20000fa8

080091d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091e0:	4b06      	ldr	r3, [pc, #24]	; (80091fc <vTaskInternalSetTimeOutState+0x24>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091e8:	4b05      	ldr	r3, [pc, #20]	; (8009200 <vTaskInternalSetTimeOutState+0x28>)
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	605a      	str	r2, [r3, #4]
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	20000fac 	.word	0x20000fac
 8009200:	20000f98 	.word	0x20000f98

08009204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10a      	bne.n	800922a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	613b      	str	r3, [r7, #16]
}
 8009226:	bf00      	nop
 8009228:	e7fe      	b.n	8009228 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10a      	bne.n	8009246 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	60fb      	str	r3, [r7, #12]
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009246:	f000 ff8d 	bl	800a164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800924a:	4b1d      	ldr	r3, [pc, #116]	; (80092c0 <xTaskCheckForTimeOut+0xbc>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009262:	d102      	bne.n	800926a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009264:	2300      	movs	r3, #0
 8009266:	61fb      	str	r3, [r7, #28]
 8009268:	e023      	b.n	80092b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	4b15      	ldr	r3, [pc, #84]	; (80092c4 <xTaskCheckForTimeOut+0xc0>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	429a      	cmp	r2, r3
 8009274:	d007      	beq.n	8009286 <xTaskCheckForTimeOut+0x82>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	429a      	cmp	r2, r3
 800927e:	d302      	bcc.n	8009286 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009280:	2301      	movs	r3, #1
 8009282:	61fb      	str	r3, [r7, #28]
 8009284:	e015      	b.n	80092b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	429a      	cmp	r2, r3
 800928e:	d20b      	bcs.n	80092a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	1ad2      	subs	r2, r2, r3
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7ff ff9b 	bl	80091d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092a2:	2300      	movs	r3, #0
 80092a4:	61fb      	str	r3, [r7, #28]
 80092a6:	e004      	b.n	80092b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092ae:	2301      	movs	r3, #1
 80092b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092b2:	f000 ff87 	bl	800a1c4 <vPortExitCritical>

	return xReturn;
 80092b6:	69fb      	ldr	r3, [r7, #28]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3720      	adds	r7, #32
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000f98 	.word	0x20000f98
 80092c4:	20000fac 	.word	0x20000fac

080092c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092cc:	4b03      	ldr	r3, [pc, #12]	; (80092dc <vTaskMissedYield+0x14>)
 80092ce:	2201      	movs	r2, #1
 80092d0:	601a      	str	r2, [r3, #0]
}
 80092d2:	bf00      	nop
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	20000fa8 	.word	0x20000fa8

080092e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092e8:	f000 f852 	bl	8009390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092ec:	4b06      	ldr	r3, [pc, #24]	; (8009308 <prvIdleTask+0x28>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d9f9      	bls.n	80092e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092f4:	4b05      	ldr	r3, [pc, #20]	; (800930c <prvIdleTask+0x2c>)
 80092f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009304:	e7f0      	b.n	80092e8 <prvIdleTask+0x8>
 8009306:	bf00      	nop
 8009308:	20000ac4 	.word	0x20000ac4
 800930c:	e000ed04 	.word	0xe000ed04

08009310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009316:	2300      	movs	r3, #0
 8009318:	607b      	str	r3, [r7, #4]
 800931a:	e00c      	b.n	8009336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4a12      	ldr	r2, [pc, #72]	; (8009370 <prvInitialiseTaskLists+0x60>)
 8009328:	4413      	add	r3, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe fab6 	bl	800789c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3301      	adds	r3, #1
 8009334:	607b      	str	r3, [r7, #4]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b37      	cmp	r3, #55	; 0x37
 800933a:	d9ef      	bls.n	800931c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800933c:	480d      	ldr	r0, [pc, #52]	; (8009374 <prvInitialiseTaskLists+0x64>)
 800933e:	f7fe faad 	bl	800789c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009342:	480d      	ldr	r0, [pc, #52]	; (8009378 <prvInitialiseTaskLists+0x68>)
 8009344:	f7fe faaa 	bl	800789c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009348:	480c      	ldr	r0, [pc, #48]	; (800937c <prvInitialiseTaskLists+0x6c>)
 800934a:	f7fe faa7 	bl	800789c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800934e:	480c      	ldr	r0, [pc, #48]	; (8009380 <prvInitialiseTaskLists+0x70>)
 8009350:	f7fe faa4 	bl	800789c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009354:	480b      	ldr	r0, [pc, #44]	; (8009384 <prvInitialiseTaskLists+0x74>)
 8009356:	f7fe faa1 	bl	800789c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800935a:	4b0b      	ldr	r3, [pc, #44]	; (8009388 <prvInitialiseTaskLists+0x78>)
 800935c:	4a05      	ldr	r2, [pc, #20]	; (8009374 <prvInitialiseTaskLists+0x64>)
 800935e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009360:	4b0a      	ldr	r3, [pc, #40]	; (800938c <prvInitialiseTaskLists+0x7c>)
 8009362:	4a05      	ldr	r2, [pc, #20]	; (8009378 <prvInitialiseTaskLists+0x68>)
 8009364:	601a      	str	r2, [r3, #0]
}
 8009366:	bf00      	nop
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20000ac4 	.word	0x20000ac4
 8009374:	20000f24 	.word	0x20000f24
 8009378:	20000f38 	.word	0x20000f38
 800937c:	20000f54 	.word	0x20000f54
 8009380:	20000f68 	.word	0x20000f68
 8009384:	20000f80 	.word	0x20000f80
 8009388:	20000f4c 	.word	0x20000f4c
 800938c:	20000f50 	.word	0x20000f50

08009390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009396:	e019      	b.n	80093cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009398:	f000 fee4 	bl	800a164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800939c:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <prvCheckTasksWaitingTermination+0x50>)
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe fb01 	bl	80079b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093ae:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <prvCheckTasksWaitingTermination+0x54>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	4a0b      	ldr	r2, [pc, #44]	; (80093e4 <prvCheckTasksWaitingTermination+0x54>)
 80093b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093b8:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <prvCheckTasksWaitingTermination+0x58>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3b01      	subs	r3, #1
 80093be:	4a0a      	ldr	r2, [pc, #40]	; (80093e8 <prvCheckTasksWaitingTermination+0x58>)
 80093c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093c2:	f000 feff 	bl	800a1c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f810 	bl	80093ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093cc:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <prvCheckTasksWaitingTermination+0x58>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e1      	bne.n	8009398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000f68 	.word	0x20000f68
 80093e4:	20000f94 	.word	0x20000f94
 80093e8:	20000f7c 	.word	0x20000f7c

080093ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3354      	adds	r3, #84	; 0x54
 80093f8:	4618      	mov	r0, r3
 80093fa:	f001 fa09 	bl	800a810 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009404:	2b00      	cmp	r3, #0
 8009406:	d108      	bne.n	800941a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940c:	4618      	mov	r0, r3
 800940e:	f001 f897 	bl	800a540 <vPortFree>
				vPortFree( pxTCB );
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 f894 	bl	800a540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009418:	e018      	b.n	800944c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009420:	2b01      	cmp	r3, #1
 8009422:	d103      	bne.n	800942c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 f88b 	bl	800a540 <vPortFree>
	}
 800942a:	e00f      	b.n	800944c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009432:	2b02      	cmp	r3, #2
 8009434:	d00a      	beq.n	800944c <prvDeleteTCB+0x60>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	60fb      	str	r3, [r7, #12]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <prvDeleteTCB+0x5e>
	}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800945a:	4b0c      	ldr	r3, [pc, #48]	; (800948c <prvResetNextTaskUnblockTime+0x38>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d104      	bne.n	800946e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009464:	4b0a      	ldr	r3, [pc, #40]	; (8009490 <prvResetNextTaskUnblockTime+0x3c>)
 8009466:	f04f 32ff 	mov.w	r2, #4294967295
 800946a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800946c:	e008      	b.n	8009480 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946e:	4b07      	ldr	r3, [pc, #28]	; (800948c <prvResetNextTaskUnblockTime+0x38>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	4a04      	ldr	r2, [pc, #16]	; (8009490 <prvResetNextTaskUnblockTime+0x3c>)
 800947e:	6013      	str	r3, [r2, #0]
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	20000f4c 	.word	0x20000f4c
 8009490:	20000fb4 	.word	0x20000fb4

08009494 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800949a:	4b05      	ldr	r3, [pc, #20]	; (80094b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80094a0:	687b      	ldr	r3, [r7, #4]
	}
 80094a2:	4618      	mov	r0, r3
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	20000ac0 	.word	0x20000ac0

080094b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094ba:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <xTaskGetSchedulerState+0x34>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d102      	bne.n	80094c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094c2:	2301      	movs	r3, #1
 80094c4:	607b      	str	r3, [r7, #4]
 80094c6:	e008      	b.n	80094da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094c8:	4b08      	ldr	r3, [pc, #32]	; (80094ec <xTaskGetSchedulerState+0x38>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d102      	bne.n	80094d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094d0:	2302      	movs	r3, #2
 80094d2:	607b      	str	r3, [r7, #4]
 80094d4:	e001      	b.n	80094da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094d6:	2300      	movs	r3, #0
 80094d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094da:	687b      	ldr	r3, [r7, #4]
	}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	20000fa0 	.word	0x20000fa0
 80094ec:	20000fbc 	.word	0x20000fbc

080094f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80094fc:	2300      	movs	r3, #0
 80094fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d051      	beq.n	80095aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950a:	4b2a      	ldr	r3, [pc, #168]	; (80095b4 <xTaskPriorityInherit+0xc4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009510:	429a      	cmp	r2, r3
 8009512:	d241      	bcs.n	8009598 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	db06      	blt.n	800952a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800951c:	4b25      	ldr	r3, [pc, #148]	; (80095b4 <xTaskPriorityInherit+0xc4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6959      	ldr	r1, [r3, #20]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4a1f      	ldr	r2, [pc, #124]	; (80095b8 <xTaskPriorityInherit+0xc8>)
 800953c:	4413      	add	r3, r2
 800953e:	4299      	cmp	r1, r3
 8009540:	d122      	bne.n	8009588 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	3304      	adds	r3, #4
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe fa32 	bl	80079b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800954c:	4b19      	ldr	r3, [pc, #100]	; (80095b4 <xTaskPriorityInherit+0xc4>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955a:	4b18      	ldr	r3, [pc, #96]	; (80095bc <xTaskPriorityInherit+0xcc>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d903      	bls.n	800956a <xTaskPriorityInherit+0x7a>
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009566:	4a15      	ldr	r2, [pc, #84]	; (80095bc <xTaskPriorityInherit+0xcc>)
 8009568:	6013      	str	r3, [r2, #0]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4a10      	ldr	r2, [pc, #64]	; (80095b8 <xTaskPriorityInherit+0xc8>)
 8009578:	441a      	add	r2, r3
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	3304      	adds	r3, #4
 800957e:	4619      	mov	r1, r3
 8009580:	4610      	mov	r0, r2
 8009582:	f7fe f9b8 	bl	80078f6 <vListInsertEnd>
 8009586:	e004      	b.n	8009592 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009588:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <xTaskPriorityInherit+0xc4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009592:	2301      	movs	r3, #1
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	e008      	b.n	80095aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800959c:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <xTaskPriorityInherit+0xc4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d201      	bcs.n	80095aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80095a6:	2301      	movs	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095aa:	68fb      	ldr	r3, [r7, #12]
	}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20000ac0 	.word	0x20000ac0
 80095b8:	20000ac4 	.word	0x20000ac4
 80095bc:	20000f9c 	.word	0x20000f9c

080095c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095cc:	2300      	movs	r3, #0
 80095ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d056      	beq.n	8009684 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095d6:	4b2e      	ldr	r3, [pc, #184]	; (8009690 <xTaskPriorityDisinherit+0xd0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d00a      	beq.n	80095f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	60fb      	str	r3, [r7, #12]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10a      	bne.n	8009614 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	60bb      	str	r3, [r7, #8]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009618:	1e5a      	subs	r2, r3, #1
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009626:	429a      	cmp	r2, r3
 8009628:	d02c      	beq.n	8009684 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800962e:	2b00      	cmp	r3, #0
 8009630:	d128      	bne.n	8009684 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	3304      	adds	r3, #4
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe f9ba 	bl	80079b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009648:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009654:	4b0f      	ldr	r3, [pc, #60]	; (8009694 <xTaskPriorityDisinherit+0xd4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	429a      	cmp	r2, r3
 800965a:	d903      	bls.n	8009664 <xTaskPriorityDisinherit+0xa4>
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009660:	4a0c      	ldr	r2, [pc, #48]	; (8009694 <xTaskPriorityDisinherit+0xd4>)
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4a09      	ldr	r2, [pc, #36]	; (8009698 <xTaskPriorityDisinherit+0xd8>)
 8009672:	441a      	add	r2, r3
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	3304      	adds	r3, #4
 8009678:	4619      	mov	r1, r3
 800967a:	4610      	mov	r0, r2
 800967c:	f7fe f93b 	bl	80078f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009684:	697b      	ldr	r3, [r7, #20]
	}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000ac0 	.word	0x20000ac0
 8009694:	20000f9c 	.word	0x20000f9c
 8009698:	20000ac4 	.word	0x20000ac4

0800969c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80096aa:	2301      	movs	r3, #1
 80096ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d06a      	beq.n	800978a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	60fb      	str	r3, [r7, #12]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d902      	bls.n	80096e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	61fb      	str	r3, [r7, #28]
 80096e0:	e002      	b.n	80096e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	69fa      	ldr	r2, [r7, #28]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d04b      	beq.n	800978a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d146      	bne.n	800978a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80096fc:	4b25      	ldr	r3, [pc, #148]	; (8009794 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	429a      	cmp	r2, r3
 8009704:	d10a      	bne.n	800971c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60bb      	str	r3, [r7, #8]
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009720:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	69fa      	ldr	r2, [r7, #28]
 8009726:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	db04      	blt.n	800973a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	6959      	ldr	r1, [r3, #20]
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	4613      	mov	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4a13      	ldr	r2, [pc, #76]	; (8009798 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800974a:	4413      	add	r3, r2
 800974c:	4299      	cmp	r1, r3
 800974e:	d11c      	bne.n	800978a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	3304      	adds	r3, #4
 8009754:	4618      	mov	r0, r3
 8009756:	f7fe f92b 	bl	80079b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975e:	4b0f      	ldr	r3, [pc, #60]	; (800979c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d903      	bls.n	800976e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976a:	4a0c      	ldr	r2, [pc, #48]	; (800979c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009772:	4613      	mov	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4a07      	ldr	r2, [pc, #28]	; (8009798 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800977c:	441a      	add	r2, r3
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	3304      	adds	r3, #4
 8009782:	4619      	mov	r1, r3
 8009784:	4610      	mov	r0, r2
 8009786:	f7fe f8b6 	bl	80078f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800978a:	bf00      	nop
 800978c:	3720      	adds	r7, #32
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20000ac0 	.word	0x20000ac0
 8009798:	20000ac4 	.word	0x20000ac4
 800979c:	20000f9c 	.word	0x20000f9c

080097a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80097a0:	b480      	push	{r7}
 80097a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80097a4:	4b07      	ldr	r3, [pc, #28]	; (80097c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d004      	beq.n	80097b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80097ac:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097b2:	3201      	adds	r2, #1
 80097b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80097b6:	4b03      	ldr	r3, [pc, #12]	; (80097c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80097b8:	681b      	ldr	r3, [r3, #0]
	}
 80097ba:	4618      	mov	r0, r3
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	20000ac0 	.word	0x20000ac0

080097c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097d2:	4b21      	ldr	r3, [pc, #132]	; (8009858 <prvAddCurrentTaskToDelayedList+0x90>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097d8:	4b20      	ldr	r3, [pc, #128]	; (800985c <prvAddCurrentTaskToDelayedList+0x94>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3304      	adds	r3, #4
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe f8e6 	bl	80079b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d10a      	bne.n	8009802 <prvAddCurrentTaskToDelayedList+0x3a>
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d007      	beq.n	8009802 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097f2:	4b1a      	ldr	r3, [pc, #104]	; (800985c <prvAddCurrentTaskToDelayedList+0x94>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4619      	mov	r1, r3
 80097fa:	4819      	ldr	r0, [pc, #100]	; (8009860 <prvAddCurrentTaskToDelayedList+0x98>)
 80097fc:	f7fe f87b 	bl	80078f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009800:	e026      	b.n	8009850 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4413      	add	r3, r2
 8009808:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800980a:	4b14      	ldr	r3, [pc, #80]	; (800985c <prvAddCurrentTaskToDelayedList+0x94>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	429a      	cmp	r2, r3
 8009818:	d209      	bcs.n	800982e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800981a:	4b12      	ldr	r3, [pc, #72]	; (8009864 <prvAddCurrentTaskToDelayedList+0x9c>)
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	4b0f      	ldr	r3, [pc, #60]	; (800985c <prvAddCurrentTaskToDelayedList+0x94>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3304      	adds	r3, #4
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f7fe f889 	bl	800793e <vListInsert>
}
 800982c:	e010      	b.n	8009850 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800982e:	4b0e      	ldr	r3, [pc, #56]	; (8009868 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	4b0a      	ldr	r3, [pc, #40]	; (800985c <prvAddCurrentTaskToDelayedList+0x94>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3304      	adds	r3, #4
 8009838:	4619      	mov	r1, r3
 800983a:	4610      	mov	r0, r2
 800983c:	f7fe f87f 	bl	800793e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009840:	4b0a      	ldr	r3, [pc, #40]	; (800986c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	429a      	cmp	r2, r3
 8009848:	d202      	bcs.n	8009850 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800984a:	4a08      	ldr	r2, [pc, #32]	; (800986c <prvAddCurrentTaskToDelayedList+0xa4>)
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	6013      	str	r3, [r2, #0]
}
 8009850:	bf00      	nop
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	20000f98 	.word	0x20000f98
 800985c:	20000ac0 	.word	0x20000ac0
 8009860:	20000f80 	.word	0x20000f80
 8009864:	20000f50 	.word	0x20000f50
 8009868:	20000f4c 	.word	0x20000f4c
 800986c:	20000fb4 	.word	0x20000fb4

08009870 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08a      	sub	sp, #40	; 0x28
 8009874:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009876:	2300      	movs	r3, #0
 8009878:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800987a:	f000 fb07 	bl	8009e8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800987e:	4b1c      	ldr	r3, [pc, #112]	; (80098f0 <xTimerCreateTimerTask+0x80>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d021      	beq.n	80098ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800988a:	2300      	movs	r3, #0
 800988c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800988e:	1d3a      	adds	r2, r7, #4
 8009890:	f107 0108 	add.w	r1, r7, #8
 8009894:	f107 030c 	add.w	r3, r7, #12
 8009898:	4618      	mov	r0, r3
 800989a:	f7fd ffe5 	bl	8007868 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800989e:	6879      	ldr	r1, [r7, #4]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	9202      	str	r2, [sp, #8]
 80098a6:	9301      	str	r3, [sp, #4]
 80098a8:	2302      	movs	r3, #2
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	2300      	movs	r3, #0
 80098ae:	460a      	mov	r2, r1
 80098b0:	4910      	ldr	r1, [pc, #64]	; (80098f4 <xTimerCreateTimerTask+0x84>)
 80098b2:	4811      	ldr	r0, [pc, #68]	; (80098f8 <xTimerCreateTimerTask+0x88>)
 80098b4:	f7fe ffa6 	bl	8008804 <xTaskCreateStatic>
 80098b8:	4603      	mov	r3, r0
 80098ba:	4a10      	ldr	r2, [pc, #64]	; (80098fc <xTimerCreateTimerTask+0x8c>)
 80098bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098be:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <xTimerCreateTimerTask+0x8c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098c6:	2301      	movs	r3, #1
 80098c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10a      	bne.n	80098e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	613b      	str	r3, [r7, #16]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098e6:	697b      	ldr	r3, [r7, #20]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20000ff0 	.word	0x20000ff0
 80098f4:	0800a9fc 	.word	0x0800a9fc
 80098f8:	08009a35 	.word	0x08009a35
 80098fc:	20000ff4 	.word	0x20000ff4

08009900 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b08a      	sub	sp, #40	; 0x28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800990e:	2300      	movs	r3, #0
 8009910:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	623b      	str	r3, [r7, #32]
}
 800992a:	bf00      	nop
 800992c:	e7fe      	b.n	800992c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800992e:	4b1a      	ldr	r3, [pc, #104]	; (8009998 <xTimerGenericCommand+0x98>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d02a      	beq.n	800998c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b05      	cmp	r3, #5
 8009946:	dc18      	bgt.n	800997a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009948:	f7ff fdb4 	bl	80094b4 <xTaskGetSchedulerState>
 800994c:	4603      	mov	r3, r0
 800994e:	2b02      	cmp	r3, #2
 8009950:	d109      	bne.n	8009966 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009952:	4b11      	ldr	r3, [pc, #68]	; (8009998 <xTimerGenericCommand+0x98>)
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	f107 0110 	add.w	r1, r7, #16
 800995a:	2300      	movs	r3, #0
 800995c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995e:	f7fe fa45 	bl	8007dec <xQueueGenericSend>
 8009962:	6278      	str	r0, [r7, #36]	; 0x24
 8009964:	e012      	b.n	800998c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009966:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <xTimerGenericCommand+0x98>)
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f107 0110 	add.w	r1, r7, #16
 800996e:	2300      	movs	r3, #0
 8009970:	2200      	movs	r2, #0
 8009972:	f7fe fa3b 	bl	8007dec <xQueueGenericSend>
 8009976:	6278      	str	r0, [r7, #36]	; 0x24
 8009978:	e008      	b.n	800998c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800997a:	4b07      	ldr	r3, [pc, #28]	; (8009998 <xTimerGenericCommand+0x98>)
 800997c:	6818      	ldr	r0, [r3, #0]
 800997e:	f107 0110 	add.w	r1, r7, #16
 8009982:	2300      	movs	r3, #0
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	f7fe fb2f 	bl	8007fe8 <xQueueGenericSendFromISR>
 800998a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800998e:	4618      	mov	r0, r3
 8009990:	3728      	adds	r7, #40	; 0x28
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20000ff0 	.word	0x20000ff0

0800999c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a6:	4b22      	ldr	r3, [pc, #136]	; (8009a30 <prvProcessExpiredTimer+0x94>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	3304      	adds	r3, #4
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fd fffb 	bl	80079b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d022      	beq.n	8009a0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	699a      	ldr	r2, [r3, #24]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	18d1      	adds	r1, r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	6978      	ldr	r0, [r7, #20]
 80099d6:	f000 f8d1 	bl	8009b7c <prvInsertTimerInActiveList>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d01f      	beq.n	8009a20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099e0:	2300      	movs	r3, #0
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	2300      	movs	r3, #0
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	2100      	movs	r1, #0
 80099ea:	6978      	ldr	r0, [r7, #20]
 80099ec:	f7ff ff88 	bl	8009900 <xTimerGenericCommand>
 80099f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d113      	bne.n	8009a20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	60fb      	str	r3, [r7, #12]
}
 8009a0a:	bf00      	nop
 8009a0c:	e7fe      	b.n	8009a0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a14:	f023 0301 	bic.w	r3, r3, #1
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	6978      	ldr	r0, [r7, #20]
 8009a26:	4798      	blx	r3
}
 8009a28:	bf00      	nop
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	20000fe8 	.word	0x20000fe8

08009a34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a3c:	f107 0308 	add.w	r3, r7, #8
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 f857 	bl	8009af4 <prvGetNextExpireTime>
 8009a46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 f803 	bl	8009a58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a52:	f000 f8d5 	bl	8009c00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a56:	e7f1      	b.n	8009a3c <prvTimerTask+0x8>

08009a58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a62:	f7ff f92b 	bl	8008cbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a66:	f107 0308 	add.w	r3, r7, #8
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 f866 	bl	8009b3c <prvSampleTimeNow>
 8009a70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d130      	bne.n	8009ada <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <prvProcessTimerOrBlockTask+0x3c>
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d806      	bhi.n	8009a94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a86:	f7ff f927 	bl	8008cd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a8a:	68f9      	ldr	r1, [r7, #12]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff ff85 	bl	800999c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a92:	e024      	b.n	8009ade <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d008      	beq.n	8009aac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a9a:	4b13      	ldr	r3, [pc, #76]	; (8009ae8 <prvProcessTimerOrBlockTask+0x90>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <prvProcessTimerOrBlockTask+0x50>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <prvProcessTimerOrBlockTask+0x52>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009aac:	4b0f      	ldr	r3, [pc, #60]	; (8009aec <prvProcessTimerOrBlockTask+0x94>)
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	f7fe fe6f 	bl	800879c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009abe:	f7ff f90b 	bl	8008cd8 <xTaskResumeAll>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ac8:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <prvProcessTimerOrBlockTask+0x98>)
 8009aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	f3bf 8f6f 	isb	sy
}
 8009ad8:	e001      	b.n	8009ade <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ada:	f7ff f8fd 	bl	8008cd8 <xTaskResumeAll>
}
 8009ade:	bf00      	nop
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20000fec 	.word	0x20000fec
 8009aec:	20000ff0 	.word	0x20000ff0
 8009af0:	e000ed04 	.word	0xe000ed04

08009af4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009afc:	4b0e      	ldr	r3, [pc, #56]	; (8009b38 <prvGetNextExpireTime+0x44>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <prvGetNextExpireTime+0x16>
 8009b06:	2201      	movs	r2, #1
 8009b08:	e000      	b.n	8009b0c <prvGetNextExpireTime+0x18>
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d105      	bne.n	8009b24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b18:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <prvGetNextExpireTime+0x44>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	e001      	b.n	8009b28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b28:	68fb      	ldr	r3, [r7, #12]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20000fe8 	.word	0x20000fe8

08009b3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b44:	f7ff f966 	bl	8008e14 <xTaskGetTickCount>
 8009b48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b4a:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <prvSampleTimeNow+0x3c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d205      	bcs.n	8009b60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b54:	f000 f936 	bl	8009dc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	e002      	b.n	8009b66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b66:	4a04      	ldr	r2, [pc, #16]	; (8009b78 <prvSampleTimeNow+0x3c>)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20000ff8 	.word	0x20000ff8

08009b7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
 8009b88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d812      	bhi.n	8009bc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	1ad2      	subs	r2, r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d302      	bcc.n	8009bb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	617b      	str	r3, [r7, #20]
 8009bb4:	e01b      	b.n	8009bee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bb6:	4b10      	ldr	r3, [pc, #64]	; (8009bf8 <prvInsertTimerInActiveList+0x7c>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	f7fd febc 	bl	800793e <vListInsert>
 8009bc6:	e012      	b.n	8009bee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d206      	bcs.n	8009bde <prvInsertTimerInActiveList+0x62>
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d302      	bcc.n	8009bde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	617b      	str	r3, [r7, #20]
 8009bdc:	e007      	b.n	8009bee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bde:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <prvInsertTimerInActiveList+0x80>)
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3304      	adds	r3, #4
 8009be6:	4619      	mov	r1, r3
 8009be8:	4610      	mov	r0, r2
 8009bea:	f7fd fea8 	bl	800793e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bee:	697b      	ldr	r3, [r7, #20]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	20000fec 	.word	0x20000fec
 8009bfc:	20000fe8 	.word	0x20000fe8

08009c00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08e      	sub	sp, #56	; 0x38
 8009c04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c06:	e0ca      	b.n	8009d9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	da18      	bge.n	8009c40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c0e:	1d3b      	adds	r3, r7, #4
 8009c10:	3304      	adds	r3, #4
 8009c12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10a      	bne.n	8009c30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	61fb      	str	r3, [r7, #28]
}
 8009c2c:	bf00      	nop
 8009c2e:	e7fe      	b.n	8009c2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c36:	6850      	ldr	r0, [r2, #4]
 8009c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c3a:	6892      	ldr	r2, [r2, #8]
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f2c0 80aa 	blt.w	8009d9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d004      	beq.n	8009c5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	3304      	adds	r3, #4
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fd fea9 	bl	80079b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c5e:	463b      	mov	r3, r7
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff ff6b 	bl	8009b3c <prvSampleTimeNow>
 8009c66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b09      	cmp	r3, #9
 8009c6c:	f200 8097 	bhi.w	8009d9e <prvProcessReceivedCommands+0x19e>
 8009c70:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <prvProcessReceivedCommands+0x78>)
 8009c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c76:	bf00      	nop
 8009c78:	08009ca1 	.word	0x08009ca1
 8009c7c:	08009ca1 	.word	0x08009ca1
 8009c80:	08009ca1 	.word	0x08009ca1
 8009c84:	08009d15 	.word	0x08009d15
 8009c88:	08009d29 	.word	0x08009d29
 8009c8c:	08009d73 	.word	0x08009d73
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009ca1 	.word	0x08009ca1
 8009c98:	08009d15 	.word	0x08009d15
 8009c9c:	08009d29 	.word	0x08009d29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ca6:	f043 0301 	orr.w	r3, r3, #1
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	18d1      	adds	r1, r2, r3
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc0:	f7ff ff5c 	bl	8009b7c <prvInsertTimerInActiveList>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d069      	beq.n	8009d9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cd8:	f003 0304 	and.w	r3, r3, #4
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d05e      	beq.n	8009d9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	441a      	add	r2, r3
 8009ce8:	2300      	movs	r3, #0
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	2300      	movs	r3, #0
 8009cee:	2100      	movs	r1, #0
 8009cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cf2:	f7ff fe05 	bl	8009900 <xTimerGenericCommand>
 8009cf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d14f      	bne.n	8009d9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	61bb      	str	r3, [r7, #24]
}
 8009d10:	bf00      	nop
 8009d12:	e7fe      	b.n	8009d12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d1a:	f023 0301 	bic.w	r3, r3, #1
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d26:	e03a      	b.n	8009d9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d2e:	f043 0301 	orr.w	r3, r3, #1
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	617b      	str	r3, [r7, #20]
}
 8009d5a:	bf00      	nop
 8009d5c:	e7fe      	b.n	8009d5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	699a      	ldr	r2, [r3, #24]
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	18d1      	adds	r1, r2, r3
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d6c:	f7ff ff06 	bl	8009b7c <prvInsertTimerInActiveList>
					break;
 8009d70:	e015      	b.n	8009d9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d103      	bne.n	8009d88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d82:	f000 fbdd 	bl	800a540 <vPortFree>
 8009d86:	e00a      	b.n	8009d9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d8e:	f023 0301 	bic.w	r3, r3, #1
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d9a:	e000      	b.n	8009d9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d9e:	4b08      	ldr	r3, [pc, #32]	; (8009dc0 <prvProcessReceivedCommands+0x1c0>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	1d39      	adds	r1, r7, #4
 8009da4:	2200      	movs	r2, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe f9ba 	bl	8008120 <xQueueReceive>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f47f af2a 	bne.w	8009c08 <prvProcessReceivedCommands+0x8>
	}
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop
 8009db8:	3730      	adds	r7, #48	; 0x30
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20000ff0 	.word	0x20000ff0

08009dc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dca:	e048      	b.n	8009e5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dcc:	4b2d      	ldr	r3, [pc, #180]	; (8009e84 <prvSwitchTimerLists+0xc0>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd6:	4b2b      	ldr	r3, [pc, #172]	; (8009e84 <prvSwitchTimerLists+0xc0>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3304      	adds	r3, #4
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fd fde3 	bl	80079b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d02e      	beq.n	8009e5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	4413      	add	r3, r2
 8009e08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d90e      	bls.n	8009e30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e1e:	4b19      	ldr	r3, [pc, #100]	; (8009e84 <prvSwitchTimerLists+0xc0>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3304      	adds	r3, #4
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f7fd fd88 	bl	800793e <vListInsert>
 8009e2e:	e016      	b.n	8009e5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e30:	2300      	movs	r3, #0
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	2300      	movs	r3, #0
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	2100      	movs	r1, #0
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7ff fd60 	bl	8009900 <xTimerGenericCommand>
 8009e40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	603b      	str	r3, [r7, #0]
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e5e:	4b09      	ldr	r3, [pc, #36]	; (8009e84 <prvSwitchTimerLists+0xc0>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1b1      	bne.n	8009dcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e68:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <prvSwitchTimerLists+0xc0>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e6e:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <prvSwitchTimerLists+0xc4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a04      	ldr	r2, [pc, #16]	; (8009e84 <prvSwitchTimerLists+0xc0>)
 8009e74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e76:	4a04      	ldr	r2, [pc, #16]	; (8009e88 <prvSwitchTimerLists+0xc4>)
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	6013      	str	r3, [r2, #0]
}
 8009e7c:	bf00      	nop
 8009e7e:	3718      	adds	r7, #24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	20000fe8 	.word	0x20000fe8
 8009e88:	20000fec 	.word	0x20000fec

08009e8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e92:	f000 f967 	bl	800a164 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e96:	4b15      	ldr	r3, [pc, #84]	; (8009eec <prvCheckForValidListAndQueue+0x60>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d120      	bne.n	8009ee0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e9e:	4814      	ldr	r0, [pc, #80]	; (8009ef0 <prvCheckForValidListAndQueue+0x64>)
 8009ea0:	f7fd fcfc 	bl	800789c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ea4:	4813      	ldr	r0, [pc, #76]	; (8009ef4 <prvCheckForValidListAndQueue+0x68>)
 8009ea6:	f7fd fcf9 	bl	800789c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009eaa:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <prvCheckForValidListAndQueue+0x6c>)
 8009eac:	4a10      	ldr	r2, [pc, #64]	; (8009ef0 <prvCheckForValidListAndQueue+0x64>)
 8009eae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009eb0:	4b12      	ldr	r3, [pc, #72]	; (8009efc <prvCheckForValidListAndQueue+0x70>)
 8009eb2:	4a10      	ldr	r2, [pc, #64]	; (8009ef4 <prvCheckForValidListAndQueue+0x68>)
 8009eb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	4b11      	ldr	r3, [pc, #68]	; (8009f00 <prvCheckForValidListAndQueue+0x74>)
 8009ebc:	4a11      	ldr	r2, [pc, #68]	; (8009f04 <prvCheckForValidListAndQueue+0x78>)
 8009ebe:	2110      	movs	r1, #16
 8009ec0:	200a      	movs	r0, #10
 8009ec2:	f7fd fe07 	bl	8007ad4 <xQueueGenericCreateStatic>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4a08      	ldr	r2, [pc, #32]	; (8009eec <prvCheckForValidListAndQueue+0x60>)
 8009eca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ecc:	4b07      	ldr	r3, [pc, #28]	; (8009eec <prvCheckForValidListAndQueue+0x60>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d005      	beq.n	8009ee0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ed4:	4b05      	ldr	r3, [pc, #20]	; (8009eec <prvCheckForValidListAndQueue+0x60>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	490b      	ldr	r1, [pc, #44]	; (8009f08 <prvCheckForValidListAndQueue+0x7c>)
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe fc34 	bl	8008748 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ee0:	f000 f970 	bl	800a1c4 <vPortExitCritical>
}
 8009ee4:	bf00      	nop
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20000ff0 	.word	0x20000ff0
 8009ef0:	20000fc0 	.word	0x20000fc0
 8009ef4:	20000fd4 	.word	0x20000fd4
 8009ef8:	20000fe8 	.word	0x20000fe8
 8009efc:	20000fec 	.word	0x20000fec
 8009f00:	2000109c 	.word	0x2000109c
 8009f04:	20000ffc 	.word	0x20000ffc
 8009f08:	0800aa04 	.word	0x0800aa04

08009f0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3b04      	subs	r3, #4
 8009f1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3b04      	subs	r3, #4
 8009f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f023 0201 	bic.w	r2, r3, #1
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3b04      	subs	r3, #4
 8009f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f3c:	4a0c      	ldr	r2, [pc, #48]	; (8009f70 <pxPortInitialiseStack+0x64>)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3b14      	subs	r3, #20
 8009f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3b04      	subs	r3, #4
 8009f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f06f 0202 	mvn.w	r2, #2
 8009f5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	3b20      	subs	r3, #32
 8009f60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f62:	68fb      	ldr	r3, [r7, #12]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	08009f75 	.word	0x08009f75

08009f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f7e:	4b12      	ldr	r3, [pc, #72]	; (8009fc8 <prvTaskExitError+0x54>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f86:	d00a      	beq.n	8009f9e <prvTaskExitError+0x2a>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	60fb      	str	r3, [r7, #12]
}
 8009f9a:	bf00      	nop
 8009f9c:	e7fe      	b.n	8009f9c <prvTaskExitError+0x28>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	60bb      	str	r3, [r7, #8]
}
 8009fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fb2:	bf00      	nop
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d0fc      	beq.n	8009fb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fba:	bf00      	nop
 8009fbc:	bf00      	nop
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	2000000c 	.word	0x2000000c
 8009fcc:	00000000 	.word	0x00000000

08009fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fd0:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <pxCurrentTCBConst2>)
 8009fd2:	6819      	ldr	r1, [r3, #0]
 8009fd4:	6808      	ldr	r0, [r1, #0]
 8009fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fda:	f380 8809 	msr	PSP, r0
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f04f 0000 	mov.w	r0, #0
 8009fe6:	f380 8811 	msr	BASEPRI, r0
 8009fea:	4770      	bx	lr
 8009fec:	f3af 8000 	nop.w

08009ff0 <pxCurrentTCBConst2>:
 8009ff0:	20000ac0 	.word	0x20000ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop

08009ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ff8:	4808      	ldr	r0, [pc, #32]	; (800a01c <prvPortStartFirstTask+0x24>)
 8009ffa:	6800      	ldr	r0, [r0, #0]
 8009ffc:	6800      	ldr	r0, [r0, #0]
 8009ffe:	f380 8808 	msr	MSP, r0
 800a002:	f04f 0000 	mov.w	r0, #0
 800a006:	f380 8814 	msr	CONTROL, r0
 800a00a:	b662      	cpsie	i
 800a00c:	b661      	cpsie	f
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	df00      	svc	0
 800a018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a01a:	bf00      	nop
 800a01c:	e000ed08 	.word	0xe000ed08

0800a020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a026:	4b46      	ldr	r3, [pc, #280]	; (800a140 <xPortStartScheduler+0x120>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a46      	ldr	r2, [pc, #280]	; (800a144 <xPortStartScheduler+0x124>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d10a      	bne.n	800a046 <xPortStartScheduler+0x26>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	613b      	str	r3, [r7, #16]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a046:	4b3e      	ldr	r3, [pc, #248]	; (800a140 <xPortStartScheduler+0x120>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a3f      	ldr	r2, [pc, #252]	; (800a148 <xPortStartScheduler+0x128>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10a      	bne.n	800a066 <xPortStartScheduler+0x46>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	60fb      	str	r3, [r7, #12]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a066:	4b39      	ldr	r3, [pc, #228]	; (800a14c <xPortStartScheduler+0x12c>)
 800a068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	22ff      	movs	r2, #255	; 0xff
 800a076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	4b31      	ldr	r3, [pc, #196]	; (800a150 <xPortStartScheduler+0x130>)
 800a08c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a08e:	4b31      	ldr	r3, [pc, #196]	; (800a154 <xPortStartScheduler+0x134>)
 800a090:	2207      	movs	r2, #7
 800a092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a094:	e009      	b.n	800a0aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a096:	4b2f      	ldr	r3, [pc, #188]	; (800a154 <xPortStartScheduler+0x134>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	4a2d      	ldr	r2, [pc, #180]	; (800a154 <xPortStartScheduler+0x134>)
 800a09e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0a0:	78fb      	ldrb	r3, [r7, #3]
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b2:	2b80      	cmp	r3, #128	; 0x80
 800a0b4:	d0ef      	beq.n	800a096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0b6:	4b27      	ldr	r3, [pc, #156]	; (800a154 <xPortStartScheduler+0x134>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f1c3 0307 	rsb	r3, r3, #7
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d00a      	beq.n	800a0d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	60bb      	str	r3, [r7, #8]
}
 800a0d4:	bf00      	nop
 800a0d6:	e7fe      	b.n	800a0d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0d8:	4b1e      	ldr	r3, [pc, #120]	; (800a154 <xPortStartScheduler+0x134>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	021b      	lsls	r3, r3, #8
 800a0de:	4a1d      	ldr	r2, [pc, #116]	; (800a154 <xPortStartScheduler+0x134>)
 800a0e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0e2:	4b1c      	ldr	r3, [pc, #112]	; (800a154 <xPortStartScheduler+0x134>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0ea:	4a1a      	ldr	r2, [pc, #104]	; (800a154 <xPortStartScheduler+0x134>)
 800a0ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0f6:	4b18      	ldr	r3, [pc, #96]	; (800a158 <xPortStartScheduler+0x138>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a17      	ldr	r2, [pc, #92]	; (800a158 <xPortStartScheduler+0x138>)
 800a0fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a102:	4b15      	ldr	r3, [pc, #84]	; (800a158 <xPortStartScheduler+0x138>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a14      	ldr	r2, [pc, #80]	; (800a158 <xPortStartScheduler+0x138>)
 800a108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a10c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a10e:	f000 f8dd 	bl	800a2cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a112:	4b12      	ldr	r3, [pc, #72]	; (800a15c <xPortStartScheduler+0x13c>)
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a118:	f000 f8fc 	bl	800a314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a11c:	4b10      	ldr	r3, [pc, #64]	; (800a160 <xPortStartScheduler+0x140>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a0f      	ldr	r2, [pc, #60]	; (800a160 <xPortStartScheduler+0x140>)
 800a122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a128:	f7ff ff66 	bl	8009ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a12c:	f7fe ff3c 	bl	8008fa8 <vTaskSwitchContext>
	prvTaskExitError();
 800a130:	f7ff ff20 	bl	8009f74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	e000ed00 	.word	0xe000ed00
 800a144:	410fc271 	.word	0x410fc271
 800a148:	410fc270 	.word	0x410fc270
 800a14c:	e000e400 	.word	0xe000e400
 800a150:	200010ec 	.word	0x200010ec
 800a154:	200010f0 	.word	0x200010f0
 800a158:	e000ed20 	.word	0xe000ed20
 800a15c:	2000000c 	.word	0x2000000c
 800a160:	e000ef34 	.word	0xe000ef34

0800a164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	607b      	str	r3, [r7, #4]
}
 800a17c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a17e:	4b0f      	ldr	r3, [pc, #60]	; (800a1bc <vPortEnterCritical+0x58>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3301      	adds	r3, #1
 800a184:	4a0d      	ldr	r2, [pc, #52]	; (800a1bc <vPortEnterCritical+0x58>)
 800a186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a188:	4b0c      	ldr	r3, [pc, #48]	; (800a1bc <vPortEnterCritical+0x58>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d10f      	bne.n	800a1b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a190:	4b0b      	ldr	r3, [pc, #44]	; (800a1c0 <vPortEnterCritical+0x5c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00a      	beq.n	800a1b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	603b      	str	r3, [r7, #0]
}
 800a1ac:	bf00      	nop
 800a1ae:	e7fe      	b.n	800a1ae <vPortEnterCritical+0x4a>
	}
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	2000000c 	.word	0x2000000c
 800a1c0:	e000ed04 	.word	0xe000ed04

0800a1c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1ca:	4b12      	ldr	r3, [pc, #72]	; (800a214 <vPortExitCritical+0x50>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10a      	bne.n	800a1e8 <vPortExitCritical+0x24>
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	607b      	str	r3, [r7, #4]
}
 800a1e4:	bf00      	nop
 800a1e6:	e7fe      	b.n	800a1e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1e8:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <vPortExitCritical+0x50>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	4a09      	ldr	r2, [pc, #36]	; (800a214 <vPortExitCritical+0x50>)
 800a1f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1f2:	4b08      	ldr	r3, [pc, #32]	; (800a214 <vPortExitCritical+0x50>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d105      	bne.n	800a206 <vPortExitCritical+0x42>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	f383 8811 	msr	BASEPRI, r3
}
 800a204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a206:	bf00      	nop
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	2000000c 	.word	0x2000000c
	...

0800a220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a220:	f3ef 8009 	mrs	r0, PSP
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	4b15      	ldr	r3, [pc, #84]	; (800a280 <pxCurrentTCBConst>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	f01e 0f10 	tst.w	lr, #16
 800a230:	bf08      	it	eq
 800a232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23a:	6010      	str	r0, [r2, #0]
 800a23c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a240:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a244:	f380 8811 	msr	BASEPRI, r0
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f7fe feaa 	bl	8008fa8 <vTaskSwitchContext>
 800a254:	f04f 0000 	mov.w	r0, #0
 800a258:	f380 8811 	msr	BASEPRI, r0
 800a25c:	bc09      	pop	{r0, r3}
 800a25e:	6819      	ldr	r1, [r3, #0]
 800a260:	6808      	ldr	r0, [r1, #0]
 800a262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a266:	f01e 0f10 	tst.w	lr, #16
 800a26a:	bf08      	it	eq
 800a26c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a270:	f380 8809 	msr	PSP, r0
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	f3af 8000 	nop.w

0800a280 <pxCurrentTCBConst>:
 800a280:	20000ac0 	.word	0x20000ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop

0800a288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	607b      	str	r3, [r7, #4]
}
 800a2a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2a2:	f7fe fdc7 	bl	8008e34 <xTaskIncrementTick>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2ac:	4b06      	ldr	r3, [pc, #24]	; (800a2c8 <xPortSysTickHandler+0x40>)
 800a2ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	f383 8811 	msr	BASEPRI, r3
}
 800a2be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2d0:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <vPortSetupTimerInterrupt+0x34>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <vPortSetupTimerInterrupt+0x38>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <vPortSetupTimerInterrupt+0x3c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a0a      	ldr	r2, [pc, #40]	; (800a30c <vPortSetupTimerInterrupt+0x40>)
 800a2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e6:	099b      	lsrs	r3, r3, #6
 800a2e8:	4a09      	ldr	r2, [pc, #36]	; (800a310 <vPortSetupTimerInterrupt+0x44>)
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2ee:	4b04      	ldr	r3, [pc, #16]	; (800a300 <vPortSetupTimerInterrupt+0x34>)
 800a2f0:	2207      	movs	r2, #7
 800a2f2:	601a      	str	r2, [r3, #0]
}
 800a2f4:	bf00      	nop
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	e000e010 	.word	0xe000e010
 800a304:	e000e018 	.word	0xe000e018
 800a308:	20000000 	.word	0x20000000
 800a30c:	10624dd3 	.word	0x10624dd3
 800a310:	e000e014 	.word	0xe000e014

0800a314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a324 <vPortEnableVFP+0x10>
 800a318:	6801      	ldr	r1, [r0, #0]
 800a31a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a31e:	6001      	str	r1, [r0, #0]
 800a320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a322:	bf00      	nop
 800a324:	e000ed88 	.word	0xe000ed88

0800a328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a32e:	f3ef 8305 	mrs	r3, IPSR
 800a332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b0f      	cmp	r3, #15
 800a338:	d914      	bls.n	800a364 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a33a:	4a17      	ldr	r2, [pc, #92]	; (800a398 <vPortValidateInterruptPriority+0x70>)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a344:	4b15      	ldr	r3, [pc, #84]	; (800a39c <vPortValidateInterruptPriority+0x74>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	7afa      	ldrb	r2, [r7, #11]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d20a      	bcs.n	800a364 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	607b      	str	r3, [r7, #4]
}
 800a360:	bf00      	nop
 800a362:	e7fe      	b.n	800a362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a364:	4b0e      	ldr	r3, [pc, #56]	; (800a3a0 <vPortValidateInterruptPriority+0x78>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a36c:	4b0d      	ldr	r3, [pc, #52]	; (800a3a4 <vPortValidateInterruptPriority+0x7c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	429a      	cmp	r2, r3
 800a372:	d90a      	bls.n	800a38a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	603b      	str	r3, [r7, #0]
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <vPortValidateInterruptPriority+0x60>
	}
 800a38a:	bf00      	nop
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	e000e3f0 	.word	0xe000e3f0
 800a39c:	200010ec 	.word	0x200010ec
 800a3a0:	e000ed0c 	.word	0xe000ed0c
 800a3a4:	200010f0 	.word	0x200010f0

0800a3a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	; 0x28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3b4:	f7fe fc82 	bl	8008cbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3b8:	4b5b      	ldr	r3, [pc, #364]	; (800a528 <pvPortMalloc+0x180>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3c0:	f000 f920 	bl	800a604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3c4:	4b59      	ldr	r3, [pc, #356]	; (800a52c <pvPortMalloc+0x184>)
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f040 8093 	bne.w	800a4f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01d      	beq.n	800a414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3d8:	2208      	movs	r2, #8
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4413      	add	r3, r2
 800a3de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d014      	beq.n	800a414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f023 0307 	bic.w	r3, r3, #7
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <pvPortMalloc+0x6c>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	617b      	str	r3, [r7, #20]
}
 800a410:	bf00      	nop
 800a412:	e7fe      	b.n	800a412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d06e      	beq.n	800a4f8 <pvPortMalloc+0x150>
 800a41a:	4b45      	ldr	r3, [pc, #276]	; (800a530 <pvPortMalloc+0x188>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	429a      	cmp	r2, r3
 800a422:	d869      	bhi.n	800a4f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a424:	4b43      	ldr	r3, [pc, #268]	; (800a534 <pvPortMalloc+0x18c>)
 800a426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a428:	4b42      	ldr	r3, [pc, #264]	; (800a534 <pvPortMalloc+0x18c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a42e:	e004      	b.n	800a43a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d903      	bls.n	800a44c <pvPortMalloc+0xa4>
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1f1      	bne.n	800a430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a44c:	4b36      	ldr	r3, [pc, #216]	; (800a528 <pvPortMalloc+0x180>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a452:	429a      	cmp	r2, r3
 800a454:	d050      	beq.n	800a4f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2208      	movs	r2, #8
 800a45c:	4413      	add	r3, r2
 800a45e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	1ad2      	subs	r2, r2, r3
 800a470:	2308      	movs	r3, #8
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	429a      	cmp	r2, r3
 800a476:	d91f      	bls.n	800a4b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4413      	add	r3, r2
 800a47e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	613b      	str	r3, [r7, #16]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	1ad2      	subs	r2, r2, r3
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4b2:	69b8      	ldr	r0, [r7, #24]
 800a4b4:	f000 f908 	bl	800a6c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4b8:	4b1d      	ldr	r3, [pc, #116]	; (800a530 <pvPortMalloc+0x188>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	4a1b      	ldr	r2, [pc, #108]	; (800a530 <pvPortMalloc+0x188>)
 800a4c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4c6:	4b1a      	ldr	r3, [pc, #104]	; (800a530 <pvPortMalloc+0x188>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	; (800a538 <pvPortMalloc+0x190>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d203      	bcs.n	800a4da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4d2:	4b17      	ldr	r3, [pc, #92]	; (800a530 <pvPortMalloc+0x188>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a18      	ldr	r2, [pc, #96]	; (800a538 <pvPortMalloc+0x190>)
 800a4d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	4b13      	ldr	r3, [pc, #76]	; (800a52c <pvPortMalloc+0x184>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <pvPortMalloc+0x194>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	4a11      	ldr	r2, [pc, #68]	; (800a53c <pvPortMalloc+0x194>)
 800a4f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4f8:	f7fe fbee 	bl	8008cd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <pvPortMalloc+0x174>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60fb      	str	r3, [r7, #12]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <pvPortMalloc+0x172>
	return pvReturn;
 800a51c:	69fb      	ldr	r3, [r7, #28]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3728      	adds	r7, #40	; 0x28
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20001cb4 	.word	0x20001cb4
 800a52c:	20001cc8 	.word	0x20001cc8
 800a530:	20001cb8 	.word	0x20001cb8
 800a534:	20001cac 	.word	0x20001cac
 800a538:	20001cbc 	.word	0x20001cbc
 800a53c:	20001cc0 	.word	0x20001cc0

0800a540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d04d      	beq.n	800a5ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a552:	2308      	movs	r3, #8
 800a554:	425b      	negs	r3, r3
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	4413      	add	r3, r2
 800a55a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	4b24      	ldr	r3, [pc, #144]	; (800a5f8 <vPortFree+0xb8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4013      	ands	r3, r2
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10a      	bne.n	800a584 <vPortFree+0x44>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	60fb      	str	r3, [r7, #12]
}
 800a580:	bf00      	nop
 800a582:	e7fe      	b.n	800a582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00a      	beq.n	800a5a2 <vPortFree+0x62>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	60bb      	str	r3, [r7, #8]
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	4b14      	ldr	r3, [pc, #80]	; (800a5f8 <vPortFree+0xb8>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01e      	beq.n	800a5ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d11a      	bne.n	800a5ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <vPortFree+0xb8>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	43db      	mvns	r3, r3
 800a5c2:	401a      	ands	r2, r3
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5c8:	f7fe fb78 	bl	8008cbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	4b0a      	ldr	r3, [pc, #40]	; (800a5fc <vPortFree+0xbc>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	4a09      	ldr	r2, [pc, #36]	; (800a5fc <vPortFree+0xbc>)
 800a5d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5da:	6938      	ldr	r0, [r7, #16]
 800a5dc:	f000 f874 	bl	800a6c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5e0:	4b07      	ldr	r3, [pc, #28]	; (800a600 <vPortFree+0xc0>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	4a06      	ldr	r2, [pc, #24]	; (800a600 <vPortFree+0xc0>)
 800a5e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5ea:	f7fe fb75 	bl	8008cd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5ee:	bf00      	nop
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20001cc8 	.word	0x20001cc8
 800a5fc:	20001cb8 	.word	0x20001cb8
 800a600:	20001cc4 	.word	0x20001cc4

0800a604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a60a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a60e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a610:	4b27      	ldr	r3, [pc, #156]	; (800a6b0 <prvHeapInit+0xac>)
 800a612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f003 0307 	and.w	r3, r3, #7
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00c      	beq.n	800a638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3307      	adds	r3, #7
 800a622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f023 0307 	bic.w	r3, r3, #7
 800a62a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	4a1f      	ldr	r2, [pc, #124]	; (800a6b0 <prvHeapInit+0xac>)
 800a634:	4413      	add	r3, r2
 800a636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a63c:	4a1d      	ldr	r2, [pc, #116]	; (800a6b4 <prvHeapInit+0xb0>)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a642:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <prvHeapInit+0xb0>)
 800a644:	2200      	movs	r2, #0
 800a646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	4413      	add	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a650:	2208      	movs	r2, #8
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	1a9b      	subs	r3, r3, r2
 800a656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0307 	bic.w	r3, r3, #7
 800a65e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4a15      	ldr	r2, [pc, #84]	; (800a6b8 <prvHeapInit+0xb4>)
 800a664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a666:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <prvHeapInit+0xb4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2200      	movs	r2, #0
 800a66c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a66e:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <prvHeapInit+0xb4>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	1ad2      	subs	r2, r2, r3
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a684:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <prvHeapInit+0xb4>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	4a0a      	ldr	r2, [pc, #40]	; (800a6bc <prvHeapInit+0xb8>)
 800a692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	4a09      	ldr	r2, [pc, #36]	; (800a6c0 <prvHeapInit+0xbc>)
 800a69a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a69c:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <prvHeapInit+0xc0>)
 800a69e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6a2:	601a      	str	r2, [r3, #0]
}
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	200010f4 	.word	0x200010f4
 800a6b4:	20001cac 	.word	0x20001cac
 800a6b8:	20001cb4 	.word	0x20001cb4
 800a6bc:	20001cbc 	.word	0x20001cbc
 800a6c0:	20001cb8 	.word	0x20001cb8
 800a6c4:	20001cc8 	.word	0x20001cc8

0800a6c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6d0:	4b28      	ldr	r3, [pc, #160]	; (800a774 <prvInsertBlockIntoFreeList+0xac>)
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	e002      	b.n	800a6dc <prvInsertBlockIntoFreeList+0x14>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	60fb      	str	r3, [r7, #12]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d8f7      	bhi.n	800a6d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d108      	bne.n	800a70a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	441a      	add	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	441a      	add	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d118      	bne.n	800a750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	4b15      	ldr	r3, [pc, #84]	; (800a778 <prvInsertBlockIntoFreeList+0xb0>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	429a      	cmp	r2, r3
 800a728:	d00d      	beq.n	800a746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	441a      	add	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	e008      	b.n	800a758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a746:	4b0c      	ldr	r3, [pc, #48]	; (800a778 <prvInsertBlockIntoFreeList+0xb0>)
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	e003      	b.n	800a758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d002      	beq.n	800a766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a766:	bf00      	nop
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	20001cac 	.word	0x20001cac
 800a778:	20001cb4 	.word	0x20001cb4

0800a77c <__libc_init_array>:
 800a77c:	b570      	push	{r4, r5, r6, lr}
 800a77e:	4d0d      	ldr	r5, [pc, #52]	; (800a7b4 <__libc_init_array+0x38>)
 800a780:	4c0d      	ldr	r4, [pc, #52]	; (800a7b8 <__libc_init_array+0x3c>)
 800a782:	1b64      	subs	r4, r4, r5
 800a784:	10a4      	asrs	r4, r4, #2
 800a786:	2600      	movs	r6, #0
 800a788:	42a6      	cmp	r6, r4
 800a78a:	d109      	bne.n	800a7a0 <__libc_init_array+0x24>
 800a78c:	4d0b      	ldr	r5, [pc, #44]	; (800a7bc <__libc_init_array+0x40>)
 800a78e:	4c0c      	ldr	r4, [pc, #48]	; (800a7c0 <__libc_init_array+0x44>)
 800a790:	f000 f8f2 	bl	800a978 <_init>
 800a794:	1b64      	subs	r4, r4, r5
 800a796:	10a4      	asrs	r4, r4, #2
 800a798:	2600      	movs	r6, #0
 800a79a:	42a6      	cmp	r6, r4
 800a79c:	d105      	bne.n	800a7aa <__libc_init_array+0x2e>
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a4:	4798      	blx	r3
 800a7a6:	3601      	adds	r6, #1
 800a7a8:	e7ee      	b.n	800a788 <__libc_init_array+0xc>
 800a7aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ae:	4798      	blx	r3
 800a7b0:	3601      	adds	r6, #1
 800a7b2:	e7f2      	b.n	800a79a <__libc_init_array+0x1e>
 800a7b4:	0800ab38 	.word	0x0800ab38
 800a7b8:	0800ab38 	.word	0x0800ab38
 800a7bc:	0800ab38 	.word	0x0800ab38
 800a7c0:	0800ab3c 	.word	0x0800ab3c

0800a7c4 <__retarget_lock_acquire_recursive>:
 800a7c4:	4770      	bx	lr

0800a7c6 <__retarget_lock_release_recursive>:
 800a7c6:	4770      	bx	lr

0800a7c8 <memcpy>:
 800a7c8:	440a      	add	r2, r1
 800a7ca:	4291      	cmp	r1, r2
 800a7cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7d0:	d100      	bne.n	800a7d4 <memcpy+0xc>
 800a7d2:	4770      	bx	lr
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7de:	4291      	cmp	r1, r2
 800a7e0:	d1f9      	bne.n	800a7d6 <memcpy+0xe>
 800a7e2:	bd10      	pop	{r4, pc}

0800a7e4 <memset>:
 800a7e4:	4402      	add	r2, r0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d100      	bne.n	800a7ee <memset+0xa>
 800a7ec:	4770      	bx	lr
 800a7ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a7f2:	e7f9      	b.n	800a7e8 <memset+0x4>

0800a7f4 <cleanup_glue>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	6809      	ldr	r1, [r1, #0]
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	b109      	cbz	r1, 800a802 <cleanup_glue+0xe>
 800a7fe:	f7ff fff9 	bl	800a7f4 <cleanup_glue>
 800a802:	4621      	mov	r1, r4
 800a804:	4628      	mov	r0, r5
 800a806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a80a:	f000 b869 	b.w	800a8e0 <_free_r>
	...

0800a810 <_reclaim_reent>:
 800a810:	4b2c      	ldr	r3, [pc, #176]	; (800a8c4 <_reclaim_reent+0xb4>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4283      	cmp	r3, r0
 800a816:	b570      	push	{r4, r5, r6, lr}
 800a818:	4604      	mov	r4, r0
 800a81a:	d051      	beq.n	800a8c0 <_reclaim_reent+0xb0>
 800a81c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a81e:	b143      	cbz	r3, 800a832 <_reclaim_reent+0x22>
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d14a      	bne.n	800a8bc <_reclaim_reent+0xac>
 800a826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a828:	6819      	ldr	r1, [r3, #0]
 800a82a:	b111      	cbz	r1, 800a832 <_reclaim_reent+0x22>
 800a82c:	4620      	mov	r0, r4
 800a82e:	f000 f857 	bl	800a8e0 <_free_r>
 800a832:	6961      	ldr	r1, [r4, #20]
 800a834:	b111      	cbz	r1, 800a83c <_reclaim_reent+0x2c>
 800a836:	4620      	mov	r0, r4
 800a838:	f000 f852 	bl	800a8e0 <_free_r>
 800a83c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a83e:	b111      	cbz	r1, 800a846 <_reclaim_reent+0x36>
 800a840:	4620      	mov	r0, r4
 800a842:	f000 f84d 	bl	800a8e0 <_free_r>
 800a846:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a848:	b111      	cbz	r1, 800a850 <_reclaim_reent+0x40>
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 f848 	bl	800a8e0 <_free_r>
 800a850:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a852:	b111      	cbz	r1, 800a85a <_reclaim_reent+0x4a>
 800a854:	4620      	mov	r0, r4
 800a856:	f000 f843 	bl	800a8e0 <_free_r>
 800a85a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a85c:	b111      	cbz	r1, 800a864 <_reclaim_reent+0x54>
 800a85e:	4620      	mov	r0, r4
 800a860:	f000 f83e 	bl	800a8e0 <_free_r>
 800a864:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a866:	b111      	cbz	r1, 800a86e <_reclaim_reent+0x5e>
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 f839 	bl	800a8e0 <_free_r>
 800a86e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a870:	b111      	cbz	r1, 800a878 <_reclaim_reent+0x68>
 800a872:	4620      	mov	r0, r4
 800a874:	f000 f834 	bl	800a8e0 <_free_r>
 800a878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a87a:	b111      	cbz	r1, 800a882 <_reclaim_reent+0x72>
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 f82f 	bl	800a8e0 <_free_r>
 800a882:	69a3      	ldr	r3, [r4, #24]
 800a884:	b1e3      	cbz	r3, 800a8c0 <_reclaim_reent+0xb0>
 800a886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a888:	4620      	mov	r0, r4
 800a88a:	4798      	blx	r3
 800a88c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a88e:	b1b9      	cbz	r1, 800a8c0 <_reclaim_reent+0xb0>
 800a890:	4620      	mov	r0, r4
 800a892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a896:	f7ff bfad 	b.w	800a7f4 <cleanup_glue>
 800a89a:	5949      	ldr	r1, [r1, r5]
 800a89c:	b941      	cbnz	r1, 800a8b0 <_reclaim_reent+0xa0>
 800a89e:	3504      	adds	r5, #4
 800a8a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8a2:	2d80      	cmp	r5, #128	; 0x80
 800a8a4:	68d9      	ldr	r1, [r3, #12]
 800a8a6:	d1f8      	bne.n	800a89a <_reclaim_reent+0x8a>
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 f819 	bl	800a8e0 <_free_r>
 800a8ae:	e7ba      	b.n	800a826 <_reclaim_reent+0x16>
 800a8b0:	680e      	ldr	r6, [r1, #0]
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 f814 	bl	800a8e0 <_free_r>
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	e7ef      	b.n	800a89c <_reclaim_reent+0x8c>
 800a8bc:	2500      	movs	r5, #0
 800a8be:	e7ef      	b.n	800a8a0 <_reclaim_reent+0x90>
 800a8c0:	bd70      	pop	{r4, r5, r6, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20000010 	.word	0x20000010

0800a8c8 <__malloc_lock>:
 800a8c8:	4801      	ldr	r0, [pc, #4]	; (800a8d0 <__malloc_lock+0x8>)
 800a8ca:	f7ff bf7b 	b.w	800a7c4 <__retarget_lock_acquire_recursive>
 800a8ce:	bf00      	nop
 800a8d0:	20001ccc 	.word	0x20001ccc

0800a8d4 <__malloc_unlock>:
 800a8d4:	4801      	ldr	r0, [pc, #4]	; (800a8dc <__malloc_unlock+0x8>)
 800a8d6:	f7ff bf76 	b.w	800a7c6 <__retarget_lock_release_recursive>
 800a8da:	bf00      	nop
 800a8dc:	20001ccc 	.word	0x20001ccc

0800a8e0 <_free_r>:
 800a8e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8e2:	2900      	cmp	r1, #0
 800a8e4:	d044      	beq.n	800a970 <_free_r+0x90>
 800a8e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8ea:	9001      	str	r0, [sp, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a8f2:	bfb8      	it	lt
 800a8f4:	18e4      	addlt	r4, r4, r3
 800a8f6:	f7ff ffe7 	bl	800a8c8 <__malloc_lock>
 800a8fa:	4a1e      	ldr	r2, [pc, #120]	; (800a974 <_free_r+0x94>)
 800a8fc:	9801      	ldr	r0, [sp, #4]
 800a8fe:	6813      	ldr	r3, [r2, #0]
 800a900:	b933      	cbnz	r3, 800a910 <_free_r+0x30>
 800a902:	6063      	str	r3, [r4, #4]
 800a904:	6014      	str	r4, [r2, #0]
 800a906:	b003      	add	sp, #12
 800a908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a90c:	f7ff bfe2 	b.w	800a8d4 <__malloc_unlock>
 800a910:	42a3      	cmp	r3, r4
 800a912:	d908      	bls.n	800a926 <_free_r+0x46>
 800a914:	6825      	ldr	r5, [r4, #0]
 800a916:	1961      	adds	r1, r4, r5
 800a918:	428b      	cmp	r3, r1
 800a91a:	bf01      	itttt	eq
 800a91c:	6819      	ldreq	r1, [r3, #0]
 800a91e:	685b      	ldreq	r3, [r3, #4]
 800a920:	1949      	addeq	r1, r1, r5
 800a922:	6021      	streq	r1, [r4, #0]
 800a924:	e7ed      	b.n	800a902 <_free_r+0x22>
 800a926:	461a      	mov	r2, r3
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	b10b      	cbz	r3, 800a930 <_free_r+0x50>
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	d9fa      	bls.n	800a926 <_free_r+0x46>
 800a930:	6811      	ldr	r1, [r2, #0]
 800a932:	1855      	adds	r5, r2, r1
 800a934:	42a5      	cmp	r5, r4
 800a936:	d10b      	bne.n	800a950 <_free_r+0x70>
 800a938:	6824      	ldr	r4, [r4, #0]
 800a93a:	4421      	add	r1, r4
 800a93c:	1854      	adds	r4, r2, r1
 800a93e:	42a3      	cmp	r3, r4
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	d1e0      	bne.n	800a906 <_free_r+0x26>
 800a944:	681c      	ldr	r4, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	6053      	str	r3, [r2, #4]
 800a94a:	4421      	add	r1, r4
 800a94c:	6011      	str	r1, [r2, #0]
 800a94e:	e7da      	b.n	800a906 <_free_r+0x26>
 800a950:	d902      	bls.n	800a958 <_free_r+0x78>
 800a952:	230c      	movs	r3, #12
 800a954:	6003      	str	r3, [r0, #0]
 800a956:	e7d6      	b.n	800a906 <_free_r+0x26>
 800a958:	6825      	ldr	r5, [r4, #0]
 800a95a:	1961      	adds	r1, r4, r5
 800a95c:	428b      	cmp	r3, r1
 800a95e:	bf04      	itt	eq
 800a960:	6819      	ldreq	r1, [r3, #0]
 800a962:	685b      	ldreq	r3, [r3, #4]
 800a964:	6063      	str	r3, [r4, #4]
 800a966:	bf04      	itt	eq
 800a968:	1949      	addeq	r1, r1, r5
 800a96a:	6021      	streq	r1, [r4, #0]
 800a96c:	6054      	str	r4, [r2, #4]
 800a96e:	e7ca      	b.n	800a906 <_free_r+0x26>
 800a970:	b003      	add	sp, #12
 800a972:	bd30      	pop	{r4, r5, pc}
 800a974:	20001cd0 	.word	0x20001cd0

0800a978 <_init>:
 800a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97a:	bf00      	nop
 800a97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97e:	bc08      	pop	{r3}
 800a980:	469e      	mov	lr, r3
 800a982:	4770      	bx	lr

0800a984 <_fini>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	bf00      	nop
 800a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98a:	bc08      	pop	{r3}
 800a98c:	469e      	mov	lr, r3
 800a98e:	4770      	bx	lr
