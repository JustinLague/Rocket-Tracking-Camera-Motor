
Rocket-Tracking-Camera-Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a410  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a740  0800a740  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a740  0800a740  0001a740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a748  0800a748  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a748  0800a748  0001a748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a74c  0800a74c  0001a74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca0  20000078  0800a7c8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d18  0800a7c8  00021d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ad3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd9  00000000  00000000  00041b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  00045b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  00047620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d28  00000000  00000000  00048f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f45c  00000000  00000000  00072c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffc47  00000000  00000000  000920f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00191d3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007578  00000000  00000000  00191d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a588 	.word	0x0800a588

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a588 	.word	0x0800a588

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_d2uiz>:
 8000558:	004a      	lsls	r2, r1, #1
 800055a:	d211      	bcs.n	8000580 <__aeabi_d2uiz+0x28>
 800055c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000560:	d211      	bcs.n	8000586 <__aeabi_d2uiz+0x2e>
 8000562:	d50d      	bpl.n	8000580 <__aeabi_d2uiz+0x28>
 8000564:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000568:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800056c:	d40e      	bmi.n	800058c <__aeabi_d2uiz+0x34>
 800056e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000576:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800057a:	fa23 f002 	lsr.w	r0, r3, r2
 800057e:	4770      	bx	lr
 8000580:	f04f 0000 	mov.w	r0, #0
 8000584:	4770      	bx	lr
 8000586:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800058a:	d102      	bne.n	8000592 <__aeabi_d2uiz+0x3a>
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	4770      	bx	lr
 8000592:	f04f 0000 	mov.w	r0, #0
 8000596:	4770      	bx	lr

08000598 <__aeabi_uldivmod>:
 8000598:	b953      	cbnz	r3, 80005b0 <__aeabi_uldivmod+0x18>
 800059a:	b94a      	cbnz	r2, 80005b0 <__aeabi_uldivmod+0x18>
 800059c:	2900      	cmp	r1, #0
 800059e:	bf08      	it	eq
 80005a0:	2800      	cmpeq	r0, #0
 80005a2:	bf1c      	itt	ne
 80005a4:	f04f 31ff 	movne.w	r1, #4294967295
 80005a8:	f04f 30ff 	movne.w	r0, #4294967295
 80005ac:	f000 b974 	b.w	8000898 <__aeabi_idiv0>
 80005b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80005b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b8:	f000 f806 	bl	80005c8 <__udivmoddi4>
 80005bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005c4:	b004      	add	sp, #16
 80005c6:	4770      	bx	lr

080005c8 <__udivmoddi4>:
 80005c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005cc:	9d08      	ldr	r5, [sp, #32]
 80005ce:	4604      	mov	r4, r0
 80005d0:	468e      	mov	lr, r1
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d14d      	bne.n	8000672 <__udivmoddi4+0xaa>
 80005d6:	428a      	cmp	r2, r1
 80005d8:	4694      	mov	ip, r2
 80005da:	d969      	bls.n	80006b0 <__udivmoddi4+0xe8>
 80005dc:	fab2 f282 	clz	r2, r2
 80005e0:	b152      	cbz	r2, 80005f8 <__udivmoddi4+0x30>
 80005e2:	fa01 f302 	lsl.w	r3, r1, r2
 80005e6:	f1c2 0120 	rsb	r1, r2, #32
 80005ea:	fa20 f101 	lsr.w	r1, r0, r1
 80005ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f2:	ea41 0e03 	orr.w	lr, r1, r3
 80005f6:	4094      	lsls	r4, r2
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	0c21      	lsrs	r1, r4, #16
 80005fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000602:	fa1f f78c 	uxth.w	r7, ip
 8000606:	fb08 e316 	mls	r3, r8, r6, lr
 800060a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800060e:	fb06 f107 	mul.w	r1, r6, r7
 8000612:	4299      	cmp	r1, r3
 8000614:	d90a      	bls.n	800062c <__udivmoddi4+0x64>
 8000616:	eb1c 0303 	adds.w	r3, ip, r3
 800061a:	f106 30ff 	add.w	r0, r6, #4294967295
 800061e:	f080 811f 	bcs.w	8000860 <__udivmoddi4+0x298>
 8000622:	4299      	cmp	r1, r3
 8000624:	f240 811c 	bls.w	8000860 <__udivmoddi4+0x298>
 8000628:	3e02      	subs	r6, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f0f8 	udiv	r0, r3, r8
 8000634:	fb08 3310 	mls	r3, r8, r0, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb00 f707 	mul.w	r7, r0, r7
 8000640:	42a7      	cmp	r7, r4
 8000642:	d90a      	bls.n	800065a <__udivmoddi4+0x92>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f100 33ff 	add.w	r3, r0, #4294967295
 800064c:	f080 810a 	bcs.w	8000864 <__udivmoddi4+0x29c>
 8000650:	42a7      	cmp	r7, r4
 8000652:	f240 8107 	bls.w	8000864 <__udivmoddi4+0x29c>
 8000656:	4464      	add	r4, ip
 8000658:	3802      	subs	r0, #2
 800065a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800065e:	1be4      	subs	r4, r4, r7
 8000660:	2600      	movs	r6, #0
 8000662:	b11d      	cbz	r5, 800066c <__udivmoddi4+0xa4>
 8000664:	40d4      	lsrs	r4, r2
 8000666:	2300      	movs	r3, #0
 8000668:	e9c5 4300 	strd	r4, r3, [r5]
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	428b      	cmp	r3, r1
 8000674:	d909      	bls.n	800068a <__udivmoddi4+0xc2>
 8000676:	2d00      	cmp	r5, #0
 8000678:	f000 80ef 	beq.w	800085a <__udivmoddi4+0x292>
 800067c:	2600      	movs	r6, #0
 800067e:	e9c5 0100 	strd	r0, r1, [r5]
 8000682:	4630      	mov	r0, r6
 8000684:	4631      	mov	r1, r6
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	fab3 f683 	clz	r6, r3
 800068e:	2e00      	cmp	r6, #0
 8000690:	d14a      	bne.n	8000728 <__udivmoddi4+0x160>
 8000692:	428b      	cmp	r3, r1
 8000694:	d302      	bcc.n	800069c <__udivmoddi4+0xd4>
 8000696:	4282      	cmp	r2, r0
 8000698:	f200 80f9 	bhi.w	800088e <__udivmoddi4+0x2c6>
 800069c:	1a84      	subs	r4, r0, r2
 800069e:	eb61 0303 	sbc.w	r3, r1, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	469e      	mov	lr, r3
 80006a6:	2d00      	cmp	r5, #0
 80006a8:	d0e0      	beq.n	800066c <__udivmoddi4+0xa4>
 80006aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80006ae:	e7dd      	b.n	800066c <__udivmoddi4+0xa4>
 80006b0:	b902      	cbnz	r2, 80006b4 <__udivmoddi4+0xec>
 80006b2:	deff      	udf	#255	; 0xff
 80006b4:	fab2 f282 	clz	r2, r2
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	f040 8092 	bne.w	80007e2 <__udivmoddi4+0x21a>
 80006be:	eba1 010c 	sub.w	r1, r1, ip
 80006c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006c6:	fa1f fe8c 	uxth.w	lr, ip
 80006ca:	2601      	movs	r6, #1
 80006cc:	0c20      	lsrs	r0, r4, #16
 80006ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80006d2:	fb07 1113 	mls	r1, r7, r3, r1
 80006d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006da:	fb0e f003 	mul.w	r0, lr, r3
 80006de:	4288      	cmp	r0, r1
 80006e0:	d908      	bls.n	80006f4 <__udivmoddi4+0x12c>
 80006e2:	eb1c 0101 	adds.w	r1, ip, r1
 80006e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80006ea:	d202      	bcs.n	80006f2 <__udivmoddi4+0x12a>
 80006ec:	4288      	cmp	r0, r1
 80006ee:	f200 80cb 	bhi.w	8000888 <__udivmoddi4+0x2c0>
 80006f2:	4643      	mov	r3, r8
 80006f4:	1a09      	subs	r1, r1, r0
 80006f6:	b2a4      	uxth	r4, r4
 80006f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80006fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000700:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000704:	fb0e fe00 	mul.w	lr, lr, r0
 8000708:	45a6      	cmp	lr, r4
 800070a:	d908      	bls.n	800071e <__udivmoddi4+0x156>
 800070c:	eb1c 0404 	adds.w	r4, ip, r4
 8000710:	f100 31ff 	add.w	r1, r0, #4294967295
 8000714:	d202      	bcs.n	800071c <__udivmoddi4+0x154>
 8000716:	45a6      	cmp	lr, r4
 8000718:	f200 80bb 	bhi.w	8000892 <__udivmoddi4+0x2ca>
 800071c:	4608      	mov	r0, r1
 800071e:	eba4 040e 	sub.w	r4, r4, lr
 8000722:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000726:	e79c      	b.n	8000662 <__udivmoddi4+0x9a>
 8000728:	f1c6 0720 	rsb	r7, r6, #32
 800072c:	40b3      	lsls	r3, r6
 800072e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000732:	ea4c 0c03 	orr.w	ip, ip, r3
 8000736:	fa20 f407 	lsr.w	r4, r0, r7
 800073a:	fa01 f306 	lsl.w	r3, r1, r6
 800073e:	431c      	orrs	r4, r3
 8000740:	40f9      	lsrs	r1, r7
 8000742:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000746:	fa00 f306 	lsl.w	r3, r0, r6
 800074a:	fbb1 f8f9 	udiv	r8, r1, r9
 800074e:	0c20      	lsrs	r0, r4, #16
 8000750:	fa1f fe8c 	uxth.w	lr, ip
 8000754:	fb09 1118 	mls	r1, r9, r8, r1
 8000758:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800075c:	fb08 f00e 	mul.w	r0, r8, lr
 8000760:	4288      	cmp	r0, r1
 8000762:	fa02 f206 	lsl.w	r2, r2, r6
 8000766:	d90b      	bls.n	8000780 <__udivmoddi4+0x1b8>
 8000768:	eb1c 0101 	adds.w	r1, ip, r1
 800076c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000770:	f080 8088 	bcs.w	8000884 <__udivmoddi4+0x2bc>
 8000774:	4288      	cmp	r0, r1
 8000776:	f240 8085 	bls.w	8000884 <__udivmoddi4+0x2bc>
 800077a:	f1a8 0802 	sub.w	r8, r8, #2
 800077e:	4461      	add	r1, ip
 8000780:	1a09      	subs	r1, r1, r0
 8000782:	b2a4      	uxth	r4, r4
 8000784:	fbb1 f0f9 	udiv	r0, r1, r9
 8000788:	fb09 1110 	mls	r1, r9, r0, r1
 800078c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000790:	fb00 fe0e 	mul.w	lr, r0, lr
 8000794:	458e      	cmp	lr, r1
 8000796:	d908      	bls.n	80007aa <__udivmoddi4+0x1e2>
 8000798:	eb1c 0101 	adds.w	r1, ip, r1
 800079c:	f100 34ff 	add.w	r4, r0, #4294967295
 80007a0:	d26c      	bcs.n	800087c <__udivmoddi4+0x2b4>
 80007a2:	458e      	cmp	lr, r1
 80007a4:	d96a      	bls.n	800087c <__udivmoddi4+0x2b4>
 80007a6:	3802      	subs	r0, #2
 80007a8:	4461      	add	r1, ip
 80007aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007ae:	fba0 9402 	umull	r9, r4, r0, r2
 80007b2:	eba1 010e 	sub.w	r1, r1, lr
 80007b6:	42a1      	cmp	r1, r4
 80007b8:	46c8      	mov	r8, r9
 80007ba:	46a6      	mov	lr, r4
 80007bc:	d356      	bcc.n	800086c <__udivmoddi4+0x2a4>
 80007be:	d053      	beq.n	8000868 <__udivmoddi4+0x2a0>
 80007c0:	b15d      	cbz	r5, 80007da <__udivmoddi4+0x212>
 80007c2:	ebb3 0208 	subs.w	r2, r3, r8
 80007c6:	eb61 010e 	sbc.w	r1, r1, lr
 80007ca:	fa01 f707 	lsl.w	r7, r1, r7
 80007ce:	fa22 f306 	lsr.w	r3, r2, r6
 80007d2:	40f1      	lsrs	r1, r6
 80007d4:	431f      	orrs	r7, r3
 80007d6:	e9c5 7100 	strd	r7, r1, [r5]
 80007da:	2600      	movs	r6, #0
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	40d8      	lsrs	r0, r3
 80007e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80007ec:	fa21 f303 	lsr.w	r3, r1, r3
 80007f0:	4091      	lsls	r1, r2
 80007f2:	4301      	orrs	r1, r0
 80007f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007f8:	fa1f fe8c 	uxth.w	lr, ip
 80007fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000800:	fb07 3610 	mls	r6, r7, r0, r3
 8000804:	0c0b      	lsrs	r3, r1, #16
 8000806:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800080a:	fb00 f60e 	mul.w	r6, r0, lr
 800080e:	429e      	cmp	r6, r3
 8000810:	fa04 f402 	lsl.w	r4, r4, r2
 8000814:	d908      	bls.n	8000828 <__udivmoddi4+0x260>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f100 38ff 	add.w	r8, r0, #4294967295
 800081e:	d22f      	bcs.n	8000880 <__udivmoddi4+0x2b8>
 8000820:	429e      	cmp	r6, r3
 8000822:	d92d      	bls.n	8000880 <__udivmoddi4+0x2b8>
 8000824:	3802      	subs	r0, #2
 8000826:	4463      	add	r3, ip
 8000828:	1b9b      	subs	r3, r3, r6
 800082a:	b289      	uxth	r1, r1
 800082c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000830:	fb07 3316 	mls	r3, r7, r6, r3
 8000834:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000838:	fb06 f30e 	mul.w	r3, r6, lr
 800083c:	428b      	cmp	r3, r1
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x28a>
 8000840:	eb1c 0101 	adds.w	r1, ip, r1
 8000844:	f106 38ff 	add.w	r8, r6, #4294967295
 8000848:	d216      	bcs.n	8000878 <__udivmoddi4+0x2b0>
 800084a:	428b      	cmp	r3, r1
 800084c:	d914      	bls.n	8000878 <__udivmoddi4+0x2b0>
 800084e:	3e02      	subs	r6, #2
 8000850:	4461      	add	r1, ip
 8000852:	1ac9      	subs	r1, r1, r3
 8000854:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000858:	e738      	b.n	80006cc <__udivmoddi4+0x104>
 800085a:	462e      	mov	r6, r5
 800085c:	4628      	mov	r0, r5
 800085e:	e705      	b.n	800066c <__udivmoddi4+0xa4>
 8000860:	4606      	mov	r6, r0
 8000862:	e6e3      	b.n	800062c <__udivmoddi4+0x64>
 8000864:	4618      	mov	r0, r3
 8000866:	e6f8      	b.n	800065a <__udivmoddi4+0x92>
 8000868:	454b      	cmp	r3, r9
 800086a:	d2a9      	bcs.n	80007c0 <__udivmoddi4+0x1f8>
 800086c:	ebb9 0802 	subs.w	r8, r9, r2
 8000870:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000874:	3801      	subs	r0, #1
 8000876:	e7a3      	b.n	80007c0 <__udivmoddi4+0x1f8>
 8000878:	4646      	mov	r6, r8
 800087a:	e7ea      	b.n	8000852 <__udivmoddi4+0x28a>
 800087c:	4620      	mov	r0, r4
 800087e:	e794      	b.n	80007aa <__udivmoddi4+0x1e2>
 8000880:	4640      	mov	r0, r8
 8000882:	e7d1      	b.n	8000828 <__udivmoddi4+0x260>
 8000884:	46d0      	mov	r8, sl
 8000886:	e77b      	b.n	8000780 <__udivmoddi4+0x1b8>
 8000888:	3b02      	subs	r3, #2
 800088a:	4461      	add	r1, ip
 800088c:	e732      	b.n	80006f4 <__udivmoddi4+0x12c>
 800088e:	4630      	mov	r0, r6
 8000890:	e709      	b.n	80006a6 <__udivmoddi4+0xde>
 8000892:	4464      	add	r4, ip
 8000894:	3802      	subs	r0, #2
 8000896:	e742      	b.n	800071e <__udivmoddi4+0x156>

08000898 <__aeabi_idiv0>:
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <tsk_i2c>:

/******************************************************************************/
/*                             Function implementation                        */
/******************************************************************************/

void tsk_i2c() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	Change_speed_mutexHandle = osMutexNew(&Change_speed_mutex_attributes);
 80008a0:	480f      	ldr	r0, [pc, #60]	; (80008e0 <tsk_i2c+0x44>)
 80008a2:	f006 fcc2 	bl	800722a <osMutexNew>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <tsk_i2c+0x48>)
 80008aa:	6013      	str	r3, [r2, #0]

	motor_speed.speed_x.uint16Val = 0;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <tsk_i2c+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	801a      	strh	r2, [r3, #0]
	motor_speed.speed_y.uint16Val = 0;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <tsk_i2c+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	805a      	strh	r2, [r3, #2]
	motor_speed.speed_zoom.uint16Val = 0;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <tsk_i2c+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	809a      	strh	r2, [r3, #4]

	if(HAL_I2C_EnableListen_IT(get_hi2cl()) != HAL_OK) {
 80008be:	f000 fabb 	bl	8000e38 <get_hi2cl>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fe09 	bl	80024dc <HAL_I2C_EnableListen_IT>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <tsk_i2c+0x38>
		Error_Handler();
 80008d0:	f000 fe16 	bl	8001500 <Error_Handler>
	}

	while(1){
		osDelay(10000);
 80008d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80008d8:	f006 fc8c 	bl	80071f4 <osDelay>
 80008dc:	e7fa      	b.n	80008d4 <tsk_i2c+0x38>
 80008de:	bf00      	nop
 80008e0:	0800a61c 	.word	0x0800a61c
 80008e4:	2000009c 	.word	0x2000009c
 80008e8:	20000094 	.word	0x20000094

080008ec <get_speed_x>:
	}
}

uint16_t get_speed_x() {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
	uint16_t speed = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	80fb      	strh	r3, [r7, #6]
	osMutexAcquire(Change_speed_mutexHandle, 0);
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <get_speed_x+0x30>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f006 fd1a 	bl	8007336 <osMutexAcquire>

		speed = motor_speed.speed_x.uint16Val;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <get_speed_x+0x34>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	80fb      	strh	r3, [r7, #6]

	osMutexRelease(Change_speed_mutexHandle);
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <get_speed_x+0x30>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f006 fd5d 	bl	80073cc <osMutexRelease>

	return speed;
 8000912:	88fb      	ldrh	r3, [r7, #6]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000009c 	.word	0x2000009c
 8000920:	20000094 	.word	0x20000094

08000924 <get_speed_y>:

uint16_t get_speed_y() {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	uint16_t speed = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	80fb      	strh	r3, [r7, #6]
	osMutexAcquire(Change_speed_mutexHandle, 0);
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <get_speed_y+0x30>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f006 fcfe 	bl	8007336 <osMutexAcquire>

		speed = motor_speed.speed_y.uint16Val;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <get_speed_y+0x34>)
 800093c:	885b      	ldrh	r3, [r3, #2]
 800093e:	80fb      	strh	r3, [r7, #6]

	osMutexRelease(Change_speed_mutexHandle);
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <get_speed_y+0x30>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f006 fd41 	bl	80073cc <osMutexRelease>

	return speed;
 800094a:	88fb      	ldrh	r3, [r7, #6]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000009c 	.word	0x2000009c
 8000958:	20000094 	.word	0x20000094

0800095c <get_speed_zoom>:

uint16_t get_speed_zoom() {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
	uint16_t speed = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	80fb      	strh	r3, [r7, #6]
	osMutexAcquire(Change_speed_mutexHandle, 0);
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <get_speed_zoom+0x30>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f006 fce2 	bl	8007336 <osMutexAcquire>

		speed = motor_speed.speed_zoom.uint16Val;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <get_speed_zoom+0x34>)
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	80fb      	strh	r3, [r7, #6]

	osMutexRelease(Change_speed_mutexHandle);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <get_speed_zoom+0x30>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f006 fd25 	bl	80073cc <osMutexRelease>

	return speed;
 8000982:	88fb      	ldrh	r3, [r7, #6]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000009c 	.word	0x2000009c
 8000990:	20000094 	.word	0x20000094

08000994 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	//add mutex
	if(aRxBuffer[0] == 0x10) {
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b10      	cmp	r3, #16
 80009a2:	d122      	bne.n	80009ea <HAL_I2C_SlaveRxCpltCallback+0x56>
		osMutexAcquire(Change_speed_mutexHandle, 0);
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f006 fcc3 	bl	8007336 <osMutexAcquire>
			motor_speed.speed_x.uint8Val[0] = aRxBuffer[1];
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 80009b2:	785a      	ldrb	r2, [r3, #1]
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80009b6:	701a      	strb	r2, [r3, #0]
			motor_speed.speed_x.uint8Val[1] = aRxBuffer[2];
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 80009ba:	789a      	ldrb	r2, [r3, #2]
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80009be:	705a      	strb	r2, [r3, #1]
			motor_speed.speed_y.uint8Val[0] = aRxBuffer[3];
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 80009c2:	78da      	ldrb	r2, [r3, #3]
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80009c6:	709a      	strb	r2, [r3, #2]
			motor_speed.speed_y.uint8Val[1] = aRxBuffer[4];
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 80009ca:	791a      	ldrb	r2, [r3, #4]
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80009ce:	70da      	strb	r2, [r3, #3]
			motor_speed.speed_zoom.uint8Val[0] = aRxBuffer[5];
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 80009d2:	795a      	ldrb	r2, [r3, #5]
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80009d6:	711a      	strb	r2, [r3, #4]
			motor_speed.speed_zoom.uint8Val[1] = aRxBuffer[6];
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 80009da:	799a      	ldrb	r2, [r3, #6]
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80009de:	715a      	strb	r2, [r3, #5]
		osMutexRelease(Change_speed_mutexHandle);
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f006 fcf1 	bl	80073cc <osMutexRelease>
	}
	//strcpy((char*) debug_buf, "SlaveRxCptl\r\n");
	//HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000a0 	.word	0x200000a0
 80009f8:	2000009c 	.word	0x2000009c
 80009fc:	20000094 	.word	0x20000094

08000a00 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	803b      	strh	r3, [r7, #0]
	if (TransferDirection != 0) {
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00d      	beq.n	8000a32 <HAL_I2C_AddrCallback+0x32>
		 /*##- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
		 "aTxBuffer" buffer */
		if (HAL_I2C_Slave_Seq_Transmit_IT(get_hi2cl(), (uint8_t *)aTxBuffer, TXBUFFERSIZE, I2C_NEXT_FRAME) != HAL_OK) {
 8000a16:	f000 fa0f 	bl	8000e38 <get_hi2cl>
 8000a1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a1e:	2205      	movs	r2, #5
 8000a20:	490c      	ldr	r1, [pc, #48]	; (8000a54 <HAL_I2C_AddrCallback+0x54>)
 8000a22:	f001 fc13 	bl	800224c <HAL_I2C_Slave_Seq_Transmit_IT>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d00f      	beq.n	8000a4c <HAL_I2C_AddrCallback+0x4c>
			/* Transfer error in transmission process */
			Error_Handler();
 8000a2c:	f000 fd68 	bl	8001500 <Error_Handler>
		if (HAL_I2C_Slave_Seq_Receive_IT(get_hi2cl(), (uint8_t *)aRxBuffer, RXBUFFERSIZE, I2C_NEXT_FRAME) != HAL_OK) {
			/* Transfer error in reception process */
			Error_Handler();
		}
	}
}
 8000a30:	e00c      	b.n	8000a4c <HAL_I2C_AddrCallback+0x4c>
		if (HAL_I2C_Slave_Seq_Receive_IT(get_hi2cl(), (uint8_t *)aRxBuffer, RXBUFFERSIZE, I2C_NEXT_FRAME) != HAL_OK) {
 8000a32:	f000 fa01 	bl	8000e38 <get_hi2cl>
 8000a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a3a:	2206      	movs	r2, #6
 8000a3c:	4906      	ldr	r1, [pc, #24]	; (8000a58 <HAL_I2C_AddrCallback+0x58>)
 8000a3e:	f001 fca9 	bl	8002394 <HAL_I2C_Slave_Seq_Receive_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_I2C_AddrCallback+0x4c>
			Error_Handler();
 8000a48:	f000 fd5a 	bl	8001500 <Error_Handler>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000a8 	.word	0x200000a8
 8000a58:	200000a0 	.word	0x200000a0

08000a5c <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	//strcpy((char*) debug_buf, "ListenCplt\r\n");
	//HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);

	if(HAL_I2C_EnableListen_IT(get_hi2cl()) != HAL_OK) {
 8000a64:	f000 f9e8 	bl	8000e38 <get_hi2cl>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 fd36 	bl	80024dc <HAL_I2C_EnableListen_IT>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_I2C_ListenCpltCallback+0x1e>
		Error_Handler();
 8000a76:	f000 fd43 	bl	8001500 <Error_Handler>
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */

	strcpy((char*) debug_buf, "Erreur\r\n");
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_I2C_ErrorCallback+0x6c>)
 8000a8e:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_I2C_ErrorCallback+0x70>)
 8000a90:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a92:	c303      	stmia	r3!, {r0, r1}
 8000a94:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
 8000a96:	f000 f9d9 	bl	8000e4c <get_huart2>
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4814      	ldr	r0, [pc, #80]	; (8000af0 <HAL_I2C_ErrorCallback+0x6c>)
 8000a9e:	f7ff fb97 	bl	80001d0 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	4911      	ldr	r1, [pc, #68]	; (8000af0 <HAL_I2C_ErrorCallback+0x6c>)
 8000aac:	4620      	mov	r0, r4
 8000aae:	f005 fd2d 	bl	800650c <HAL_UART_Transmit>

	if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF) {
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f001 fde9 	bl	800268a <HAL_I2C_GetError>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d014      	beq.n	8000ae8 <HAL_I2C_ErrorCallback+0x64>
		strcpy((char*) debug_buf, "Erreur AF\r\n");
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_I2C_ErrorCallback+0x6c>)
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <HAL_I2C_ErrorCallback+0x74>)
 8000ac2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
 8000ac8:	f000 f9c0 	bl	8000e4c <get_huart2>
 8000acc:	4604      	mov	r4, r0
 8000ace:	4808      	ldr	r0, [pc, #32]	; (8000af0 <HAL_I2C_ErrorCallback+0x6c>)
 8000ad0:	f7ff fb7e 	bl	80001d0 <strlen>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	4904      	ldr	r1, [pc, #16]	; (8000af0 <HAL_I2C_ErrorCallback+0x6c>)
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f005 fd14 	bl	800650c <HAL_UART_Transmit>
		Error_Handler();
 8000ae4:	f000 fd0c 	bl	8001500 <Error_Handler>
	}
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	200000b0 	.word	0x200000b0
 8000af4:	0800a5b4 	.word	0x0800a5b4
 8000af8:	0800a5c0 	.word	0x0800a5c0

08000afc <tsk_motor_control>:
uint16_t actual_speed_y = 0;
uint16_t actual_speed_zoom = 0;

uint16_t acceleration = 2;

void tsk_motor_control() {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

	start_motor(Motor_x);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 f963 	bl	8000dcc <start_motor>
	start_motor(Motor_y);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 f960 	bl	8000dcc <start_motor>
	start_motor(Motor_zoom);
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f000 f95d 	bl	8000dcc <start_motor>

	while(1){
		update_motor_x();
 8000b12:	f000 f809 	bl	8000b28 <update_motor_x>
		update_motor_y();
 8000b16:	f000 f857 	bl	8000bc8 <update_motor_y>
		update_motor_zoom();
 8000b1a:	f000 f8a5 	bl	8000c68 <update_motor_zoom>
		osDelay(2);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f006 fb68 	bl	80071f4 <osDelay>
		update_motor_x();
 8000b24:	e7f5      	b.n	8000b12 <tsk_motor_control+0x16>
	...

08000b28 <update_motor_x>:
	}
}


void update_motor_x() {
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
	uint16_t desired_speed = get_speed_x();
 8000b2e:	f7ff fedd 	bl	80008ec <get_speed_x>
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]

	if(actual_speed_x < desired_speed) {
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <update_motor_x+0x90>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	88fa      	ldrh	r2, [r7, #6]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d908      	bls.n	8000b52 <update_motor_x+0x2a>
		actual_speed_x += acceleration;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <update_motor_x+0x90>)
 8000b42:	881a      	ldrh	r2, [r3, #0]
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <update_motor_x+0x94>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <update_motor_x+0x90>)
 8000b4e:	801a      	strh	r2, [r3, #0]
 8000b50:	e00c      	b.n	8000b6c <update_motor_x+0x44>
	} else if(actual_speed_x > desired_speed) {
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <update_motor_x+0x90>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	88fa      	ldrh	r2, [r7, #6]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <update_motor_x+0x44>
		actual_speed_x -= acceleration;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <update_motor_x+0x90>)
 8000b5e:	881a      	ldrh	r2, [r3, #0]
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <update_motor_x+0x94>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <update_motor_x+0x90>)
 8000b6a:	801a      	strh	r2, [r3, #0]
	}

	change_speed(&timer_x, actual_speed_x);
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <update_motor_x+0x90>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <update_motor_x+0x98>)
 8000b74:	f000 f90c 	bl	8000d90 <change_speed>
	osKernelLock();
 8000b78:	f006 fa52 	bl	8007020 <osKernelLock>
		TIM3->ARR = timer_x.arr;
 8000b7c:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <update_motor_x+0x9c>)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <update_motor_x+0x98>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->PSC = timer_x.psc;
 8000b84:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <update_motor_x+0x9c>)
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <update_motor_x+0x98>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	6293      	str	r3, [r2, #40]	; 0x28
		TIM3->CCR2 = (uint32_t) floor(timer_x.arr / 2);
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <update_motor_x+0x98>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	085b      	lsrs	r3, r3, #1
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fc66 	bl	8000464 <__aeabi_ui2d>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	4c09      	ldr	r4, [pc, #36]	; (8000bc4 <update_motor_x+0x9c>)
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f7ff fcd9 	bl	8000558 <__aeabi_d2uiz>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	63a3      	str	r3, [r4, #56]	; 0x38
	osKernelUnlock();
 8000baa:	f006 fa5f 	bl	800706c <osKernelUnlock>
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000d4 	.word	0x200000d4
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	200000bc 	.word	0x200000bc
 8000bc4:	40000400 	.word	0x40000400

08000bc8 <update_motor_y>:

void update_motor_y() {
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
	uint16_t desired_speed = get_speed_y();
 8000bce:	f7ff fea9 	bl	8000924 <get_speed_y>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
	if(actual_speed_y < desired_speed) {
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <update_motor_y+0x90>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	88fa      	ldrh	r2, [r7, #6]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d908      	bls.n	8000bf2 <update_motor_y+0x2a>
		actual_speed_y += acceleration;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <update_motor_y+0x90>)
 8000be2:	881a      	ldrh	r2, [r3, #0]
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <update_motor_y+0x94>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <update_motor_y+0x90>)
 8000bee:	801a      	strh	r2, [r3, #0]
 8000bf0:	e00c      	b.n	8000c0c <update_motor_y+0x44>
	} else if (actual_speed_y > desired_speed) {
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <update_motor_y+0x90>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	88fa      	ldrh	r2, [r7, #6]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <update_motor_y+0x44>
		actual_speed_y -= acceleration;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <update_motor_y+0x90>)
 8000bfe:	881a      	ldrh	r2, [r3, #0]
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <update_motor_y+0x94>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <update_motor_y+0x90>)
 8000c0a:	801a      	strh	r2, [r3, #0]
	}

	change_speed(&timer_y, actual_speed_y);
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <update_motor_y+0x90>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	4813      	ldr	r0, [pc, #76]	; (8000c60 <update_motor_y+0x98>)
 8000c14:	f000 f8bc 	bl	8000d90 <change_speed>

	osKernelLock();
 8000c18:	f006 fa02 	bl	8007020 <osKernelLock>
		TIM4->ARR = timer_y.arr;
 8000c1c:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <update_motor_y+0x9c>)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <update_motor_y+0x98>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM4->PSC = timer_y.psc;
 8000c24:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <update_motor_y+0x9c>)
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <update_motor_y+0x98>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	6293      	str	r3, [r2, #40]	; 0x28
		TIM4->CCR3 = (uint32_t) floor(timer_y.arr / 2);
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <update_motor_y+0x98>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	085b      	lsrs	r3, r3, #1
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fc16 	bl	8000464 <__aeabi_ui2d>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4c09      	ldr	r4, [pc, #36]	; (8000c64 <update_motor_y+0x9c>)
 8000c3e:	4610      	mov	r0, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	f7ff fc89 	bl	8000558 <__aeabi_d2uiz>
 8000c46:	4603      	mov	r3, r0
 8000c48:	63e3      	str	r3, [r4, #60]	; 0x3c
	osKernelUnlock();
 8000c4a:	f006 fa0f 	bl	800706c <osKernelUnlock>
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd90      	pop	{r4, r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000d6 	.word	0x200000d6
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	200000c4 	.word	0x200000c4
 8000c64:	40000800 	.word	0x40000800

08000c68 <update_motor_zoom>:

void update_motor_zoom() {
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
	uint16_t desired_speed = get_speed_zoom();
 8000c6e:	f7ff fe75 	bl	800095c <get_speed_zoom>
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]

	if(actual_speed_zoom < desired_speed) {
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <update_motor_zoom+0x94>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	88fa      	ldrh	r2, [r7, #6]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d908      	bls.n	8000c92 <update_motor_zoom+0x2a>
		actual_speed_zoom += acceleration;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <update_motor_zoom+0x94>)
 8000c82:	881a      	ldrh	r2, [r3, #0]
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <update_motor_zoom+0x98>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <update_motor_zoom+0x94>)
 8000c8e:	801a      	strh	r2, [r3, #0]
 8000c90:	e00c      	b.n	8000cac <update_motor_zoom+0x44>
	} else if(actual_speed_zoom > desired_speed) {
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <update_motor_zoom+0x94>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	88fa      	ldrh	r2, [r7, #6]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <update_motor_zoom+0x44>
		actual_speed_zoom -= acceleration;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <update_motor_zoom+0x94>)
 8000c9e:	881a      	ldrh	r2, [r3, #0]
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <update_motor_zoom+0x98>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <update_motor_zoom+0x94>)
 8000caa:	801a      	strh	r2, [r3, #0]
	}

	change_speed(&timer_zoom, actual_speed_zoom / 2);
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <update_motor_zoom+0x94>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	085b      	lsrs	r3, r3, #1
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4813      	ldr	r0, [pc, #76]	; (8000d04 <update_motor_zoom+0x9c>)
 8000cb8:	f000 f86a 	bl	8000d90 <change_speed>

	osKernelLock();
 8000cbc:	f006 f9b0 	bl	8007020 <osKernelLock>
		TIM8->ARR = timer_zoom.arr;
 8000cc0:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <update_motor_zoom+0xa0>)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <update_motor_zoom+0x9c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM8->PSC = timer_zoom.psc;
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <update_motor_zoom+0xa0>)
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <update_motor_zoom+0x9c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->CCR4 = (uint32_t) floor(timer_zoom.arr / 2);
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <update_motor_zoom+0x9c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	085b      	lsrs	r3, r3, #1
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fbc4 	bl	8000464 <__aeabi_ui2d>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4c09      	ldr	r4, [pc, #36]	; (8000d08 <update_motor_zoom+0xa0>)
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f7ff fc37 	bl	8000558 <__aeabi_d2uiz>
 8000cea:	4603      	mov	r3, r0
 8000cec:	6423      	str	r3, [r4, #64]	; 0x40
	osKernelUnlock();
 8000cee:	f006 f9bd 	bl	800706c <osKernelUnlock>
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000d8 	.word	0x200000d8
 8000d00:	20000000 	.word	0x20000000
 8000d04:	200000cc 	.word	0x200000cc
 8000d08:	40013400 	.word	0x40013400

08000d0c <change_timer_def_for_freq>:

void change_timer_def_for_freq(uint32_t desired_freq, Timer_def_t* timer_def) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]

	//frequence du PCLK1
	uint32_t f_clk = HAL_RCC_GetPCLK1Freq();
 8000d16:	f003 fb87 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8000d1a:	60f8      	str	r0, [r7, #12]

	// formule : https://deepbluembedded.com/stm32-pwm-example-timer-pwm-mode-tutorial/ apres je solve pour ARR
	uint32_t arr = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

	if(desired_freq != 0) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <change_timer_def_for_freq+0x24>
		arr = (f_clk / desired_freq);
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
	}
	uint32_t psc = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]

	if(arr > 65535) {
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3a:	d315      	bcc.n	8000d68 <change_timer_def_for_freq+0x5c>
		psc = (uint32_t) floor(arr / 65535) + 1;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <change_timer_def_for_freq+0x80>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	0bdb      	lsrs	r3, r3, #15
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb8c 	bl	8000464 <__aeabi_ui2d>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f7ff fc00 	bl	8000558 <__aeabi_d2uiz>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	613b      	str	r3, [r7, #16]
		arr = arr / psc;
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
	}

	timer_def->arr = arr - 1;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	1e5a      	subs	r2, r3, #1
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	601a      	str	r2, [r3, #0]
	timer_def->psc = psc == 0 ? psc : psc - 1;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <change_timer_def_for_freq+0x70>
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <change_timer_def_for_freq+0x72>
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	6053      	str	r3, [r2, #4]
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	80008001 	.word	0x80008001

08000d90 <change_speed>:

// go to X rpm
void change_speed(Timer_def_t* timer_def, uint16_t speed) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
	//TODO: change "400" according to mode 1/mode * 400;

	uint32_t freq = (speed * (4 * 400)) / 60;
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <change_speed+0x38>)
 8000da8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dac:	441a      	add	r2, r3
 8000dae:	1152      	asrs	r2, r2, #5
 8000db0:	17db      	asrs	r3, r3, #31
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	60fb      	str	r3, [r7, #12]
	change_timer_def_for_freq(freq, timer_def);
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f7ff ffa7 	bl	8000d0c <change_timer_def_for_freq>
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	88888889 	.word	0x88888889

08000dcc <start_motor>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start_motor(enum Motor_t motor) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	switch(motor){
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d017      	beq.n	8000e0c <start_motor+0x40>
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	dc1d      	bgt.n	8000e1c <start_motor+0x50>
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <start_motor+0x1e>
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d009      	beq.n	8000dfc <start_motor+0x30>
		case Motor_zoom:
			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
			TIM3->PSC = 0;
			break;
	}
}
 8000de8:	e018      	b.n	8000e1c <start_motor+0x50>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dea:	2104      	movs	r1, #4
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <start_motor+0x58>)
 8000dee:	f004 f9bf 	bl	8005170 <HAL_TIM_PWM_Start>
			TIM2->PSC = 0;
 8000df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df6:	2200      	movs	r2, #0
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8000dfa:	e00f      	b.n	8000e1c <start_motor+0x50>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <start_motor+0x5c>)
 8000e00:	f004 f9b6 	bl	8005170 <HAL_TIM_PWM_Start>
			TIM4->PSC = 0;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <start_motor+0x60>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8000e0a:	e007      	b.n	8000e1c <start_motor+0x50>
			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000e0c:	210c      	movs	r1, #12
 8000e0e:	4808      	ldr	r0, [pc, #32]	; (8000e30 <start_motor+0x64>)
 8000e10:	f004 f9ae 	bl	8005170 <HAL_TIM_PWM_Start>
			TIM3->PSC = 0;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <start_motor+0x68>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8000e1a:	bf00      	nop
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000184 	.word	0x20000184
 8000e28:	200001d0 	.word	0x200001d0
 8000e2c:	40000800 	.word	0x40000800
 8000e30:	2000021c 	.word	0x2000021c
 8000e34:	40000400 	.word	0x40000400

08000e38 <get_hi2cl>:
			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
			break;
	}
}

I2C_HandleTypeDef* get_hi2cl(){ return &hi2c2; }
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <get_hi2cl+0x10>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	200000dc 	.word	0x200000dc

08000e4c <get_huart2>:
UART_HandleTypeDef* get_huart2(){ return &huart2; }
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <get_huart2+0x10>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	20000268 	.word	0x20000268

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e66:	f000 fe4c 	bl	8001b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6a:	f000 f855 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6e:	f000 faef 	bl	8001450 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000e72:	f000 f923 	bl	80010bc <MX_TIM3_Init>
  MX_TIM8_Init();
 8000e76:	f000 fa11 	bl	800129c <MX_TIM8_Init>
  MX_TIM4_Init();
 8000e7a:	f000 f997 	bl	80011ac <MX_TIM4_Init>
  MX_I2C2_Init();
 8000e7e:	f000 f89d 	bl	8000fbc <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000e82:	f000 fab5 	bl	80013f0 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000e86:	f000 f8d9 	bl	800103c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t debug_buf[4];
  strcpy((char*) debug_buf, "Reset\r\n");
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <main+0x90>)
 8000e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e92:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
 8000e96:	f7ff ffd9 	bl	8000e4c <get_huart2>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f996 	bl	80001d0 <strlen>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	1d39      	adds	r1, r7, #4
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f005 fb2c 	bl	800650c <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eb4:	f006 f86a 	bl	8006f8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <main+0x94>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <main+0x98>)
 8000ebe:	f006 f907 	bl	80070d0 <osThreadNew>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <main+0x9c>)
 8000ec6:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(tsk_motor_control, NULL, &motor_control_attributes);
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <main+0xa0>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <main+0xa4>)
 8000ece:	f006 f8ff 	bl	80070d0 <osThreadNew>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <main+0xa8>)
 8000ed6:	6013      	str	r3, [r2, #0]

  /* creation of i2c */
  i2cHandle = osThreadNew(tsk_i2c, NULL, &i2c_attributes);
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <main+0xac>)
 8000eda:	2100      	movs	r1, #0
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <main+0xb0>)
 8000ede:	f006 f8f7 	bl	80070d0 <osThreadNew>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <main+0xb4>)
 8000ee6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ee8:	f006 f874 	bl	8006fd4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <main+0x8c>
 8000eee:	bf00      	nop
 8000ef0:	0800a5ec 	.word	0x0800a5ec
 8000ef4:	0800a62c 	.word	0x0800a62c
 8000ef8:	080014c9 	.word	0x080014c9
 8000efc:	200002ec 	.word	0x200002ec
 8000f00:	0800a650 	.word	0x0800a650
 8000f04:	08000afd 	.word	0x08000afd
 8000f08:	200002f0 	.word	0x200002f0
 8000f0c:	0800a674 	.word	0x0800a674
 8000f10:	0800089d 	.word	0x0800089d
 8000f14:	200002f4 	.word	0x200002f4

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b096      	sub	sp, #88	; 0x58
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	2244      	movs	r2, #68	; 0x44
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f009 fa64 	bl	800a3f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f3e:	f002 fca9 	bl	8003894 <HAL_PWREx_ControlVoltageScaling>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f48:	f000 fada 	bl	8001500 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f58:	2360      	movs	r3, #96	; 0x60
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f60:	2301      	movs	r3, #1
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000f68:	2324      	movs	r3, #36	; 0x24
 8000f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 fcdf 	bl	8003940 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f88:	f000 faba 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	2303      	movs	r3, #3
 8000f92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 f8a7 	bl	80040f8 <HAL_RCC_ClockConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fb0:	f000 faa6 	bl	8001500 <Error_Handler>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3758      	adds	r7, #88	; 0x58
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <MX_I2C2_Init+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702681;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <MX_I2C2_Init+0x7c>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 70;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fce:	2246      	movs	r2, #70	; 0x46
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ff0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_I2C2_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_I2C2_Init+0x74>)
 8000ffa:	f001 f897 	bl	800212c <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001004:	f000 fa7c 	bl	8001500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001008:	2100      	movs	r1, #0
 800100a:	4809      	ldr	r0, [pc, #36]	; (8001030 <MX_I2C2_Init+0x74>)
 800100c:	f002 fb9c 	bl	8003748 <HAL_I2CEx_ConfigAnalogFilter>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001016:	f000 fa73 	bl	8001500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800101a:	2100      	movs	r1, #0
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_I2C2_Init+0x74>)
 800101e:	f002 fbde 	bl	80037de <HAL_I2CEx_ConfigDigitalFilter>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001028:	f000 fa6a 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000dc 	.word	0x200000dc
 8001034:	40005800 	.word	0x40005800
 8001038:	00702681 	.word	0x00702681

0800103c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_I2C3_Init+0x74>)
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <MX_I2C3_Init+0x78>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702681;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_I2C3_Init+0x74>)
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <MX_I2C3_Init+0x7c>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_I2C3_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_I2C3_Init+0x74>)
 8001054:	2201      	movs	r2, #1
 8001056:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_I2C3_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_I2C3_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_I2C3_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_I2C3_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_I2C3_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <MX_I2C3_Init+0x74>)
 8001078:	f001 f858 	bl	800212c <HAL_I2C_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001082:	f000 fa3d 	bl	8001500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <MX_I2C3_Init+0x74>)
 800108a:	f002 fb5d 	bl	8003748 <HAL_I2CEx_ConfigAnalogFilter>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001094:	f000 fa34 	bl	8001500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_I2C3_Init+0x74>)
 800109c:	f002 fb9f 	bl	80037de <HAL_I2CEx_ConfigDigitalFilter>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80010a6:	f000 fa2b 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000130 	.word	0x20000130
 80010b4:	40005c00 	.word	0x40005c00
 80010b8:	00702681 	.word	0x00702681

080010bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08e      	sub	sp, #56	; 0x38
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ee:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <MX_TIM3_Init+0xe8>)
 80010f0:	4a2d      	ldr	r2, [pc, #180]	; (80011a8 <MX_TIM3_Init+0xec>)
 80010f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <MX_TIM3_Init+0xe8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MX_TIM3_Init+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <MX_TIM3_Init+0xe8>)
 8001102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001106:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MX_TIM3_Init+0xe8>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <MX_TIM3_Init+0xe8>)
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001114:	4823      	ldr	r0, [pc, #140]	; (80011a4 <MX_TIM3_Init+0xe8>)
 8001116:	f003 ff01 	bl	8004f1c <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001120:	f000 f9ee 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800112a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112e:	4619      	mov	r1, r3
 8001130:	481c      	ldr	r0, [pc, #112]	; (80011a4 <MX_TIM3_Init+0xe8>)
 8001132:	f004 fb57 	bl	80057e4 <HAL_TIM_ConfigClockSource>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800113c:	f000 f9e0 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <MX_TIM3_Init+0xe8>)
 8001142:	f003 ffb3 	bl	80050ac <HAL_TIM_PWM_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800114c:	f000 f9d8 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_TIM3_Init+0xe8>)
 8001160:	f005 f862 	bl	8006228 <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800116a:	f000 f9c9 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116e:	2360      	movs	r3, #96	; 0x60
 8001170:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	2204      	movs	r2, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <MX_TIM3_Init+0xe8>)
 8001186:	f004 fa19 	bl	80055bc <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001190:	f000 f9b6 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_TIM3_Init+0xe8>)
 8001196:	f000 fadd 	bl	8001754 <HAL_TIM_MspPostInit>

}
 800119a:	bf00      	nop
 800119c:	3738      	adds	r7, #56	; 0x38
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000184 	.word	0x20000184
 80011a8:	40000400 	.word	0x40000400

080011ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	; 0x38
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <MX_TIM4_Init+0xe8>)
 80011e0:	4a2d      	ldr	r2, [pc, #180]	; (8001298 <MX_TIM4_Init+0xec>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <MX_TIM4_Init+0xe8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <MX_TIM4_Init+0xe8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <MX_TIM4_Init+0xe8>)
 80011f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <MX_TIM4_Init+0xe8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <MX_TIM4_Init+0xe8>)
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001204:	4823      	ldr	r0, [pc, #140]	; (8001294 <MX_TIM4_Init+0xe8>)
 8001206:	f003 fe89 	bl	8004f1c <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001210:	f000 f976 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	4619      	mov	r1, r3
 8001220:	481c      	ldr	r0, [pc, #112]	; (8001294 <MX_TIM4_Init+0xe8>)
 8001222:	f004 fadf 	bl	80057e4 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800122c:	f000 f968 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001230:	4818      	ldr	r0, [pc, #96]	; (8001294 <MX_TIM4_Init+0xe8>)
 8001232:	f003 ff3b 	bl	80050ac <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800123c:	f000 f960 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4811      	ldr	r0, [pc, #68]	; (8001294 <MX_TIM4_Init+0xe8>)
 8001250:	f004 ffea 	bl	8006228 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800125a:	f000 f951 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	; 0x60
 8001260:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	2208      	movs	r2, #8
 8001272:	4619      	mov	r1, r3
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <MX_TIM4_Init+0xe8>)
 8001276:	f004 f9a1 	bl	80055bc <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001280:	f000 f93e 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <MX_TIM4_Init+0xe8>)
 8001286:	f000 fa65 	bl	8001754 <HAL_TIM_MspPostInit>

}
 800128a:	bf00      	nop
 800128c:	3738      	adds	r7, #56	; 0x38
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200001d0 	.word	0x200001d0
 8001298:	40000800 	.word	0x40000800

0800129c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b09a      	sub	sp, #104	; 0x68
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	615a      	str	r2, [r3, #20]
 80012ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	222c      	movs	r2, #44	; 0x2c
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f009 f88c 	bl	800a3f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <MX_TIM8_Init+0x14c>)
 80012de:	4a43      	ldr	r2, [pc, #268]	; (80013ec <MX_TIM8_Init+0x150>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <MX_TIM8_Init+0x14c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <MX_TIM8_Init+0x14c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012ee:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <MX_TIM8_Init+0x14c>)
 80012f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <MX_TIM8_Init+0x14c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012fc:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <MX_TIM8_Init+0x14c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001302:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <MX_TIM8_Init+0x14c>)
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001308:	4837      	ldr	r0, [pc, #220]	; (80013e8 <MX_TIM8_Init+0x14c>)
 800130a:	f003 fe07 	bl	8004f1c <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001314:	f000 f8f4 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800131e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001322:	4619      	mov	r1, r3
 8001324:	4830      	ldr	r0, [pc, #192]	; (80013e8 <MX_TIM8_Init+0x14c>)
 8001326:	f004 fa5d 	bl	80057e4 <HAL_TIM_ConfigClockSource>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001330:	f000 f8e6 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001334:	482c      	ldr	r0, [pc, #176]	; (80013e8 <MX_TIM8_Init+0x14c>)
 8001336:	f003 feb9 	bl	80050ac <HAL_TIM_PWM_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001340:	f000 f8de 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001350:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001354:	4619      	mov	r1, r3
 8001356:	4824      	ldr	r0, [pc, #144]	; (80013e8 <MX_TIM8_Init+0x14c>)
 8001358:	f004 ff66 	bl	8006228 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001362:	f000 f8cd 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001366:	2360      	movs	r3, #96	; 0x60
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136e:	2300      	movs	r3, #0
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800137e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001382:	220c      	movs	r2, #12
 8001384:	4619      	mov	r1, r3
 8001386:	4818      	ldr	r0, [pc, #96]	; (80013e8 <MX_TIM8_Init+0x14c>)
 8001388:	f004 f918 	bl	80055bc <HAL_TIM_PWM_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001392:	f000 f8b5 	bl	8001500 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <MX_TIM8_Init+0x14c>)
 80013cc:	f004 ffb4 	bl	8006338 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80013d6:	f000 f893 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <MX_TIM8_Init+0x14c>)
 80013dc:	f000 f9ba 	bl	8001754 <HAL_TIM_MspPostInit>

}
 80013e0:	bf00      	nop
 80013e2:	3768      	adds	r7, #104	; 0x68
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000021c 	.word	0x2000021c
 80013ec:	40013400 	.word	0x40013400

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_USART2_UART_Init+0x58>)
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <MX_USART2_UART_Init+0x5c>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_USART2_UART_Init+0x58>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_USART2_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART2_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART2_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART2_UART_Init+0x58>)
 8001434:	f005 f81c 	bl	8006470 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800143e:	f000 f85f 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000268 	.word	0x20000268
 800144c:	40004400 	.word	0x40004400

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_GPIO_Init+0x74>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <MX_GPIO_Init+0x74>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_GPIO_Init+0x74>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_GPIO_Init+0x74>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <MX_GPIO_Init+0x74>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_GPIO_Init+0x74>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_GPIO_Init+0x74>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <MX_GPIO_Init+0x74>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_GPIO_Init+0x74>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_GPIO_Init+0x74>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <MX_GPIO_Init+0x74>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_GPIO_Init+0x74>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000

080014c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;) {
		osDelay(1000);
 80014d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d4:	f005 fe8e 	bl	80071f4 <osDelay>
 80014d8:	e7fa      	b.n	80014d0 <StartDefaultTask+0x8>
	...

080014dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ee:	f000 fb21 	bl	8001b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40012c00 	.word	0x40012c00

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_MspInit+0x4c>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_MspInit+0x4c>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6613      	str	r3, [r2, #96]	; 0x60
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_MspInit+0x4c>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_MspInit+0x4c>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6593      	str	r3, [r2, #88]	; 0x58
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_MspInit+0x4c>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	210f      	movs	r1, #15
 8001546:	f06f 0001 	mvn.w	r0, #1
 800154a:	f000 fbcb 	bl	8001ce4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0ae      	sub	sp, #184	; 0xb8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2288      	movs	r2, #136	; 0x88
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f008 ff39 	bl	800a3f4 <memset>
  if(hi2c->Instance==I2C2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a4a      	ldr	r2, [pc, #296]	; (80016b0 <HAL_I2C_MspInit+0x154>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d14c      	bne.n	8001626 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001590:	2300      	movs	r3, #0
 8001592:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4618      	mov	r0, r3
 800159a:	f003 f803 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015a4:	f7ff ffac 	bl	8001500 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a8:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ac:	4a41      	ldr	r2, [pc, #260]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b4:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80015c0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80015c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c8:	2312      	movs	r3, #18
 80015ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015da:	2304      	movs	r3, #4
 80015dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4834      	ldr	r0, [pc, #208]	; (80016b8 <HAL_I2C_MspInit+0x15c>)
 80015e8:	f000 fbf6 	bl	8001dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	4a30      	ldr	r2, [pc, #192]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 80015f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015f6:	6593      	str	r3, [r2, #88]	; 0x58
 80015f8:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697b      	ldr	r3, [r7, #20]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2105      	movs	r1, #5
 8001608:	2021      	movs	r0, #33	; 0x21
 800160a:	f000 fb6b 	bl	8001ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800160e:	2021      	movs	r0, #33	; 0x21
 8001610:	f000 fb84 	bl	8001d1c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2105      	movs	r1, #5
 8001618:	2022      	movs	r0, #34	; 0x22
 800161a:	f000 fb63 	bl	8001ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800161e:	2022      	movs	r0, #34	; 0x22
 8001620:	f000 fb7c 	bl	8001d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001624:	e040      	b.n	80016a8 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C3)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a24      	ldr	r2, [pc, #144]	; (80016bc <HAL_I2C_MspInit+0x160>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d13b      	bne.n	80016a8 <HAL_I2C_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001634:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001636:	2300      	movs	r3, #0
 8001638:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4618      	mov	r0, r3
 8001640:	f002 ffb0 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 800164a:	f7ff ff59 	bl	8001500 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001666:	2303      	movs	r3, #3
 8001668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800167e:	2304      	movs	r3, #4
 8001680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001688:	4619      	mov	r1, r3
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <HAL_I2C_MspInit+0x164>)
 800168c:	f000 fba4 	bl	8001dd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 8001696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_I2C_MspInit+0x158>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	bf00      	nop
 80016aa:	37b8      	adds	r7, #184	; 0xb8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40005800 	.word	0x40005800
 80016b4:	40021000 	.word	0x40021000
 80016b8:	48000400 	.word	0x48000400
 80016bc:	40005c00 	.word	0x40005c00
 80016c0:	48000800 	.word	0x48000800

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <HAL_TIM_Base_MspInit+0x80>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10c      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_TIM_Base_MspInit+0x84>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_TIM_Base_MspInit+0x84>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_TIM_Base_MspInit+0x84>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80016ee:	e022      	b.n	8001736 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a15      	ldr	r2, [pc, #84]	; (800174c <HAL_TIM_Base_MspInit+0x88>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d10c      	bne.n	8001714 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_TIM_Base_MspInit+0x84>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <HAL_TIM_Base_MspInit+0x84>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_TIM_Base_MspInit+0x84>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
}
 8001712:	e010      	b.n	8001736 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <HAL_TIM_Base_MspInit+0x8c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d10b      	bne.n	8001736 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_TIM_Base_MspInit+0x84>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <HAL_TIM_Base_MspInit+0x84>)
 8001724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001728:	6613      	str	r3, [r2, #96]	; 0x60
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_TIM_Base_MspInit+0x84>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40000400 	.word	0x40000400
 8001748:	40021000 	.word	0x40021000
 800174c:	40000800 	.word	0x40000800
 8001750:	40013400 	.word	0x40013400

08001754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a34      	ldr	r2, [pc, #208]	; (8001844 <HAL_TIM_MspPostInit+0xf0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d11d      	bne.n	80017b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <HAL_TIM_MspPostInit+0xf4>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	4a33      	ldr	r2, [pc, #204]	; (8001848 <HAL_TIM_MspPostInit+0xf4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <HAL_TIM_MspPostInit+0xf4>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800179e:	2302      	movs	r3, #2
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ac:	f000 fb14 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80017b0:	e044      	b.n	800183c <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_TIM_MspPostInit+0xf8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d11d      	bne.n	80017f8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_TIM_MspPostInit+0xf4>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c0:	4a21      	ldr	r2, [pc, #132]	; (8001848 <HAL_TIM_MspPostInit+0xf4>)
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_TIM_MspPostInit+0xf4>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017e6:	2302      	movs	r3, #2
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4817      	ldr	r0, [pc, #92]	; (8001850 <HAL_TIM_MspPostInit+0xfc>)
 80017f2:	f000 faf1 	bl	8001dd8 <HAL_GPIO_Init>
}
 80017f6:	e021      	b.n	800183c <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM8)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a15      	ldr	r2, [pc, #84]	; (8001854 <HAL_TIM_MspPostInit+0x100>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11c      	bne.n	800183c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_TIM_MspPostInit+0xf4>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_TIM_MspPostInit+0xf4>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_TIM_MspPostInit+0xf4>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800181a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800182c:	2303      	movs	r3, #3
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4808      	ldr	r0, [pc, #32]	; (8001858 <HAL_TIM_MspPostInit+0x104>)
 8001838:	f000 face 	bl	8001dd8 <HAL_GPIO_Init>
}
 800183c:	bf00      	nop
 800183e:	3728      	adds	r7, #40	; 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40000400 	.word	0x40000400
 8001848:	40021000 	.word	0x40021000
 800184c:	40000800 	.word	0x40000800
 8001850:	48000400 	.word	0x48000400
 8001854:	40013400 	.word	0x40013400
 8001858:	48000800 	.word	0x48000800

0800185c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0ac      	sub	sp, #176	; 0xb0
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2288      	movs	r2, #136	; 0x88
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f008 fdb9 	bl	800a3f4 <memset>
  if(huart->Instance==USART2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a21      	ldr	r2, [pc, #132]	; (800190c <HAL_UART_MspInit+0xb0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d13b      	bne.n	8001904 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800188c:	2302      	movs	r3, #2
 800188e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001890:	2300      	movs	r3, #0
 8001892:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4618      	mov	r0, r3
 800189a:	f002 fe83 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018a4:	f7ff fe2c 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_UART_MspInit+0xb4>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a18      	ldr	r2, [pc, #96]	; (8001910 <HAL_UART_MspInit+0xb4>)
 80018ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_UART_MspInit+0xb4>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_UART_MspInit+0xb4>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	4a12      	ldr	r2, [pc, #72]	; (8001910 <HAL_UART_MspInit+0xb4>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_UART_MspInit+0xb4>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d8:	230c      	movs	r3, #12
 80018da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f0:	2307      	movs	r3, #7
 80018f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001900:	f000 fa6a 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001904:	bf00      	nop
 8001906:	37b0      	adds	r7, #176	; 0xb0
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40004400 	.word	0x40004400
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	; 0x30
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001922:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <HAL_InitTick+0xc8>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	4a2d      	ldr	r2, [pc, #180]	; (80019dc <HAL_InitTick+0xc8>)
 8001928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800192c:	6613      	str	r3, [r2, #96]	; 0x60
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_InitTick+0xc8>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800193a:	f107 020c 	add.w	r2, r7, #12
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f002 fd9b 	bl	8004480 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800194a:	f002 fd83 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 800194e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <HAL_InitTick+0xcc>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	0c9b      	lsrs	r3, r3, #18
 800195a:	3b01      	subs	r3, #1
 800195c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_InitTick+0xd0>)
 8001960:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <HAL_InitTick+0xd4>)
 8001962:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <HAL_InitTick+0xd0>)
 8001966:	f240 32e7 	movw	r2, #999	; 0x3e7
 800196a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_InitTick+0xd0>)
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <HAL_InitTick+0xd0>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_InitTick+0xd0>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_InitTick+0xd0>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001984:	4817      	ldr	r0, [pc, #92]	; (80019e4 <HAL_InitTick+0xd0>)
 8001986:	f003 fac9 	bl	8004f1c <HAL_TIM_Base_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001994:	2b00      	cmp	r3, #0
 8001996:	d11b      	bne.n	80019d0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001998:	4812      	ldr	r0, [pc, #72]	; (80019e4 <HAL_InitTick+0xd0>)
 800199a:	f003 fb17 	bl	8004fcc <HAL_TIM_Base_Start_IT>
 800199e:	4603      	mov	r3, r0
 80019a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80019a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d111      	bne.n	80019d0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019ac:	2019      	movs	r0, #25
 80019ae:	f000 f9b5 	bl	8001d1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b0f      	cmp	r3, #15
 80019b6:	d808      	bhi.n	80019ca <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80019b8:	2200      	movs	r2, #0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	2019      	movs	r0, #25
 80019be:	f000 f991 	bl	8001ce4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_InitTick+0xd8>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e002      	b.n	80019d0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3730      	adds	r7, #48	; 0x30
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	431bde83 	.word	0x431bde83
 80019e4:	200002f8 	.word	0x200002f8
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	20000008 	.word	0x20000008

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <NMI_Handler+0x4>
	...

080019f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	uint8_t buf[12];
	strcpy((char*) buf, "Hard Fault!\r\n");
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HardFault_Handler+0x34>)
 8001a02:	461c      	mov	r4, r3
 8001a04:	4613      	mov	r3, r2
 8001a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a08:	c407      	stmia	r4!, {r0, r1, r2}
 8001a0a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(get_huart2(), buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001a0c:	f7ff fa1e 	bl	8000e4c <get_huart2>
 8001a10:	4604      	mov	r4, r0
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fbdb 	bl	80001d0 <strlen>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	1d39      	adds	r1, r7, #4
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	4620      	mov	r0, r4
 8001a26:	f004 fd71 	bl	800650c <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x32>
 8001a2c:	0800a5f4 	.word	0x0800a5f4

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a56:	f003 fc91 	bl	800537c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002f8 	.word	0x200002f8

08001a64 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <I2C2_EV_IRQHandler+0x10>)
 8001a6a:	f000 fd57 	bl	800251c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200000dc 	.word	0x200000dc

08001a78 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <I2C2_ER_IRQHandler+0x10>)
 8001a7e:	f000 fd67 	bl	8002550 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200000dc 	.word	0x200000dc

08001a8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab4:	f7ff ffea 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <LoopForever+0x6>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	; (8001af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <LoopForever+0xe>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	; (8001afc <LoopForever+0x16>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ade:	f008 fc55 	bl	800a38c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ae2:	f7ff f9bd 	bl	8000e60 <main>

08001ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ae8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001af4:	0800a750 	.word	0x0800a750
  ldr r2, =_sbss
 8001af8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001afc:	20001d18 	.word	0x20001d18

08001b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_2_IRQHandler>

08001b02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f8de 	bl	8001cce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b12:	200f      	movs	r0, #15
 8001b14:	f7ff fefe 	bl	8001914 <HAL_InitTick>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	71fb      	strb	r3, [r7, #7]
 8001b22:	e001      	b.n	8001b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b24:	f7ff fcf2 	bl	800150c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b28:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x20>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_IncTick+0x24>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_IncTick+0x24>)
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	2000000c 	.word	0x2000000c
 8001b58:	20000344 	.word	0x20000344

08001b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_GetTick+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000344 	.word	0x20000344

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	; (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ff4c 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf6:	f7ff ff61 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001cfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	6978      	ldr	r0, [r7, #20]
 8001d02:	f7ff ffb1 	bl	8001c68 <NVIC_EncodePriority>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff80 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d14:	bf00      	nop
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff54 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d005      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2204      	movs	r2, #4
 8001d54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	e029      	b.n	8001db0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 020e 	bic.w	r2, r2, #14
 8001d6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f003 021c 	and.w	r2, r3, #28
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
    }
  }
  return status;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dc8:	b2db      	uxtb	r3, r3
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e17f      	b.n	80020e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2101      	movs	r1, #1
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	4013      	ands	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8171 	beq.w	80020e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d005      	beq.n	8001e18 <HAL_GPIO_Init+0x40>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d130      	bne.n	8001e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	f003 0201 	and.w	r2, r3, #1
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d118      	bne.n	8001eb8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	f003 0201 	and.w	r2, r3, #1
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d017      	beq.n	8001ef4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d123      	bne.n	8001f48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	6939      	ldr	r1, [r7, #16]
 8001f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80ac 	beq.w	80020e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	4b5f      	ldr	r3, [pc, #380]	; (8002108 <HAL_GPIO_Init+0x330>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8e:	4a5e      	ldr	r2, [pc, #376]	; (8002108 <HAL_GPIO_Init+0x330>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6613      	str	r3, [r2, #96]	; 0x60
 8001f96:	4b5c      	ldr	r3, [pc, #368]	; (8002108 <HAL_GPIO_Init+0x330>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa2:	4a5a      	ldr	r2, [pc, #360]	; (800210c <HAL_GPIO_Init+0x334>)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	220f      	movs	r2, #15
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fcc:	d025      	beq.n	800201a <HAL_GPIO_Init+0x242>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4f      	ldr	r2, [pc, #316]	; (8002110 <HAL_GPIO_Init+0x338>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01f      	beq.n	8002016 <HAL_GPIO_Init+0x23e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4e      	ldr	r2, [pc, #312]	; (8002114 <HAL_GPIO_Init+0x33c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d019      	beq.n	8002012 <HAL_GPIO_Init+0x23a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4d      	ldr	r2, [pc, #308]	; (8002118 <HAL_GPIO_Init+0x340>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0x236>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4c      	ldr	r2, [pc, #304]	; (800211c <HAL_GPIO_Init+0x344>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00d      	beq.n	800200a <HAL_GPIO_Init+0x232>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4b      	ldr	r2, [pc, #300]	; (8002120 <HAL_GPIO_Init+0x348>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <HAL_GPIO_Init+0x22e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4a      	ldr	r2, [pc, #296]	; (8002124 <HAL_GPIO_Init+0x34c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_GPIO_Init+0x22a>
 8001ffe:	2306      	movs	r3, #6
 8002000:	e00c      	b.n	800201c <HAL_GPIO_Init+0x244>
 8002002:	2307      	movs	r3, #7
 8002004:	e00a      	b.n	800201c <HAL_GPIO_Init+0x244>
 8002006:	2305      	movs	r3, #5
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x244>
 800200a:	2304      	movs	r3, #4
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x244>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x244>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x244>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x244>
 800201a:	2300      	movs	r3, #0
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800202c:	4937      	ldr	r1, [pc, #220]	; (800210c <HAL_GPIO_Init+0x334>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800203a:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_GPIO_Init+0x350>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800205e:	4a32      	ldr	r2, [pc, #200]	; (8002128 <HAL_GPIO_Init+0x350>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <HAL_GPIO_Init+0x350>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002088:	4a27      	ldr	r2, [pc, #156]	; (8002128 <HAL_GPIO_Init+0x350>)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_GPIO_Init+0x350>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_GPIO_Init+0x350>)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_GPIO_Init+0x350>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020dc:	4a12      	ldr	r2, [pc, #72]	; (8002128 <HAL_GPIO_Init+0x350>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f47f ae78 	bne.w	8001de8 <HAL_GPIO_Init+0x10>
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	40010000 	.word	0x40010000
 8002110:	48000400 	.word	0x48000400
 8002114:	48000800 	.word	0x48000800
 8002118:	48000c00 	.word	0x48000c00
 800211c:	48001000 	.word	0x48001000
 8002120:	48001400 	.word	0x48001400
 8002124:	48001800 	.word	0x48001800
 8002128:	40010400 	.word	0x40010400

0800212c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e081      	b.n	8002242 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fa02 	bl	800155c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	; 0x24
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800217c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800218c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e006      	b.n	80021b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d104      	bne.n	80021c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69d9      	ldr	r1, [r3, #28]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1a      	ldr	r2, [r3, #32]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002268:	2b28      	cmp	r3, #40	; 0x28
 800226a:	f040 808a 	bne.w	8002382 <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07e      	b.n	8002384 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002286:	f248 0101 	movw	r1, #32769	; 0x8001
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f001 f9fe 	bl	800368c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 800229a:	2302      	movs	r3, #2
 800229c:	e072      	b.n	8002384 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b2a      	cmp	r3, #42	; 0x2a
 80022b0:	d12a      	bne.n	8002308 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80022b2:	2102      	movs	r1, #2
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f001 f9e9 	bl	800368c <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c8:	d11e      	bne.n	8002308 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d8:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d012      	beq.n	8002308 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	4a29      	ldr	r2, [pc, #164]	; (800238c <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 80022e8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fd22 	bl	8001d38 <HAL_DMA_Abort_IT>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002304:	4610      	mov	r0, r2
 8002306:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2229      	movs	r2, #41	; 0x29
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800232c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	88fa      	ldrh	r2, [r7, #6]
 8002338:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 800234e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	0c1b      	lsrs	r3, r3, #16
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d103      	bne.n	800236c <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2208      	movs	r2, #8
 800236a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002374:	f248 0101 	movw	r1, #32769	; 0x8001
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f001 f91d 	bl	80035b8 <I2C_Enable_IRQ>

    return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e000      	b.n	8002384 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
  }
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	08003517 	.word	0x08003517
 8002390:	080026a3 	.word	0x080026a3

08002394 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023b0:	2b28      	cmp	r3, #40	; 0x28
 80023b2:	f040 808a 	bne.w	80024ca <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07e      	b.n	80024cc <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023ce:	f248 0102 	movw	r1, #32770	; 0x8002
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f001 f95a 	bl	800368c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e072      	b.n	80024cc <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b29      	cmp	r3, #41	; 0x29
 80023f8:	d12a      	bne.n	8002450 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80023fa:	2101      	movs	r1, #1
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f001 f945 	bl	800368c <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002410:	d11e      	bne.n	8002450 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002420:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	2b00      	cmp	r3, #0
 8002428:	d012      	beq.n	8002450 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 8002430:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fc7e 	bl	8001d38 <HAL_DMA_Abort_IT>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800244c:	4610      	mov	r0, r2
 800244e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	222a      	movs	r2, #42	; 0x2a
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002474:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 8002496:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2208      	movs	r2, #8
 80024b2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80024bc:	f248 0102 	movw	r1, #32770	; 0x8002
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f001 f879 	bl	80035b8 <I2C_Enable_IRQ>

    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
  }
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	08003517 	.word	0x08003517
 80024d8:	080026a3 	.word	0x080026a3

080024dc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d10d      	bne.n	800250c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2228      	movs	r2, #40	; 0x28
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a07      	ldr	r2, [pc, #28]	; (8002518 <HAL_I2C_EnableListen_IT+0x3c>)
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f001 f858 	bl	80035b8 <I2C_Enable_IRQ>

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	080026a3 	.word	0x080026a3

0800251c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	68f9      	ldr	r1, [r7, #12]
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
  }
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d010      	beq.n	8002596 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	09db      	lsrs	r3, r3, #7
 8002578:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002594:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	0a9b      	lsrs	r3, r3, #10
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d010      	beq.n	80025c4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	09db      	lsrs	r3, r3, #7
 80025a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f043 0208 	orr.w	r2, r3, #8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	0a5b      	lsrs	r3, r3, #9
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	09db      	lsrs	r3, r3, #7
 80025d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f043 0202 	orr.w	r2, r3, #2
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 030b 	and.w	r3, r3, #11
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002602:	68f9      	ldr	r1, [r7, #12]
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fe6b 	bl	80032e0 <I2C_ITError>
  }
}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <I2C_Slave_ISR_IT+0x24>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e0ec      	b.n	80028a0 <I2C_Slave_ISR_IT+0x1fe>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80026e6:	6939      	ldr	r1, [r7, #16]
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fc99 	bl	8003020 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d04d      	beq.n	8002796 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002702:	2b00      	cmp	r3, #0
 8002704:	d047      	beq.n	8002796 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d128      	bne.n	8002762 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b28      	cmp	r3, #40	; 0x28
 800271a:	d108      	bne.n	800272e <I2C_Slave_ISR_IT+0x8c>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002722:	d104      	bne.n	800272e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002724:	6939      	ldr	r1, [r7, #16]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fd84 	bl	8003234 <I2C_ITListenCplt>
 800272c:	e032      	b.n	8002794 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b29      	cmp	r3, #41	; 0x29
 8002738:	d10e      	bne.n	8002758 <I2C_Slave_ISR_IT+0xb6>
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002740:	d00a      	beq.n	8002758 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2210      	movs	r2, #16
 8002748:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 febf 	bl	80034ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fb3d 	bl	8002dd0 <I2C_ITSlaveSeqCplt>
 8002756:	e01d      	b.n	8002794 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2210      	movs	r2, #16
 800275e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002760:	e096      	b.n	8002890 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2210      	movs	r2, #16
 8002768:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f043 0204 	orr.w	r2, r3, #4
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <I2C_Slave_ISR_IT+0xe4>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002782:	f040 8085 	bne.w	8002890 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4619      	mov	r1, r3
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fda7 	bl	80032e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002792:	e07d      	b.n	8002890 <I2C_Slave_ISR_IT+0x1ee>
 8002794:	e07c      	b.n	8002890 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d030      	beq.n	8002804 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d02a      	beq.n	8002804 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d018      	beq.n	80027ea <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d14f      	bne.n	8002894 <I2C_Slave_ISR_IT+0x1f2>
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027fa:	d04b      	beq.n	8002894 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fae7 	bl	8002dd0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002802:	e047      	b.n	8002894 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	08db      	lsrs	r3, r3, #3
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	08db      	lsrs	r3, r3, #3
 8002814:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800281c:	6939      	ldr	r1, [r7, #16]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fa15 	bl	8002c4e <I2C_ITAddrCplt>
 8002824:	e037      	b.n	8002896 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d031      	beq.n	8002896 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800283a:	2b00      	cmp	r3, #0
 800283c:	d02b      	beq.n	8002896 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d018      	beq.n	800287a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
 8002878:	e00d      	b.n	8002896 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002880:	d002      	beq.n	8002888 <I2C_Slave_ISR_IT+0x1e6>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 faa1 	bl	8002dd0 <I2C_ITSlaveSeqCplt>
 800288e:	e002      	b.n	8002896 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002890:	bf00      	nop
 8002892:	e000      	b.n	8002896 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002894:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <I2C_Master_ISR_DMA+0x1a>
 80028be:	2302      	movs	r3, #2
 80028c0:	e0e1      	b.n	8002a86 <I2C_Master_ISR_DMA+0x1de>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d017      	beq.n	8002906 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d011      	beq.n	8002906 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2210      	movs	r2, #16
 80028e8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f043 0204 	orr.w	r2, r3, #4
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80028f6:	2120      	movs	r1, #32
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fe5d 	bl	80035b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fde5 	bl	80034ce <I2C_Flush_TXDR>
 8002904:	e0ba      	b.n	8002a7c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	09db      	lsrs	r3, r3, #7
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d072      	beq.n	80029f8 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800291a:	2b00      	cmp	r3, #0
 800291c:	d06c      	beq.n	80029f8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d04e      	beq.n	80029d6 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b29b      	uxth	r3, r3
 8002940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002944:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	2bff      	cmp	r3, #255	; 0xff
 800294e:	d906      	bls.n	800295e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	22ff      	movs	r2, #255	; 0xff
 8002954:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e010      	b.n	8002980 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002970:	d003      	beq.n	800297a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	e002      	b.n	8002980 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800297a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	b2da      	uxtb	r2, r3
 8002986:	8a79      	ldrh	r1, [r7, #18]
 8002988:	2300      	movs	r3, #0
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fde0 	bl	8003554 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b22      	cmp	r3, #34	; 0x22
 80029b0:	d108      	bne.n	80029c4 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80029c2:	e05b      	b.n	8002a7c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029d2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80029d4:	e052      	b.n	8002a7c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e4:	d003      	beq.n	80029ee <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f9b5 	bl	8002d56 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80029ec:	e046      	b.n	8002a7c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80029ee:	2140      	movs	r1, #64	; 0x40
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fc75 	bl	80032e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80029f6:	e041      	b.n	8002a7c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d029      	beq.n	8002a58 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d119      	bne.n	8002a4e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a28:	d027      	beq.n	8002a7a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a32:	d108      	bne.n	8002a46 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a42:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002a44:	e019      	b.n	8002a7a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f985 	bl	8002d56 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002a4c:	e015      	b.n	8002a7a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a4e:	2140      	movs	r1, #64	; 0x40
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fc45 	bl	80032e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002a56:	e010      	b.n	8002a7a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fa0a 	bl	8002e8c <I2C_ITMasterCplt>
 8002a78:	e000      	b.n	8002a7c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002a7a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b088      	sub	sp, #32
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <I2C_Slave_ISR_DMA+0x24>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e0c9      	b.n	8002c46 <I2C_Slave_ISR_DMA+0x1b8>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 faa3 	bl	8003020 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 809a 	beq.w	8002c1c <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8093 	beq.w	8002c1c <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0b9b      	lsrs	r3, r3, #14
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0bdb      	lsrs	r3, r3, #15
 8002b06:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d07f      	beq.n	8002c0e <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0bdb      	lsrs	r3, r3, #15
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0b9b      	lsrs	r3, r3, #14
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d128      	bne.n	8002bae <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b28      	cmp	r3, #40	; 0x28
 8002b66:	d108      	bne.n	8002b7a <I2C_Slave_ISR_DMA+0xec>
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6e:	d104      	bne.n	8002b7a <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fb5e 	bl	8003234 <I2C_ITListenCplt>
 8002b78:	e048      	b.n	8002c0c <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b29      	cmp	r3, #41	; 0x29
 8002b84:	d10e      	bne.n	8002ba4 <I2C_Slave_ISR_DMA+0x116>
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b8c:	d00a      	beq.n	8002ba4 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2210      	movs	r2, #16
 8002b94:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fc99 	bl	80034ce <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f917 	bl	8002dd0 <I2C_ITSlaveSeqCplt>
 8002ba2:	e033      	b.n	8002c0c <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002bac:	e034      	b.n	8002c18 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f043 0204 	orr.w	r2, r3, #4
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <I2C_Slave_ISR_DMA+0x14a>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd6:	d11f      	bne.n	8002c18 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b21      	cmp	r3, #33	; 0x21
 8002bdc:	d002      	beq.n	8002be4 <I2C_Slave_ISR_DMA+0x156>
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b29      	cmp	r3, #41	; 0x29
 8002be2:	d103      	bne.n	8002bec <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2221      	movs	r2, #33	; 0x21
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bea:	e008      	b.n	8002bfe <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	2b22      	cmp	r3, #34	; 0x22
 8002bf0:	d002      	beq.n	8002bf8 <I2C_Slave_ISR_DMA+0x16a>
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
 8002bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8002bf6:	d102      	bne.n	8002bfe <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2222      	movs	r2, #34	; 0x22
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	4619      	mov	r1, r3
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fb6b 	bl	80032e0 <I2C_ITError>
      if (treatdmanack == 1U)
 8002c0a:	e005      	b.n	8002c18 <I2C_Slave_ISR_DMA+0x18a>
 8002c0c:	e004      	b.n	8002c18 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2210      	movs	r2, #16
 8002c14:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c16:	e011      	b.n	8002c3c <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002c18:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c1a:	e00f      	b.n	8002c3c <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	08db      	lsrs	r3, r3, #3
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d009      	beq.n	8002c3c <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	08db      	lsrs	r3, r3, #3
 8002c2c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f809 	bl	8002c4e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c64:	2b28      	cmp	r3, #40	; 0x28
 8002c66:	d16a      	bne.n	8002d3e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	0c1b      	lsrs	r3, r3, #16
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c86:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c94:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002ca2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d138      	bne.n	8002d1e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002cac:	897b      	ldrh	r3, [r7, #10]
 8002cae:	09db      	lsrs	r3, r3, #7
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	89bb      	ldrh	r3, [r7, #12]
 8002cb4:	4053      	eors	r3, r2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f003 0306 	and.w	r3, r3, #6
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11c      	bne.n	8002cfa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002cc0:	897b      	ldrh	r3, [r7, #10]
 8002cc2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d13b      	bne.n	8002d4e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cec:	89ba      	ldrh	r2, [r7, #12]
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fd fe84 	bl	8000a00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002cf8:	e029      	b.n	8002d4e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fcc2 	bl	800368c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d10:	89ba      	ldrh	r2, [r7, #12]
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	4619      	mov	r1, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd fe72 	bl	8000a00 <HAL_I2C_AddrCallback>
}
 8002d1c:	e017      	b.n	8002d4e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fcb2 	bl	800368c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d30:	89ba      	ldrh	r2, [r7, #12]
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd fe62 	bl	8000a00 <HAL_I2C_AddrCallback>
}
 8002d3c:	e007      	b.n	8002d4e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2208      	movs	r2, #8
 8002d44:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b21      	cmp	r3, #33	; 0x21
 8002d70:	d115      	bne.n	8002d9e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2211      	movs	r2, #17
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d86:	2101      	movs	r1, #1
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fc7f 	bl	800368c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fc3b 	bl	8002612 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d9c:	e014      	b.n	8002dc8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2212      	movs	r2, #18
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002db2:	2102      	movs	r1, #2
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fc69 	bl	800368c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fc2f 	bl	8002626 <HAL_I2C_MasterRxCpltCallback>
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	0b9b      	lsrs	r3, r3, #14
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e00d      	b.n	8002e22 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	0bdb      	lsrs	r3, r3, #15
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e20:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b29      	cmp	r3, #41	; 0x29
 8002e2c:	d112      	bne.n	8002e54 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2228      	movs	r2, #40	; 0x28
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2221      	movs	r2, #33	; 0x21
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fc24 	bl	800368c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fbf4 	bl	800263a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e52:	e017      	b.n	8002e84 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e5e:	d111      	bne.n	8002e84 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2228      	movs	r2, #40	; 0x28
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2222      	movs	r2, #34	; 0x22
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e6e:	2102      	movs	r1, #2
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fc0b 	bl	800368c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd fd88 	bl	8000994 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b21      	cmp	r3, #33	; 0x21
 8002eac:	d107      	bne.n	8002ebe <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002eae:	2101      	movs	r1, #1
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fbeb 	bl	800368c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2211      	movs	r2, #17
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebc:	e00c      	b.n	8002ed8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b22      	cmp	r3, #34	; 0x22
 8002ec8:	d106      	bne.n	8002ed8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002eca:	2102      	movs	r1, #2
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fbdd 	bl	800368c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2212      	movs	r2, #18
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b4d      	ldr	r3, [pc, #308]	; (8003018 <I2C_ITMasterCplt+0x18c>)
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4a      	ldr	r2, [pc, #296]	; (800301c <I2C_ITMasterCplt+0x190>)
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d009      	beq.n	8002f14 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2210      	movs	r2, #16
 8002f06:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b60      	cmp	r3, #96	; 0x60
 8002f1e:	d10b      	bne.n	8002f38 <I2C_ITMasterCplt+0xac>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002f36:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fac8 	bl	80034ce <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b60      	cmp	r3, #96	; 0x60
 8002f4e:	d002      	beq.n	8002f56 <I2C_ITMasterCplt+0xca>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f9bf 	bl	80032e0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f62:	e054      	b.n	800300e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b21      	cmp	r3, #33	; 0x21
 8002f6e:	d124      	bne.n	8002fba <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d10b      	bne.n	8002fa2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fb57 	bl	800264e <HAL_I2C_MemTxCpltCallback>
}
 8002fa0:	e035      	b.n	800300e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fb2d 	bl	8002612 <HAL_I2C_MasterTxCpltCallback>
}
 8002fb8:	e029      	b.n	800300e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b22      	cmp	r3, #34	; 0x22
 8002fc4:	d123      	bne.n	800300e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d10b      	bne.n	8002ff8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fb36 	bl	8002662 <HAL_I2C_MemRxCpltCallback>
}
 8002ff6:	e00a      	b.n	800300e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fb0c 	bl	8002626 <HAL_I2C_MasterRxCpltCallback>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	fe00e800 	.word	0xfe00e800
 800301c:	ffff0000 	.word	0xffff0000

08003020 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2220      	movs	r2, #32
 8003044:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b21      	cmp	r3, #33	; 0x21
 800304a:	d002      	beq.n	8003052 <I2C_ITSlaveCplt+0x32>
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b29      	cmp	r3, #41	; 0x29
 8003050:	d108      	bne.n	8003064 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003052:	f248 0101 	movw	r1, #32769	; 0x8001
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fb18 	bl	800368c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2221      	movs	r2, #33	; 0x21
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
 8003062:	e00d      	b.n	8003080 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b22      	cmp	r3, #34	; 0x22
 8003068:	d002      	beq.n	8003070 <I2C_ITSlaveCplt+0x50>
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b2a      	cmp	r3, #42	; 0x2a
 800306e:	d107      	bne.n	8003080 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003070:	f248 0102 	movw	r1, #32770	; 0x8002
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fb09 	bl	800368c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2222      	movs	r2, #34	; 0x22
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b64      	ldr	r3, [pc, #400]	; (800322c <I2C_ITSlaveCplt+0x20c>)
 800309c:	400b      	ands	r3, r1
 800309e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fa14 	bl	80034ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	0b9b      	lsrs	r3, r3, #14
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d013      	beq.n	80030da <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d020      	beq.n	800310c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030d8:	e018      	b.n	800310c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	0bdb      	lsrs	r3, r3, #15
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d012      	beq.n	800310c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 0304 	bic.w	r3, r3, #4
 800311e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00c      	beq.n	800315a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f043 0204 	orr.w	r2, r3, #4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f8a7 	bl	80032e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b28      	cmp	r3, #40	; 0x28
 800319c:	d141      	bne.n	8003222 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f847 	bl	8003234 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031a6:	e03c      	b.n	8003222 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031b0:	d014      	beq.n	80031dc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fe0c 	bl	8002dd0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <I2C_ITSlaveCplt+0x210>)
 80031bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fd fc41 	bl	8000a5c <HAL_I2C_ListenCpltCallback>
}
 80031da:	e022      	b.n	8003222 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b22      	cmp	r3, #34	; 0x22
 80031e6:	d10e      	bne.n	8003206 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fbc8 	bl	8000994 <HAL_I2C_SlaveRxCpltCallback>
}
 8003204:	e00d      	b.n	8003222 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fa0c 	bl	800263a <HAL_I2C_SlaveTxCpltCallback>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	fe00e800 	.word	0xfe00e800
 8003230:	ffff0000 	.word	0xffff0000

08003234 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a26      	ldr	r2, [pc, #152]	; (80032dc <I2C_ITListenCplt+0xa8>)
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	089b      	lsrs	r3, r3, #2
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d022      	beq.n	80032b2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d012      	beq.n	80032b2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f043 0204 	orr.w	r2, r3, #4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032b2:	f248 0103 	movw	r1, #32771	; 0x8003
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f9e8 	bl	800368c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2210      	movs	r2, #16
 80032c2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fd fbc5 	bl	8000a5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	ffff0000 	.word	0xffff0000

080032e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a5d      	ldr	r2, [pc, #372]	; (8003474 <I2C_ITError+0x194>)
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b28      	cmp	r3, #40	; 0x28
 8003316:	d005      	beq.n	8003324 <I2C_ITError+0x44>
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b29      	cmp	r3, #41	; 0x29
 800331c:	d002      	beq.n	8003324 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	2b2a      	cmp	r3, #42	; 0x2a
 8003322:	d10b      	bne.n	800333c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003324:	2103      	movs	r1, #3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f9b0 	bl	800368c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2228      	movs	r2, #40	; 0x28
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a50      	ldr	r2, [pc, #320]	; (8003478 <I2C_ITError+0x198>)
 8003338:	635a      	str	r2, [r3, #52]	; 0x34
 800333a:	e011      	b.n	8003360 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800333c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f9a3 	bl	800368c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b60      	cmp	r3, #96	; 0x60
 8003350:	d003      	beq.n	800335a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	2b00      	cmp	r3, #0
 800336c:	d039      	beq.n	80033e2 <I2C_ITError+0x102>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b11      	cmp	r3, #17
 8003372:	d002      	beq.n	800337a <I2C_ITError+0x9a>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b21      	cmp	r3, #33	; 0x21
 8003378:	d133      	bne.n	80033e2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003388:	d107      	bne.n	800339a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003398:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fd0b 	bl	8001dba <HAL_DMA_GetState>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d017      	beq.n	80033da <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	4a33      	ldr	r2, [pc, #204]	; (800347c <I2C_ITError+0x19c>)
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe fcba 	bl	8001d38 <HAL_DMA_Abort_IT>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d04d      	beq.n	8003466 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033d4:	4610      	mov	r0, r2
 80033d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033d8:	e045      	b.n	8003466 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f850 	bl	8003480 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033e0:	e041      	b.n	8003466 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d039      	beq.n	800345e <I2C_ITError+0x17e>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b12      	cmp	r3, #18
 80033ee:	d002      	beq.n	80033f6 <I2C_ITError+0x116>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b22      	cmp	r3, #34	; 0x22
 80033f4:	d133      	bne.n	800345e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003404:	d107      	bne.n	8003416 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003414:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fccd 	bl	8001dba <HAL_DMA_GetState>
 8003420:	4603      	mov	r3, r0
 8003422:	2b01      	cmp	r3, #1
 8003424:	d017      	beq.n	8003456 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	4a14      	ldr	r2, [pc, #80]	; (800347c <I2C_ITError+0x19c>)
 800342c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fc7c 	bl	8001d38 <HAL_DMA_Abort_IT>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d011      	beq.n	800346a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003450:	4610      	mov	r0, r2
 8003452:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003454:	e009      	b.n	800346a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f812 	bl	8003480 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800345c:	e005      	b.n	800346a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f80e 	bl	8003480 <I2C_TreatErrorCallback>
  }
}
 8003464:	e002      	b.n	800346c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800346a:	bf00      	nop
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	ffff0000 	.word	0xffff0000
 8003478:	080026a3 	.word	0x080026a3
 800347c:	08003517 	.word	0x08003517

08003480 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b60      	cmp	r3, #96	; 0x60
 8003492:	d10e      	bne.n	80034b2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff f8e3 	bl	8002676 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034b0:	e009      	b.n	80034c6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fd fadf 	bl	8000a84 <HAL_I2C_ErrorCallback>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d103      	bne.n	80034ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2200      	movs	r2, #0
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d007      	beq.n	800350a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	619a      	str	r2, [r3, #24]
  }
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	2200      	movs	r2, #0
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	2200      	movs	r2, #0
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff ff9b 	bl	8003480 <I2C_TreatErrorCallback>
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	4613      	mov	r3, r2
 8003564:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003566:	897b      	ldrh	r3, [r7, #10]
 8003568:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800356c:	7a7b      	ldrb	r3, [r7, #9]
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003574:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	4313      	orrs	r3, r2
 800357e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003582:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	0d5b      	lsrs	r3, r3, #21
 800358e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <I2C_TransferConfig+0x60>)
 8003594:	430b      	orrs	r3, r1
 8003596:	43db      	mvns	r3, r3
 8003598:	ea02 0103 	and.w	r1, r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	03ff63ff 	.word	0x03ff63ff

080035b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035cc:	4a2d      	ldr	r2, [pc, #180]	; (8003684 <I2C_Enable_IRQ+0xcc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80035d6:	4a2c      	ldr	r2, [pc, #176]	; (8003688 <I2C_Enable_IRQ+0xd0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d11d      	bne.n	8003618 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	da03      	bge.n	80035ec <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80035ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80035ec:	887b      	ldrh	r3, [r7, #2]
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d103      	bne.n	80035fa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80035f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d103      	bne.n	8003608 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003606:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003608:	887b      	ldrh	r3, [r7, #2]
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d12c      	bne.n	8003668 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003614:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003616:	e027      	b.n	8003668 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003618:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800361c:	2b00      	cmp	r3, #0
 800361e:	da03      	bge.n	8003628 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003626:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003638:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800364a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	2b10      	cmp	r3, #16
 8003650:	d103      	bne.n	800365a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003658:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	2b20      	cmp	r3, #32
 800365e:	d103      	bne.n	8003668 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f043 0320 	orr.w	r3, r3, #32
 8003666:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	430a      	orrs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	080028a9 	.word	0x080028a9
 8003688:	08002a8f 	.word	0x08002a8f

0800368c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00f      	beq.n	80036c6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80036ac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036ba:	2b28      	cmp	r3, #40	; 0x28
 80036bc:	d003      	beq.n	80036c6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80036c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00f      	beq.n	80036f0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80036d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036e4:	2b28      	cmp	r3, #40	; 0x28
 80036e6:	d003      	beq.n	80036f0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80036ee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da03      	bge.n	8003700 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80036fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	2b10      	cmp	r3, #16
 8003704:	d103      	bne.n	800370e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800370c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	2b20      	cmp	r3, #32
 8003712:	d103      	bne.n	800371c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f043 0320 	orr.w	r3, r3, #32
 800371a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d103      	bne.n	800372a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003728:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6819      	ldr	r1, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	43da      	mvns	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	400a      	ands	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b20      	cmp	r3, #32
 800375c:	d138      	bne.n	80037d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003768:	2302      	movs	r3, #2
 800376a:	e032      	b.n	80037d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2224      	movs	r2, #36	; 0x24
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800379a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d139      	bne.n	8003868 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037fe:	2302      	movs	r3, #2
 8003800:	e033      	b.n	800386a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2224      	movs	r2, #36	; 0x24
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003830:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <HAL_PWREx_GetVoltageRange+0x18>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40007000 	.word	0x40007000

08003894 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a2:	d130      	bne.n	8003906 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a4:	4b23      	ldr	r3, [pc, #140]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d038      	beq.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038ba:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2232      	movs	r2, #50	; 0x32
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0c9b      	lsrs	r3, r3, #18
 80038d4:	3301      	adds	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d8:	e002      	b.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3b01      	subs	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ec:	d102      	bne.n	80038f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f2      	bne.n	80038da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003900:	d110      	bne.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e00f      	b.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003912:	d007      	beq.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003914:	4b07      	ldr	r3, [pc, #28]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800391c:	4a05      	ldr	r2, [pc, #20]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003922:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40007000 	.word	0x40007000
 8003938:	20000004 	.word	0x20000004
 800393c:	431bde83 	.word	0x431bde83

08003940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e3ca      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003952:	4b97      	ldr	r3, [pc, #604]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800395c:	4b94      	ldr	r3, [pc, #592]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80e4 	beq.w	8003b3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_RCC_OscConfig+0x4a>
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b0c      	cmp	r3, #12
 800397e:	f040 808b 	bne.w	8003a98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b01      	cmp	r3, #1
 8003986:	f040 8087 	bne.w	8003a98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800398a:	4b89      	ldr	r3, [pc, #548]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_RCC_OscConfig+0x62>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e3a2      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1a      	ldr	r2, [r3, #32]
 80039a6:	4b82      	ldr	r3, [pc, #520]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <HAL_RCC_OscConfig+0x7c>
 80039b2:	4b7f      	ldr	r3, [pc, #508]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ba:	e005      	b.n	80039c8 <HAL_RCC_OscConfig+0x88>
 80039bc:	4b7c      	ldr	r3, [pc, #496]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d223      	bcs.n	8003a14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fd87 	bl	80044e4 <RCC_SetFlashLatencyFromMSIRange>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e383      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e0:	4b73      	ldr	r3, [pc, #460]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a72      	ldr	r2, [pc, #456]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039e6:	f043 0308 	orr.w	r3, r3, #8
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b70      	ldr	r3, [pc, #448]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	496d      	ldr	r1, [pc, #436]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039fe:	4b6c      	ldr	r3, [pc, #432]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	4968      	ldr	r1, [pc, #416]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
 8003a12:	e025      	b.n	8003a60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a65      	ldr	r2, [pc, #404]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a1a:	f043 0308 	orr.w	r3, r3, #8
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4960      	ldr	r1, [pc, #384]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a32:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	495b      	ldr	r1, [pc, #364]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d109      	bne.n	8003a60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fd47 	bl	80044e4 <RCC_SetFlashLatencyFromMSIRange>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e343      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a60:	f000 fc4a 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b52      	ldr	r3, [pc, #328]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	4950      	ldr	r1, [pc, #320]	; (8003bb4 <HAL_RCC_OscConfig+0x274>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7c:	4a4e      	ldr	r2, [pc, #312]	; (8003bb8 <HAL_RCC_OscConfig+0x278>)
 8003a7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a80:	4b4e      	ldr	r3, [pc, #312]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd ff45 	bl	8001914 <HAL_InitTick>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d052      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	e327      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d032      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003aa0:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a42      	ldr	r2, [pc, #264]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aac:	f7fe f856 	bl	8001b5c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab4:	f7fe f852 	bl	8001b5c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e310      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ac6:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ad2:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a36      	ldr	r2, [pc, #216]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	f043 0308 	orr.w	r3, r3, #8
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	4931      	ldr	r1, [pc, #196]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003af0:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	492c      	ldr	r1, [pc, #176]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
 8003b04:	e01a      	b.n	8003b3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b06:	4b2a      	ldr	r3, [pc, #168]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b12:	f7fe f823 	bl	8001b5c <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b1a:	f7fe f81f 	bl	8001b5c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e2dd      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b2c:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x1da>
 8003b38:	e000      	b.n	8003b3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d074      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x21a>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d10e      	bne.n	8003b72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d10b      	bne.n	8003b72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d064      	beq.n	8003c30 <HAL_RCC_OscConfig+0x2f0>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d160      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e2ba      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCC_OscConfig+0x24a>
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0b      	ldr	r2, [pc, #44]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	e026      	b.n	8003bd8 <HAL_RCC_OscConfig+0x298>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b92:	d115      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x280>
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a02      	ldr	r2, [pc, #8]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e014      	b.n	8003bd8 <HAL_RCC_OscConfig+0x298>
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	0800a698 	.word	0x0800a698
 8003bb8:	20000004 	.word	0x20000004
 8003bbc:	20000008 	.word	0x20000008
 8003bc0:	4ba0      	ldr	r3, [pc, #640]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a9f      	ldr	r2, [pc, #636]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4b9d      	ldr	r3, [pc, #628]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a9c      	ldr	r2, [pc, #624]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d013      	beq.n	8003c08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fd ffbc 	bl	8001b5c <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fd ffb8 	bl	8001b5c <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e276      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfa:	4b92      	ldr	r3, [pc, #584]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x2a8>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fd ffa8 	bl	8001b5c <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fd ffa4 	bl	8001b5c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e262      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c22:	4b88      	ldr	r3, [pc, #544]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2d0>
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d060      	beq.n	8003d00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_OscConfig+0x310>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d119      	bne.n	8003c7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d116      	bne.n	8003c7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c50:	4b7c      	ldr	r3, [pc, #496]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_OscConfig+0x328>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e23f      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	4b76      	ldr	r3, [pc, #472]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	4973      	ldr	r1, [pc, #460]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c7c:	e040      	b.n	8003d00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d023      	beq.n	8003cce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c86:	4b6f      	ldr	r3, [pc, #444]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a6e      	ldr	r2, [pc, #440]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd ff63 	bl	8001b5c <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7fd ff5f 	bl	8001b5c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e21d      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cac:	4b65      	ldr	r3, [pc, #404]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b62      	ldr	r3, [pc, #392]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	495f      	ldr	r1, [pc, #380]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
 8003ccc:	e018      	b.n	8003d00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cce:	4b5d      	ldr	r3, [pc, #372]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a5c      	ldr	r2, [pc, #368]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cda:	f7fd ff3f 	bl	8001b5c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce2:	f7fd ff3b 	bl	8001b5c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e1f9      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cf4:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f0      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d03c      	beq.n	8003d86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01c      	beq.n	8003d4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d14:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1a:	4a4a      	ldr	r2, [pc, #296]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fd ff1a 	bl	8001b5c <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d2c:	f7fd ff16 	bl	8001b5c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e1d4      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ef      	beq.n	8003d2c <HAL_RCC_OscConfig+0x3ec>
 8003d4c:	e01b      	b.n	8003d86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d54:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5e:	f7fd fefd 	bl	8001b5c <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d66:	f7fd fef9 	bl	8001b5c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e1b7      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1ef      	bne.n	8003d66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80a6 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d94:	2300      	movs	r3, #0
 8003d96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d98:	4b2a      	ldr	r3, [pc, #168]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10d      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dae:	6593      	str	r3, [r2, #88]	; 0x58
 8003db0:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc0:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <HAL_RCC_OscConfig+0x508>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d118      	bne.n	8003dfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dcc:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <HAL_RCC_OscConfig+0x508>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <HAL_RCC_OscConfig+0x508>)
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd8:	f7fd fec0 	bl	8001b5c <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de0:	f7fd febc 	bl	8001b5c <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e17a      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_RCC_OscConfig+0x508>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d108      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4d8>
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e16:	e029      	b.n	8003e6c <HAL_RCC_OscConfig+0x52c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d115      	bne.n	8003e4c <HAL_RCC_OscConfig+0x50c>
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e28:	f043 0304 	orr.w	r3, r3, #4
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	4a03      	ldr	r2, [pc, #12]	; (8003e44 <HAL_RCC_OscConfig+0x504>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e40:	e014      	b.n	8003e6c <HAL_RCC_OscConfig+0x52c>
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	4b9c      	ldr	r3, [pc, #624]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	4a9b      	ldr	r2, [pc, #620]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e5c:	4b98      	ldr	r3, [pc, #608]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	4a97      	ldr	r2, [pc, #604]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d016      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fd fe72 	bl	8001b5c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fe6e 	bl	8001b5c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e12a      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e92:	4b8b      	ldr	r3, [pc, #556]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ed      	beq.n	8003e7c <HAL_RCC_OscConfig+0x53c>
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fd fe5b 	bl	8001b5c <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fd fe57 	bl	8001b5c <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e113      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec0:	4b7f      	ldr	r3, [pc, #508]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1ed      	bne.n	8003eaa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ece:	7ffb      	ldrb	r3, [r7, #31]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed4:	4b7a      	ldr	r3, [pc, #488]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	4a79      	ldr	r2, [pc, #484]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ede:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80fe 	beq.w	80040e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	f040 80d0 	bne.w	8004094 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ef4:	4b72      	ldr	r3, [pc, #456]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 0203 	and.w	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d130      	bne.n	8003f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	3b01      	subs	r3, #1
 8003f14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d127      	bne.n	8003f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d11f      	bne.n	8003f6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f34:	2a07      	cmp	r2, #7
 8003f36:	bf14      	ite	ne
 8003f38:	2201      	movne	r2, #1
 8003f3a:	2200      	moveq	r2, #0
 8003f3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d113      	bne.n	8003f6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d109      	bne.n	8003f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	3b01      	subs	r3, #1
 8003f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d06e      	beq.n	8004048 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	d069      	beq.n	8004044 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f70:	4b53      	ldr	r3, [pc, #332]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f7c:	4b50      	ldr	r3, [pc, #320]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0ad      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f8c:	4b4c      	ldr	r3, [pc, #304]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a4b      	ldr	r2, [pc, #300]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f98:	f7fd fde0 	bl	8001b5c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd fddc 	bl	8001b5c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e09a      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb2:	4b43      	ldr	r3, [pc, #268]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fbe:	4b40      	ldr	r3, [pc, #256]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	4b40      	ldr	r3, [pc, #256]	; (80040c4 <HAL_RCC_OscConfig+0x784>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fce:	3a01      	subs	r2, #1
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	4311      	orrs	r1, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fd8:	0212      	lsls	r2, r2, #8
 8003fda:	4311      	orrs	r1, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fe0:	0852      	lsrs	r2, r2, #1
 8003fe2:	3a01      	subs	r2, #1
 8003fe4:	0552      	lsls	r2, r2, #21
 8003fe6:	4311      	orrs	r1, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fec:	0852      	lsrs	r2, r2, #1
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	0652      	lsls	r2, r2, #25
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff8:	0912      	lsrs	r2, r2, #4
 8003ffa:	0452      	lsls	r2, r2, #17
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	4930      	ldr	r1, [pc, #192]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8004000:	4313      	orrs	r3, r2
 8004002:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004004:	4b2e      	ldr	r3, [pc, #184]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 800400a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800400e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004010:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a2a      	ldr	r2, [pc, #168]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8004016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800401c:	f7fd fd9e 	bl	8001b5c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004024:	f7fd fd9a 	bl	8001b5c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e058      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004042:	e050      	b.n	80040e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e04f      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004048:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d148      	bne.n	80040e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004054:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 800405a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800405e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8004066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800406c:	f7fd fd76 	bl	8001b5c <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004074:	f7fd fd72 	bl	8001b5c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e030      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x734>
 8004092:	e028      	b.n	80040e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d023      	beq.n	80040e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <HAL_RCC_OscConfig+0x780>)
 80040a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd fd59 	bl	8001b5c <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ac:	e00c      	b.n	80040c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fd fd55 	bl	8001b5c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d905      	bls.n	80040c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e013      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
 80040c0:	40021000 	.word	0x40021000
 80040c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <HAL_RCC_OscConfig+0x7b0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1ec      	bne.n	80040ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCC_OscConfig+0x7b0>)
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	4905      	ldr	r1, [pc, #20]	; (80040f0 <HAL_RCC_OscConfig+0x7b0>)
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCC_OscConfig+0x7b4>)
 80040dc:	4013      	ands	r3, r2
 80040de:	60cb      	str	r3, [r1, #12]
 80040e0:	e001      	b.n	80040e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000
 80040f4:	feeefffc 	.word	0xfeeefffc

080040f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0e7      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800410c:	4b75      	ldr	r3, [pc, #468]	; (80042e4 <HAL_RCC_ClockConfig+0x1ec>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d910      	bls.n	800413c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b72      	ldr	r3, [pc, #456]	; (80042e4 <HAL_RCC_ClockConfig+0x1ec>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 0207 	bic.w	r2, r3, #7
 8004122:	4970      	ldr	r1, [pc, #448]	; (80042e4 <HAL_RCC_ClockConfig+0x1ec>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b6e      	ldr	r3, [pc, #440]	; (80042e4 <HAL_RCC_ClockConfig+0x1ec>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0cf      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d010      	beq.n	800416a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	4b66      	ldr	r3, [pc, #408]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004154:	429a      	cmp	r2, r3
 8004156:	d908      	bls.n	800416a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004158:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4960      	ldr	r1, [pc, #384]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d04c      	beq.n	8004210 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b03      	cmp	r3, #3
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800417e:	4b5a      	ldr	r3, [pc, #360]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d121      	bne.n	80041ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0a6      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004196:	4b54      	ldr	r3, [pc, #336]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d115      	bne.n	80041ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e09a      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ae:	4b4e      	ldr	r3, [pc, #312]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e08e      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041be:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e086      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041ce:	4b46      	ldr	r3, [pc, #280]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 0203 	bic.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4943      	ldr	r1, [pc, #268]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e0:	f7fd fcbc 	bl	8001b5c <HAL_GetTick>
 80041e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e8:	f7fd fcb8 	bl	8001b5c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e06e      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 020c 	and.w	r2, r3, #12
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	429a      	cmp	r2, r3
 800420e:	d1eb      	bne.n	80041e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004228:	429a      	cmp	r2, r3
 800422a:	d208      	bcs.n	800423e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	492b      	ldr	r1, [pc, #172]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <HAL_RCC_ClockConfig+0x1ec>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d210      	bcs.n	800426e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <HAL_RCC_ClockConfig+0x1ec>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 0207 	bic.w	r2, r3, #7
 8004254:	4923      	ldr	r1, [pc, #140]	; (80042e4 <HAL_RCC_ClockConfig+0x1ec>)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425c:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_RCC_ClockConfig+0x1ec>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d001      	beq.n	800426e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e036      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427a:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	4918      	ldr	r1, [pc, #96]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004288:	4313      	orrs	r3, r2
 800428a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4910      	ldr	r1, [pc, #64]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ac:	f000 f824 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_RCC_ClockConfig+0x1f0>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	490b      	ldr	r1, [pc, #44]	; (80042ec <HAL_RCC_ClockConfig+0x1f4>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
 80042c8:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1f8>)
 80042ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1fc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fd fb1f 	bl	8001914 <HAL_InitTick>
 80042d6:	4603      	mov	r3, r0
 80042d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042da:	7afb      	ldrb	r3, [r7, #11]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40022000 	.word	0x40022000
 80042e8:	40021000 	.word	0x40021000
 80042ec:	0800a698 	.word	0x0800a698
 80042f0:	20000004 	.word	0x20000004
 80042f4:	20000008 	.word	0x20000008

080042f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	; 0x24
 80042fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	2300      	movs	r3, #0
 8004304:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004306:	4b3e      	ldr	r3, [pc, #248]	; (8004400 <HAL_RCC_GetSysClockFreq+0x108>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004310:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <HAL_RCC_GetSysClockFreq+0x108>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x34>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b0c      	cmp	r3, #12
 8004324:	d121      	bne.n	800436a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d11e      	bne.n	800436a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800432c:	4b34      	ldr	r3, [pc, #208]	; (8004400 <HAL_RCC_GetSysClockFreq+0x108>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d107      	bne.n	8004348 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004338:	4b31      	ldr	r3, [pc, #196]	; (8004400 <HAL_RCC_GetSysClockFreq+0x108>)
 800433a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	e005      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004348:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <HAL_RCC_GetSysClockFreq+0x108>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004354:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10d      	bne.n	8004380 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004368:	e00a      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d102      	bne.n	8004376 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004370:	4b25      	ldr	r3, [pc, #148]	; (8004408 <HAL_RCC_GetSysClockFreq+0x110>)
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	e004      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b08      	cmp	r3, #8
 800437a:	d101      	bne.n	8004380 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800437c:	4b23      	ldr	r3, [pc, #140]	; (800440c <HAL_RCC_GetSysClockFreq+0x114>)
 800437e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d134      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_RCC_GetSysClockFreq+0x108>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d003      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0xa6>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d003      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0xac>
 800439c:	e005      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800439e:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <HAL_RCC_GetSysClockFreq+0x110>)
 80043a0:	617b      	str	r3, [r7, #20]
      break;
 80043a2:	e005      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_RCC_GetSysClockFreq+0x114>)
 80043a6:	617b      	str	r3, [r7, #20]
      break;
 80043a8:	e002      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	617b      	str	r3, [r7, #20]
      break;
 80043ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	3301      	adds	r3, #1
 80043bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	fb03 f202 	mul.w	r2, r3, r2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	0e5b      	lsrs	r3, r3, #25
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	3301      	adds	r3, #1
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043f0:	69bb      	ldr	r3, [r7, #24]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3724      	adds	r7, #36	; 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000
 8004404:	0800a6b0 	.word	0x0800a6b0
 8004408:	00f42400 	.word	0x00f42400
 800440c:	007a1200 	.word	0x007a1200

08004410 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_RCC_GetHCLKFreq+0x14>)
 8004416:	681b      	ldr	r3, [r3, #0]
}
 8004418:	4618      	mov	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000004 	.word	0x20000004

08004428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800442c:	f7ff fff0 	bl	8004410 <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4904      	ldr	r1, [pc, #16]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000
 8004450:	0800a6a8 	.word	0x0800a6a8

08004454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004458:	f7ff ffda 	bl	8004410 <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	0adb      	lsrs	r3, r3, #11
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4904      	ldr	r1, [pc, #16]	; (800447c <HAL_RCC_GetPCLK2Freq+0x28>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000
 800447c:	0800a6a8 	.word	0x0800a6a8

08004480 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	220f      	movs	r2, #15
 800448e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <HAL_RCC_GetClockConfig+0x5c>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0203 	and.w	r2, r3, #3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <HAL_RCC_GetClockConfig+0x5c>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_RCC_GetClockConfig+0x5c>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_RCC_GetClockConfig+0x5c>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	08db      	lsrs	r3, r3, #3
 80044ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <HAL_RCC_GetClockConfig+0x60>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0207 	and.w	r2, r3, #7
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	601a      	str	r2, [r3, #0]
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40022000 	.word	0x40022000

080044e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044f0:	4b2a      	ldr	r3, [pc, #168]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044fc:	f7ff f9bc 	bl	8003878 <HAL_PWREx_GetVoltageRange>
 8004500:	6178      	str	r0, [r7, #20]
 8004502:	e014      	b.n	800452e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	4a24      	ldr	r2, [pc, #144]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800450a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450e:	6593      	str	r3, [r2, #88]	; 0x58
 8004510:	4b22      	ldr	r3, [pc, #136]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800451c:	f7ff f9ac 	bl	8003878 <HAL_PWREx_GetVoltageRange>
 8004520:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	4a1d      	ldr	r2, [pc, #116]	; (800459c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004534:	d10b      	bne.n	800454e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d919      	bls.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2ba0      	cmp	r3, #160	; 0xa0
 8004540:	d902      	bls.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004542:	2302      	movs	r3, #2
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	e013      	b.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004548:	2301      	movs	r3, #1
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e010      	b.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b80      	cmp	r3, #128	; 0x80
 8004552:	d902      	bls.n	800455a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004554:	2303      	movs	r3, #3
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	e00a      	b.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	d102      	bne.n	8004566 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004560:	2302      	movs	r3, #2
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	e004      	b.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b70      	cmp	r3, #112	; 0x70
 800456a:	d101      	bne.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800456c:	2301      	movs	r3, #1
 800456e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 0207 	bic.w	r2, r3, #7
 8004578:	4909      	ldr	r1, [pc, #36]	; (80045a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	429a      	cmp	r2, r3
 800458c:	d001      	beq.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40021000 	.word	0x40021000
 80045a0:	40022000 	.word	0x40022000

080045a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045ac:	2300      	movs	r3, #0
 80045ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045b0:	2300      	movs	r3, #0
 80045b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d041      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045c8:	d02a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045ce:	d824      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045d4:	d008      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045da:	d81e      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e4:	d010      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045e6:	e018      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045e8:	4b86      	ldr	r3, [pc, #536]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4a85      	ldr	r2, [pc, #532]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f4:	e015      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fabb 	bl	8004b78 <RCCEx_PLLSAI1_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004606:	e00c      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3320      	adds	r3, #32
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fba6 	bl	8004d60 <RCCEx_PLLSAI2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004618:	e003      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	74fb      	strb	r3, [r7, #19]
      break;
 800461e:	e000      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004622:	7cfb      	ldrb	r3, [r7, #19]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004628:	4b76      	ldr	r3, [pc, #472]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004636:	4973      	ldr	r1, [pc, #460]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800463e:	e001      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d041      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004654:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004658:	d02a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800465a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800465e:	d824      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004664:	d008      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800466a:	d81e      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004674:	d010      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004676:	e018      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004678:	4b62      	ldr	r3, [pc, #392]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4a61      	ldr	r2, [pc, #388]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004682:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004684:	e015      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fa73 	bl	8004b78 <RCCEx_PLLSAI1_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004696:	e00c      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3320      	adds	r3, #32
 800469c:	2100      	movs	r1, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fb5e 	bl	8004d60 <RCCEx_PLLSAI2_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046a8:	e003      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	74fb      	strb	r3, [r7, #19]
      break;
 80046ae:	e000      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b2:	7cfb      	ldrb	r3, [r7, #19]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10b      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046b8:	4b52      	ldr	r3, [pc, #328]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c6:	494f      	ldr	r1, [pc, #316]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046ce:	e001      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80a0 	beq.w	8004822 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e2:	2300      	movs	r3, #0
 80046e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00d      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fc:	4b41      	ldr	r3, [pc, #260]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	4a40      	ldr	r2, [pc, #256]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004706:	6593      	str	r3, [r2, #88]	; 0x58
 8004708:	4b3e      	ldr	r3, [pc, #248]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004714:	2301      	movs	r3, #1
 8004716:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004718:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a3a      	ldr	r2, [pc, #232]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800471e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004724:	f7fd fa1a 	bl	8001b5c <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800472a:	e009      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472c:	f7fd fa16 	bl	8001b5c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d902      	bls.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	74fb      	strb	r3, [r7, #19]
        break;
 800473e:	e005      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004740:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ef      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d15c      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004752:	4b2c      	ldr	r3, [pc, #176]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01f      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	429a      	cmp	r2, r3
 800476e:	d019      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004770:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800477c:	4b21      	ldr	r3, [pc, #132]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	4a20      	ldr	r2, [pc, #128]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800478c:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800479c:	4a19      	ldr	r2, [pc, #100]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d016      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fd f9d5 	bl	8001b5c <HAL_GetTick>
 80047b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b4:	e00b      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fd f9d1 	bl	8001b5c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d902      	bls.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	74fb      	strb	r3, [r7, #19]
            break;
 80047cc:	e006      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0ec      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047dc:	7cfb      	ldrb	r3, [r7, #19]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10c      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f2:	4904      	ldr	r1, [pc, #16]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047fa:	e009      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	74bb      	strb	r3, [r7, #18]
 8004800:	e006      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480c:	7cfb      	ldrb	r3, [r7, #19]
 800480e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004810:	7c7b      	ldrb	r3, [r7, #17]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d105      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004816:	4b9e      	ldr	r3, [pc, #632]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	4a9d      	ldr	r2, [pc, #628]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004820:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800482e:	4b98      	ldr	r3, [pc, #608]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f023 0203 	bic.w	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	4994      	ldr	r1, [pc, #592]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004850:	4b8f      	ldr	r3, [pc, #572]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f023 020c 	bic.w	r2, r3, #12
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485e:	498c      	ldr	r1, [pc, #560]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004872:	4b87      	ldr	r3, [pc, #540]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	4983      	ldr	r1, [pc, #524]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004894:	4b7e      	ldr	r3, [pc, #504]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	497b      	ldr	r1, [pc, #492]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048b6:	4b76      	ldr	r3, [pc, #472]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c4:	4972      	ldr	r1, [pc, #456]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d8:	4b6d      	ldr	r3, [pc, #436]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	496a      	ldr	r1, [pc, #424]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048fa:	4b65      	ldr	r3, [pc, #404]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	4961      	ldr	r1, [pc, #388]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800491c:	4b5c      	ldr	r3, [pc, #368]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492a:	4959      	ldr	r1, [pc, #356]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800493e:	4b54      	ldr	r3, [pc, #336]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494c:	4950      	ldr	r1, [pc, #320]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004960:	4b4b      	ldr	r3, [pc, #300]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004966:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	4948      	ldr	r1, [pc, #288]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004982:	4b43      	ldr	r3, [pc, #268]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	493f      	ldr	r1, [pc, #252]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d028      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049a4:	4b3a      	ldr	r3, [pc, #232]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b2:	4937      	ldr	r1, [pc, #220]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c2:	d106      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c4:	4b32      	ldr	r3, [pc, #200]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4a31      	ldr	r2, [pc, #196]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ce:	60d3      	str	r3, [r2, #12]
 80049d0:	e011      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049da:	d10c      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	2101      	movs	r1, #1
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f8c8 	bl	8004b78 <RCCEx_PLLSAI1_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049ec:	7cfb      	ldrb	r3, [r7, #19]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049f2:	7cfb      	ldrb	r3, [r7, #19]
 80049f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d028      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a02:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	491f      	ldr	r1, [pc, #124]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a20:	d106      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a22:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2c:	60d3      	str	r3, [r2, #12]
 8004a2e:	e011      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2101      	movs	r1, #1
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 f899 	bl	8004b78 <RCCEx_PLLSAI1_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a4a:	7cfb      	ldrb	r3, [r7, #19]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d02b      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6e:	4908      	ldr	r1, [pc, #32]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7e:	d109      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a02      	ldr	r2, [pc, #8]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8a:	60d3      	str	r3, [r2, #12]
 8004a8c:	e014      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f867 	bl	8004b78 <RCCEx_PLLSAI1_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02f      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ac4:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ad2:	4928      	ldr	r1, [pc, #160]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ae2:	d10d      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	2102      	movs	r1, #2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f844 	bl	8004b78 <RCCEx_PLLSAI1_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d014      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	74bb      	strb	r3, [r7, #18]
 8004afe:	e011      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3320      	adds	r3, #32
 8004b0e:	2102      	movs	r1, #2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f925 	bl	8004d60 <RCCEx_PLLSAI2_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b3e:	490d      	ldr	r1, [pc, #52]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b52:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b62:	4904      	ldr	r1, [pc, #16]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000

08004b78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b86:	4b75      	ldr	r3, [pc, #468]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b92:	4b72      	ldr	r3, [pc, #456]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0203 	and.w	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d10d      	bne.n	8004bbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004baa:	4b6c      	ldr	r3, [pc, #432]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	091b      	lsrs	r3, r3, #4
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
       ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d047      	beq.n	8004c4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
 8004bc2:	e044      	b.n	8004c4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d018      	beq.n	8004bfe <RCCEx_PLLSAI1_Config+0x86>
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d825      	bhi.n	8004c1c <RCCEx_PLLSAI1_Config+0xa4>
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d002      	beq.n	8004bda <RCCEx_PLLSAI1_Config+0x62>
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d009      	beq.n	8004bec <RCCEx_PLLSAI1_Config+0x74>
 8004bd8:	e020      	b.n	8004c1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bda:	4b60      	ldr	r3, [pc, #384]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11d      	bne.n	8004c22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bea:	e01a      	b.n	8004c22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bec:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d116      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bfc:	e013      	b.n	8004c26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bfe:	4b57      	ldr	r3, [pc, #348]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10f      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c0a:	4b54      	ldr	r3, [pc, #336]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c1a:	e006      	b.n	8004c2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c20:	e004      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c22:	bf00      	nop
 8004c24:	e002      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c26:	bf00      	nop
 8004c28:	e000      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10d      	bne.n	8004c4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c32:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	430b      	orrs	r3, r1
 8004c48:	4944      	ldr	r1, [pc, #272]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d17d      	bne.n	8004d50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c54:	4b41      	ldr	r3, [pc, #260]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a40      	ldr	r2, [pc, #256]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c60:	f7fc ff7c 	bl	8001b5c <HAL_GetTick>
 8004c64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c66:	e009      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c68:	f7fc ff78 	bl	8001b5c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d902      	bls.n	8004c7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	73fb      	strb	r3, [r7, #15]
        break;
 8004c7a:	e005      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c7c:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1ef      	bne.n	8004c68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d160      	bne.n	8004d50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d111      	bne.n	8004cb8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c94:	4b31      	ldr	r3, [pc, #196]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6892      	ldr	r2, [r2, #8]
 8004ca4:	0211      	lsls	r1, r2, #8
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68d2      	ldr	r2, [r2, #12]
 8004caa:	0912      	lsrs	r2, r2, #4
 8004cac:	0452      	lsls	r2, r2, #17
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	492a      	ldr	r1, [pc, #168]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	610b      	str	r3, [r1, #16]
 8004cb6:	e027      	b.n	8004d08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d112      	bne.n	8004ce4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cbe:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6892      	ldr	r2, [r2, #8]
 8004cce:	0211      	lsls	r1, r2, #8
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6912      	ldr	r2, [r2, #16]
 8004cd4:	0852      	lsrs	r2, r2, #1
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	0552      	lsls	r2, r2, #21
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	491f      	ldr	r1, [pc, #124]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	610b      	str	r3, [r1, #16]
 8004ce2:	e011      	b.n	8004d08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce4:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6892      	ldr	r2, [r2, #8]
 8004cf4:	0211      	lsls	r1, r2, #8
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6952      	ldr	r2, [r2, #20]
 8004cfa:	0852      	lsrs	r2, r2, #1
 8004cfc:	3a01      	subs	r2, #1
 8004cfe:	0652      	lsls	r2, r2, #25
 8004d00:	430a      	orrs	r2, r1
 8004d02:	4916      	ldr	r1, [pc, #88]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d08:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fc ff22 	bl	8001b5c <HAL_GetTick>
 8004d18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d1a:	e009      	b.n	8004d30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d1c:	f7fc ff1e 	bl	8001b5c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d902      	bls.n	8004d30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d2e:	e005      	b.n	8004d3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ef      	beq.n	8004d1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d42:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	4904      	ldr	r1, [pc, #16]	; (8004d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000

08004d60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d6e:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d018      	beq.n	8004dac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d7a:	4b67      	ldr	r3, [pc, #412]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0203 	and.w	r2, r3, #3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d10d      	bne.n	8004da6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d92:	4b61      	ldr	r3, [pc, #388]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
       ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d047      	beq.n	8004e36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
 8004daa:	e044      	b.n	8004e36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d018      	beq.n	8004de6 <RCCEx_PLLSAI2_Config+0x86>
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d825      	bhi.n	8004e04 <RCCEx_PLLSAI2_Config+0xa4>
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d002      	beq.n	8004dc2 <RCCEx_PLLSAI2_Config+0x62>
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d009      	beq.n	8004dd4 <RCCEx_PLLSAI2_Config+0x74>
 8004dc0:	e020      	b.n	8004e04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dc2:	4b55      	ldr	r3, [pc, #340]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11d      	bne.n	8004e0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd2:	e01a      	b.n	8004e0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dd4:	4b50      	ldr	r3, [pc, #320]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d116      	bne.n	8004e0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de4:	e013      	b.n	8004e0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004de6:	4b4c      	ldr	r3, [pc, #304]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10f      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004df2:	4b49      	ldr	r3, [pc, #292]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e02:	e006      	b.n	8004e12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
      break;
 8004e08:	e004      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6819      	ldr	r1, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	4939      	ldr	r1, [pc, #228]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d167      	bne.n	8004f0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a35      	ldr	r2, [pc, #212]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e48:	f7fc fe88 	bl	8001b5c <HAL_GetTick>
 8004e4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e4e:	e009      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e50:	f7fc fe84 	bl	8001b5c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d902      	bls.n	8004e64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	73fb      	strb	r3, [r7, #15]
        break;
 8004e62:	e005      	b.n	8004e70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e64:	4b2c      	ldr	r3, [pc, #176]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ef      	bne.n	8004e50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d14a      	bne.n	8004f0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d111      	bne.n	8004ea0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e7c:	4b26      	ldr	r3, [pc, #152]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6892      	ldr	r2, [r2, #8]
 8004e8c:	0211      	lsls	r1, r2, #8
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68d2      	ldr	r2, [r2, #12]
 8004e92:	0912      	lsrs	r2, r2, #4
 8004e94:	0452      	lsls	r2, r2, #17
 8004e96:	430a      	orrs	r2, r1
 8004e98:	491f      	ldr	r1, [pc, #124]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	614b      	str	r3, [r1, #20]
 8004e9e:	e011      	b.n	8004ec4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ea8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6892      	ldr	r2, [r2, #8]
 8004eb0:	0211      	lsls	r1, r2, #8
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6912      	ldr	r2, [r2, #16]
 8004eb6:	0852      	lsrs	r2, r2, #1
 8004eb8:	3a01      	subs	r2, #1
 8004eba:	0652      	lsls	r2, r2, #25
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	4916      	ldr	r1, [pc, #88]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ece:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed0:	f7fc fe44 	bl	8001b5c <HAL_GetTick>
 8004ed4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ed6:	e009      	b.n	8004eec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ed8:	f7fc fe40 	bl	8001b5c <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d902      	bls.n	8004eec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	73fb      	strb	r3, [r7, #15]
          break;
 8004eea:	e005      	b.n	8004ef8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eec:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ef      	beq.n	8004ed8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f00:	695a      	ldr	r2, [r3, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	4904      	ldr	r1, [pc, #16]	; (8004f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000

08004f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e049      	b.n	8004fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc fbbe 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f000 fd34 	bl	80059c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d001      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e04f      	b.n	8005084 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a23      	ldr	r2, [pc, #140]	; (8005090 <HAL_TIM_Base_Start_IT+0xc4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01d      	beq.n	8005042 <HAL_TIM_Base_Start_IT+0x76>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d018      	beq.n	8005042 <HAL_TIM_Base_Start_IT+0x76>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <HAL_TIM_Base_Start_IT+0xc8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_TIM_Base_Start_IT+0x76>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <HAL_TIM_Base_Start_IT+0xcc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_TIM_Base_Start_IT+0x76>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1c      	ldr	r2, [pc, #112]	; (800509c <HAL_TIM_Base_Start_IT+0xd0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_TIM_Base_Start_IT+0x76>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_TIM_Base_Start_IT+0x76>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a19      	ldr	r2, [pc, #100]	; (80050a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d115      	bne.n	800506e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800504a:	4013      	ands	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b06      	cmp	r3, #6
 8005052:	d015      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0xb4>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505a:	d011      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506c:	e008      	b.n	8005080 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	e000      	b.n	8005082 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800
 800509c:	40000c00 	.word	0x40000c00
 80050a0:	40013400 	.word	0x40013400
 80050a4:	40014000 	.word	0x40014000
 80050a8:	00010007 	.word	0x00010007

080050ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e049      	b.n	8005152 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f841 	bl	800515a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f000 fc6c 	bl	80059c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
	...

08005170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <HAL_TIM_PWM_Start+0x24>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e03c      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b04      	cmp	r3, #4
 8005198:	d109      	bne.n	80051ae <HAL_TIM_PWM_Start+0x3e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e02f      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d109      	bne.n	80051c8 <HAL_TIM_PWM_Start+0x58>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	e022      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d109      	bne.n	80051e2 <HAL_TIM_PWM_Start+0x72>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	bf14      	ite	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	2300      	moveq	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e015      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d109      	bne.n	80051fc <HAL_TIM_PWM_Start+0x8c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e008      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	bf14      	ite	ne
 8005208:	2301      	movne	r3, #1
 800520a:	2300      	moveq	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e09c      	b.n	8005350 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0xb6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	e023      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0xc6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005234:	e01b      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0xd6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	e013      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d104      	bne.n	8005256 <HAL_TIM_PWM_Start+0xe6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005254:	e00b      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b10      	cmp	r3, #16
 800525a:	d104      	bne.n	8005266 <HAL_TIM_PWM_Start+0xf6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005264:	e003      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2201      	movs	r2, #1
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f000 ffb0 	bl	80061dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a35      	ldr	r2, [pc, #212]	; (8005358 <HAL_TIM_PWM_Start+0x1e8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <HAL_TIM_PWM_Start+0x13e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a34      	ldr	r2, [pc, #208]	; (800535c <HAL_TIM_PWM_Start+0x1ec>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00e      	beq.n	80052ae <HAL_TIM_PWM_Start+0x13e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a32      	ldr	r2, [pc, #200]	; (8005360 <HAL_TIM_PWM_Start+0x1f0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_TIM_PWM_Start+0x13e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a31      	ldr	r2, [pc, #196]	; (8005364 <HAL_TIM_PWM_Start+0x1f4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIM_PWM_Start+0x13e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2f      	ldr	r2, [pc, #188]	; (8005368 <HAL_TIM_PWM_Start+0x1f8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_PWM_Start+0x142>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <HAL_TIM_PWM_Start+0x144>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a22      	ldr	r2, [pc, #136]	; (8005358 <HAL_TIM_PWM_Start+0x1e8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01d      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d018      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a22      	ldr	r2, [pc, #136]	; (800536c <HAL_TIM_PWM_Start+0x1fc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a21      	ldr	r2, [pc, #132]	; (8005370 <HAL_TIM_PWM_Start+0x200>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1f      	ldr	r2, [pc, #124]	; (8005374 <HAL_TIM_PWM_Start+0x204>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a17      	ldr	r2, [pc, #92]	; (800535c <HAL_TIM_PWM_Start+0x1ec>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIM_PWM_Start+0x19e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <HAL_TIM_PWM_Start+0x1f0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d115      	bne.n	800533a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_TIM_PWM_Start+0x208>)
 8005316:	4013      	ands	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b06      	cmp	r3, #6
 800531e:	d015      	beq.n	800534c <HAL_TIM_PWM_Start+0x1dc>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005326:	d011      	beq.n	800534c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	e008      	b.n	800534c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e000      	b.n	800534e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40013400 	.word	0x40013400
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800
 800536c:	40000400 	.word	0x40000400
 8005370:	40000800 	.word	0x40000800
 8005374:	40000c00 	.word	0x40000c00
 8005378:	00010007 	.word	0x00010007

0800537c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d122      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b02      	cmp	r3, #2
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0202 	mvn.w	r2, #2
 80053a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fae3 	bl	800598a <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fad5 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fae6 	bl	800599e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d122      	bne.n	800542c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d11b      	bne.n	800542c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0204 	mvn.w	r2, #4
 80053fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fab9 	bl	800598a <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 faab 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fabc 	bl	800599e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b08      	cmp	r3, #8
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b08      	cmp	r3, #8
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0208 	mvn.w	r2, #8
 8005450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2204      	movs	r2, #4
 8005456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fa8f 	bl	800598a <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fa81 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fa92 	bl	800599e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0310 	and.w	r3, r3, #16
 800548a:	2b10      	cmp	r3, #16
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b10      	cmp	r3, #16
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0210 	mvn.w	r2, #16
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2208      	movs	r2, #8
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa65 	bl	800598a <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fa57 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fa68 	bl	800599e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0201 	mvn.w	r2, #1
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fb ffee 	bl	80014dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b80      	cmp	r3, #128	; 0x80
 800550c:	d10e      	bne.n	800552c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d107      	bne.n	800552c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 ff8e 	bl	8006448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553a:	d10e      	bne.n	800555a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b80      	cmp	r3, #128	; 0x80
 8005548:	d107      	bne.n	800555a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 ff81 	bl	800645c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d10e      	bne.n	8005586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d107      	bne.n	8005586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800557e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fa16 	bl	80059b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b20      	cmp	r3, #32
 8005592:	d10e      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d107      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f06f 0220 	mvn.w	r2, #32
 80055aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 ff41 	bl	8006434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e0ff      	b.n	80057da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b14      	cmp	r3, #20
 80055e6:	f200 80f0 	bhi.w	80057ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005645 	.word	0x08005645
 80055f4:	080057cb 	.word	0x080057cb
 80055f8:	080057cb 	.word	0x080057cb
 80055fc:	080057cb 	.word	0x080057cb
 8005600:	08005685 	.word	0x08005685
 8005604:	080057cb 	.word	0x080057cb
 8005608:	080057cb 	.word	0x080057cb
 800560c:	080057cb 	.word	0x080057cb
 8005610:	080056c7 	.word	0x080056c7
 8005614:	080057cb 	.word	0x080057cb
 8005618:	080057cb 	.word	0x080057cb
 800561c:	080057cb 	.word	0x080057cb
 8005620:	08005707 	.word	0x08005707
 8005624:	080057cb 	.word	0x080057cb
 8005628:	080057cb 	.word	0x080057cb
 800562c:	080057cb 	.word	0x080057cb
 8005630:	08005749 	.word	0x08005749
 8005634:	080057cb 	.word	0x080057cb
 8005638:	080057cb 	.word	0x080057cb
 800563c:	080057cb 	.word	0x080057cb
 8005640:	08005789 	.word	0x08005789
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fa56 	bl	8005afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0208 	orr.w	r2, r2, #8
 800565e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0204 	bic.w	r2, r2, #4
 800566e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6999      	ldr	r1, [r3, #24]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	619a      	str	r2, [r3, #24]
      break;
 8005682:	e0a5      	b.n	80057d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fac6 	bl	8005c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800569e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6999      	ldr	r1, [r3, #24]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	021a      	lsls	r2, r3, #8
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	619a      	str	r2, [r3, #24]
      break;
 80056c4:	e084      	b.n	80057d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fb2f 	bl	8005d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0208 	orr.w	r2, r2, #8
 80056e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0204 	bic.w	r2, r2, #4
 80056f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69d9      	ldr	r1, [r3, #28]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	61da      	str	r2, [r3, #28]
      break;
 8005704:	e064      	b.n	80057d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fb97 	bl	8005e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69d9      	ldr	r1, [r3, #28]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	021a      	lsls	r2, r3, #8
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	61da      	str	r2, [r3, #28]
      break;
 8005746:	e043      	b.n	80057d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fbe0 	bl	8005f14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0208 	orr.w	r2, r2, #8
 8005762:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0204 	bic.w	r2, r2, #4
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005786:	e023      	b.n	80057d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fc24 	bl	8005fdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	021a      	lsls	r2, r3, #8
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057c8:	e002      	b.n	80057d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	75fb      	strb	r3, [r7, #23]
      break;
 80057ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop

080057e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIM_ConfigClockSource+0x1c>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e0b6      	b.n	800596e <HAL_TIM_ConfigClockSource+0x18a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583c:	d03e      	beq.n	80058bc <HAL_TIM_ConfigClockSource+0xd8>
 800583e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005842:	f200 8087 	bhi.w	8005954 <HAL_TIM_ConfigClockSource+0x170>
 8005846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584a:	f000 8086 	beq.w	800595a <HAL_TIM_ConfigClockSource+0x176>
 800584e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005852:	d87f      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x170>
 8005854:	2b70      	cmp	r3, #112	; 0x70
 8005856:	d01a      	beq.n	800588e <HAL_TIM_ConfigClockSource+0xaa>
 8005858:	2b70      	cmp	r3, #112	; 0x70
 800585a:	d87b      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x170>
 800585c:	2b60      	cmp	r3, #96	; 0x60
 800585e:	d050      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x11e>
 8005860:	2b60      	cmp	r3, #96	; 0x60
 8005862:	d877      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x170>
 8005864:	2b50      	cmp	r3, #80	; 0x50
 8005866:	d03c      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0xfe>
 8005868:	2b50      	cmp	r3, #80	; 0x50
 800586a:	d873      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x170>
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d058      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x13e>
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d86f      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x170>
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d064      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
 8005878:	2b30      	cmp	r3, #48	; 0x30
 800587a:	d86b      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x170>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d060      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
 8005880:	2b20      	cmp	r3, #32
 8005882:	d867      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x170>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d05c      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
 8005888:	2b10      	cmp	r3, #16
 800588a:	d05a      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
 800588c:	e062      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6899      	ldr	r1, [r3, #8]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f000 fc7d 	bl	800619c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	609a      	str	r2, [r3, #8]
      break;
 80058ba:	e04f      	b.n	800595c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6899      	ldr	r1, [r3, #8]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f000 fc66 	bl	800619c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058de:	609a      	str	r2, [r3, #8]
      break;
 80058e0:	e03c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 fbda 	bl	80060a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2150      	movs	r1, #80	; 0x50
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fc33 	bl	8006166 <TIM_ITRx_SetConfig>
      break;
 8005900:	e02c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	461a      	mov	r2, r3
 8005910:	f000 fbf9 	bl	8006106 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2160      	movs	r1, #96	; 0x60
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fc23 	bl	8006166 <TIM_ITRx_SetConfig>
      break;
 8005920:	e01c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	461a      	mov	r2, r3
 8005930:	f000 fbba 	bl	80060a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2140      	movs	r1, #64	; 0x40
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fc13 	bl	8006166 <TIM_ITRx_SetConfig>
      break;
 8005940:	e00c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f000 fc0a 	bl	8006166 <TIM_ITRx_SetConfig>
      break;
 8005952:	e003      	b.n	800595c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	73fb      	strb	r3, [r7, #15]
      break;
 8005958:	e000      	b.n	800595c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800595a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a40      	ldr	r2, [pc, #256]	; (8005adc <TIM_Base_SetConfig+0x114>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e6:	d00f      	beq.n	8005a08 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a3d      	ldr	r2, [pc, #244]	; (8005ae0 <TIM_Base_SetConfig+0x118>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00b      	beq.n	8005a08 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a3c      	ldr	r2, [pc, #240]	; (8005ae4 <TIM_Base_SetConfig+0x11c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d007      	beq.n	8005a08 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3b      	ldr	r2, [pc, #236]	; (8005ae8 <TIM_Base_SetConfig+0x120>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a3a      	ldr	r2, [pc, #232]	; (8005aec <TIM_Base_SetConfig+0x124>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d108      	bne.n	8005a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2f      	ldr	r2, [pc, #188]	; (8005adc <TIM_Base_SetConfig+0x114>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d01f      	beq.n	8005a62 <TIM_Base_SetConfig+0x9a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a28:	d01b      	beq.n	8005a62 <TIM_Base_SetConfig+0x9a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ae0 <TIM_Base_SetConfig+0x118>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d017      	beq.n	8005a62 <TIM_Base_SetConfig+0x9a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <TIM_Base_SetConfig+0x11c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d013      	beq.n	8005a62 <TIM_Base_SetConfig+0x9a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <TIM_Base_SetConfig+0x120>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00f      	beq.n	8005a62 <TIM_Base_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <TIM_Base_SetConfig+0x124>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <TIM_Base_SetConfig+0x9a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a28      	ldr	r2, [pc, #160]	; (8005af0 <TIM_Base_SetConfig+0x128>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <TIM_Base_SetConfig+0x9a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a27      	ldr	r2, [pc, #156]	; (8005af4 <TIM_Base_SetConfig+0x12c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_Base_SetConfig+0x9a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a26      	ldr	r2, [pc, #152]	; (8005af8 <TIM_Base_SetConfig+0x130>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d108      	bne.n	8005a74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a10      	ldr	r2, [pc, #64]	; (8005adc <TIM_Base_SetConfig+0x114>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00f      	beq.n	8005ac0 <TIM_Base_SetConfig+0xf8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a12      	ldr	r2, [pc, #72]	; (8005aec <TIM_Base_SetConfig+0x124>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <TIM_Base_SetConfig+0xf8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <TIM_Base_SetConfig+0x128>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <TIM_Base_SetConfig+0xf8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a10      	ldr	r2, [pc, #64]	; (8005af4 <TIM_Base_SetConfig+0x12c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_Base_SetConfig+0xf8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a0f      	ldr	r2, [pc, #60]	; (8005af8 <TIM_Base_SetConfig+0x130>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d103      	bne.n	8005ac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	615a      	str	r2, [r3, #20]
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40013400 	.word	0x40013400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800

08005afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f023 0201 	bic.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f023 0302 	bic.w	r3, r3, #2
 8005b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a2c      	ldr	r2, [pc, #176]	; (8005c08 <TIM_OC1_SetConfig+0x10c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00f      	beq.n	8005b7c <TIM_OC1_SetConfig+0x80>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a2b      	ldr	r2, [pc, #172]	; (8005c0c <TIM_OC1_SetConfig+0x110>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_OC1_SetConfig+0x80>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a2a      	ldr	r2, [pc, #168]	; (8005c10 <TIM_OC1_SetConfig+0x114>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_OC1_SetConfig+0x80>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a29      	ldr	r2, [pc, #164]	; (8005c14 <TIM_OC1_SetConfig+0x118>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC1_SetConfig+0x80>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a28      	ldr	r2, [pc, #160]	; (8005c18 <TIM_OC1_SetConfig+0x11c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d10c      	bne.n	8005b96 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0308 	bic.w	r3, r3, #8
 8005b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 0304 	bic.w	r3, r3, #4
 8005b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <TIM_OC1_SetConfig+0x10c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00f      	beq.n	8005bbe <TIM_OC1_SetConfig+0xc2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1a      	ldr	r2, [pc, #104]	; (8005c0c <TIM_OC1_SetConfig+0x110>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <TIM_OC1_SetConfig+0xc2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a19      	ldr	r2, [pc, #100]	; (8005c10 <TIM_OC1_SetConfig+0x114>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d007      	beq.n	8005bbe <TIM_OC1_SetConfig+0xc2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <TIM_OC1_SetConfig+0x118>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC1_SetConfig+0xc2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <TIM_OC1_SetConfig+0x11c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40013400 	.word	0x40013400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800

08005c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0210 	bic.w	r2, r3, #16
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0320 	bic.w	r3, r3, #32
 8005c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a28      	ldr	r2, [pc, #160]	; (8005d1c <TIM_OC2_SetConfig+0x100>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <TIM_OC2_SetConfig+0x6c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a27      	ldr	r2, [pc, #156]	; (8005d20 <TIM_OC2_SetConfig+0x104>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d10d      	bne.n	8005ca4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <TIM_OC2_SetConfig+0x100>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00f      	beq.n	8005ccc <TIM_OC2_SetConfig+0xb0>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <TIM_OC2_SetConfig+0x104>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <TIM_OC2_SetConfig+0xb0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <TIM_OC2_SetConfig+0x108>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d007      	beq.n	8005ccc <TIM_OC2_SetConfig+0xb0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a1a      	ldr	r2, [pc, #104]	; (8005d28 <TIM_OC2_SetConfig+0x10c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_OC2_SetConfig+0xb0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a19      	ldr	r2, [pc, #100]	; (8005d2c <TIM_OC2_SetConfig+0x110>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d113      	bne.n	8005cf4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800

08005d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a27      	ldr	r2, [pc, #156]	; (8005e2c <TIM_OC3_SetConfig+0xfc>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d003      	beq.n	8005d9a <TIM_OC3_SetConfig+0x6a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a26      	ldr	r2, [pc, #152]	; (8005e30 <TIM_OC3_SetConfig+0x100>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d10d      	bne.n	8005db6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <TIM_OC3_SetConfig+0xfc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00f      	beq.n	8005dde <TIM_OC3_SetConfig+0xae>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1b      	ldr	r2, [pc, #108]	; (8005e30 <TIM_OC3_SetConfig+0x100>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00b      	beq.n	8005dde <TIM_OC3_SetConfig+0xae>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1a      	ldr	r2, [pc, #104]	; (8005e34 <TIM_OC3_SetConfig+0x104>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d007      	beq.n	8005dde <TIM_OC3_SetConfig+0xae>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a19      	ldr	r2, [pc, #100]	; (8005e38 <TIM_OC3_SetConfig+0x108>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d003      	beq.n	8005dde <TIM_OC3_SetConfig+0xae>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a18      	ldr	r2, [pc, #96]	; (8005e3c <TIM_OC3_SetConfig+0x10c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d113      	bne.n	8005e06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	621a      	str	r2, [r3, #32]
}
 8005e20:	bf00      	nop
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40013400 	.word	0x40013400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40014400 	.word	0x40014400
 8005e3c:	40014800 	.word	0x40014800

08005e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	031b      	lsls	r3, r3, #12
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a18      	ldr	r2, [pc, #96]	; (8005f00 <TIM_OC4_SetConfig+0xc0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_OC4_SetConfig+0x84>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <TIM_OC4_SetConfig+0xc4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_OC4_SetConfig+0x84>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <TIM_OC4_SetConfig+0xc8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_OC4_SetConfig+0x84>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <TIM_OC4_SetConfig+0xcc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC4_SetConfig+0x84>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a14      	ldr	r2, [pc, #80]	; (8005f10 <TIM_OC4_SetConfig+0xd0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d109      	bne.n	8005ed8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	019b      	lsls	r3, r3, #6
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40012c00 	.word	0x40012c00
 8005f04:	40013400 	.word	0x40013400
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800

08005f14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <TIM_OC5_SetConfig+0xb4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00f      	beq.n	8005f8e <TIM_OC5_SetConfig+0x7a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a16      	ldr	r2, [pc, #88]	; (8005fcc <TIM_OC5_SetConfig+0xb8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <TIM_OC5_SetConfig+0x7a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a15      	ldr	r2, [pc, #84]	; (8005fd0 <TIM_OC5_SetConfig+0xbc>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d007      	beq.n	8005f8e <TIM_OC5_SetConfig+0x7a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a14      	ldr	r2, [pc, #80]	; (8005fd4 <TIM_OC5_SetConfig+0xc0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_OC5_SetConfig+0x7a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a13      	ldr	r2, [pc, #76]	; (8005fd8 <TIM_OC5_SetConfig+0xc4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d109      	bne.n	8005fa2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	621a      	str	r2, [r3, #32]
}
 8005fbc:	bf00      	nop
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	40012c00 	.word	0x40012c00
 8005fcc:	40013400 	.word	0x40013400
 8005fd0:	40014000 	.word	0x40014000
 8005fd4:	40014400 	.word	0x40014400
 8005fd8:	40014800 	.word	0x40014800

08005fdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	021b      	lsls	r3, r3, #8
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	051b      	lsls	r3, r3, #20
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a18      	ldr	r2, [pc, #96]	; (8006094 <TIM_OC6_SetConfig+0xb8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00f      	beq.n	8006058 <TIM_OC6_SetConfig+0x7c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a17      	ldr	r2, [pc, #92]	; (8006098 <TIM_OC6_SetConfig+0xbc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00b      	beq.n	8006058 <TIM_OC6_SetConfig+0x7c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a16      	ldr	r2, [pc, #88]	; (800609c <TIM_OC6_SetConfig+0xc0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <TIM_OC6_SetConfig+0x7c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a15      	ldr	r2, [pc, #84]	; (80060a0 <TIM_OC6_SetConfig+0xc4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC6_SetConfig+0x7c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <TIM_OC6_SetConfig+0xc8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d109      	bne.n	800606c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	029b      	lsls	r3, r3, #10
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40013400 	.word	0x40013400
 800609c:	40014000 	.word	0x40014000
 80060a0:	40014400 	.word	0x40014400
 80060a4:	40014800 	.word	0x40014800

080060a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f023 0201 	bic.w	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f023 030a 	bic.w	r3, r3, #10
 80060e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006106:	b480      	push	{r7}
 8006108:	b087      	sub	sp, #28
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0210 	bic.w	r2, r3, #16
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	031b      	lsls	r3, r3, #12
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006142:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006166:	b480      	push	{r7}
 8006168:	b085      	sub	sp, #20
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	f043 0307 	orr.w	r3, r3, #7
 8006188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	021a      	lsls	r2, r3, #8
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	431a      	orrs	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	609a      	str	r2, [r3, #8]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	2201      	movs	r2, #1
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1a      	ldr	r2, [r3, #32]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	43db      	mvns	r3, r3
 80061fe:	401a      	ands	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1a      	ldr	r2, [r3, #32]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	fa01 f303 	lsl.w	r3, r1, r3
 8006214:	431a      	orrs	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800623c:	2302      	movs	r3, #2
 800623e:	e068      	b.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2e      	ldr	r2, [pc, #184]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a2d      	ldr	r2, [pc, #180]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d108      	bne.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800627a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d01d      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b2:	d018      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1a      	ldr	r2, [pc, #104]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a18      	ldr	r2, [pc, #96]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a13      	ldr	r2, [pc, #76]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a14      	ldr	r2, [pc, #80]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d10c      	bne.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40013400 	.word	0x40013400
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40000c00 	.word	0x40000c00
 8006334:	40014000 	.word	0x40014000

08006338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006350:	2302      	movs	r3, #2
 8006352:	e065      	b.n	8006420 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	041b      	lsls	r3, r3, #16
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a16      	ldr	r2, [pc, #88]	; (800642c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d004      	beq.n	80063e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a14      	ldr	r2, [pc, #80]	; (8006430 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d115      	bne.n	800640e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	051b      	lsls	r3, r3, #20
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40013400 	.word	0x40013400

08006434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e040      	b.n	8006504 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fb f9e2 	bl	800185c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2224      	movs	r2, #36	; 0x24
 800649c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f8c0 	bl	8006634 <UART_SetConfig>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e022      	b.n	8006504 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fb6c 	bl	8006ba4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fbf3 	bl	8006ce8 <UART_CheckIdleState>
 8006502:	4603      	mov	r3, r0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	; 0x28
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	4613      	mov	r3, r2
 800651a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006520:	2b20      	cmp	r3, #32
 8006522:	f040 8082 	bne.w	800662a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <HAL_UART_Transmit+0x26>
 800652c:	88fb      	ldrh	r3, [r7, #6]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e07a      	b.n	800662c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_UART_Transmit+0x38>
 8006540:	2302      	movs	r3, #2
 8006542:	e073      	b.n	800662c <HAL_UART_Transmit+0x120>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2221      	movs	r2, #33	; 0x21
 8006558:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800655a:	f7fb faff 	bl	8001b5c <HAL_GetTick>
 800655e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	88fa      	ldrh	r2, [r7, #6]
 8006564:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	88fa      	ldrh	r2, [r7, #6]
 800656c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006578:	d108      	bne.n	800658c <HAL_UART_Transmit+0x80>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	e003      	b.n	8006594 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006590:	2300      	movs	r3, #0
 8006592:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800659c:	e02d      	b.n	80065fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2200      	movs	r2, #0
 80065a6:	2180      	movs	r1, #128	; 0x80
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fbe6 	bl	8006d7a <UART_WaitOnFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e039      	b.n	800662c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	881a      	ldrh	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ca:	b292      	uxth	r2, r2
 80065cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	3302      	adds	r3, #2
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	e008      	b.n	80065e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	781a      	ldrb	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	b292      	uxth	r2, r2
 80065e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3301      	adds	r3, #1
 80065e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1cb      	bne.n	800659e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2200      	movs	r2, #0
 800660e:	2140      	movs	r1, #64	; 0x40
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fbb2 	bl	8006d7a <UART_WaitOnFlagUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e005      	b.n	800662c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	e000      	b.n	800662c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800662a:	2302      	movs	r3, #2
  }
}
 800662c:	4618      	mov	r0, r3
 800662e:	3720      	adds	r7, #32
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006638:	b08a      	sub	sp, #40	; 0x28
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	431a      	orrs	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	431a      	orrs	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	4313      	orrs	r3, r2
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4ba4      	ldr	r3, [pc, #656]	; (80068f4 <UART_SetConfig+0x2c0>)
 8006664:	4013      	ands	r3, r2
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	6812      	ldr	r2, [r2, #0]
 800666a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800666c:	430b      	orrs	r3, r1
 800666e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a99      	ldr	r2, [pc, #612]	; (80068f8 <UART_SetConfig+0x2c4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d004      	beq.n	80066a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669c:	4313      	orrs	r3, r2
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b0:	430a      	orrs	r2, r1
 80066b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a90      	ldr	r2, [pc, #576]	; (80068fc <UART_SetConfig+0x2c8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d126      	bne.n	800670c <UART_SetConfig+0xd8>
 80066be:	4b90      	ldr	r3, [pc, #576]	; (8006900 <UART_SetConfig+0x2cc>)
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d81b      	bhi.n	8006704 <UART_SetConfig+0xd0>
 80066cc:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <UART_SetConfig+0xa0>)
 80066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d2:	bf00      	nop
 80066d4:	080066e5 	.word	0x080066e5
 80066d8:	080066f5 	.word	0x080066f5
 80066dc:	080066ed 	.word	0x080066ed
 80066e0:	080066fd 	.word	0x080066fd
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ea:	e116      	b.n	800691a <UART_SetConfig+0x2e6>
 80066ec:	2302      	movs	r3, #2
 80066ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f2:	e112      	b.n	800691a <UART_SetConfig+0x2e6>
 80066f4:	2304      	movs	r3, #4
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fa:	e10e      	b.n	800691a <UART_SetConfig+0x2e6>
 80066fc:	2308      	movs	r3, #8
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006702:	e10a      	b.n	800691a <UART_SetConfig+0x2e6>
 8006704:	2310      	movs	r3, #16
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670a:	e106      	b.n	800691a <UART_SetConfig+0x2e6>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a7c      	ldr	r2, [pc, #496]	; (8006904 <UART_SetConfig+0x2d0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d138      	bne.n	8006788 <UART_SetConfig+0x154>
 8006716:	4b7a      	ldr	r3, [pc, #488]	; (8006900 <UART_SetConfig+0x2cc>)
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	f003 030c 	and.w	r3, r3, #12
 8006720:	2b0c      	cmp	r3, #12
 8006722:	d82d      	bhi.n	8006780 <UART_SetConfig+0x14c>
 8006724:	a201      	add	r2, pc, #4	; (adr r2, 800672c <UART_SetConfig+0xf8>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	08006761 	.word	0x08006761
 8006730:	08006781 	.word	0x08006781
 8006734:	08006781 	.word	0x08006781
 8006738:	08006781 	.word	0x08006781
 800673c:	08006771 	.word	0x08006771
 8006740:	08006781 	.word	0x08006781
 8006744:	08006781 	.word	0x08006781
 8006748:	08006781 	.word	0x08006781
 800674c:	08006769 	.word	0x08006769
 8006750:	08006781 	.word	0x08006781
 8006754:	08006781 	.word	0x08006781
 8006758:	08006781 	.word	0x08006781
 800675c:	08006779 	.word	0x08006779
 8006760:	2300      	movs	r3, #0
 8006762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006766:	e0d8      	b.n	800691a <UART_SetConfig+0x2e6>
 8006768:	2302      	movs	r3, #2
 800676a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676e:	e0d4      	b.n	800691a <UART_SetConfig+0x2e6>
 8006770:	2304      	movs	r3, #4
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006776:	e0d0      	b.n	800691a <UART_SetConfig+0x2e6>
 8006778:	2308      	movs	r3, #8
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677e:	e0cc      	b.n	800691a <UART_SetConfig+0x2e6>
 8006780:	2310      	movs	r3, #16
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006786:	e0c8      	b.n	800691a <UART_SetConfig+0x2e6>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a5e      	ldr	r2, [pc, #376]	; (8006908 <UART_SetConfig+0x2d4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d125      	bne.n	80067de <UART_SetConfig+0x1aa>
 8006792:	4b5b      	ldr	r3, [pc, #364]	; (8006900 <UART_SetConfig+0x2cc>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006798:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800679c:	2b30      	cmp	r3, #48	; 0x30
 800679e:	d016      	beq.n	80067ce <UART_SetConfig+0x19a>
 80067a0:	2b30      	cmp	r3, #48	; 0x30
 80067a2:	d818      	bhi.n	80067d6 <UART_SetConfig+0x1a2>
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d00a      	beq.n	80067be <UART_SetConfig+0x18a>
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d814      	bhi.n	80067d6 <UART_SetConfig+0x1a2>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <UART_SetConfig+0x182>
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d008      	beq.n	80067c6 <UART_SetConfig+0x192>
 80067b4:	e00f      	b.n	80067d6 <UART_SetConfig+0x1a2>
 80067b6:	2300      	movs	r3, #0
 80067b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067bc:	e0ad      	b.n	800691a <UART_SetConfig+0x2e6>
 80067be:	2302      	movs	r3, #2
 80067c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c4:	e0a9      	b.n	800691a <UART_SetConfig+0x2e6>
 80067c6:	2304      	movs	r3, #4
 80067c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067cc:	e0a5      	b.n	800691a <UART_SetConfig+0x2e6>
 80067ce:	2308      	movs	r3, #8
 80067d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d4:	e0a1      	b.n	800691a <UART_SetConfig+0x2e6>
 80067d6:	2310      	movs	r3, #16
 80067d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067dc:	e09d      	b.n	800691a <UART_SetConfig+0x2e6>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a4a      	ldr	r2, [pc, #296]	; (800690c <UART_SetConfig+0x2d8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d125      	bne.n	8006834 <UART_SetConfig+0x200>
 80067e8:	4b45      	ldr	r3, [pc, #276]	; (8006900 <UART_SetConfig+0x2cc>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067f2:	2bc0      	cmp	r3, #192	; 0xc0
 80067f4:	d016      	beq.n	8006824 <UART_SetConfig+0x1f0>
 80067f6:	2bc0      	cmp	r3, #192	; 0xc0
 80067f8:	d818      	bhi.n	800682c <UART_SetConfig+0x1f8>
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d00a      	beq.n	8006814 <UART_SetConfig+0x1e0>
 80067fe:	2b80      	cmp	r3, #128	; 0x80
 8006800:	d814      	bhi.n	800682c <UART_SetConfig+0x1f8>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <UART_SetConfig+0x1d8>
 8006806:	2b40      	cmp	r3, #64	; 0x40
 8006808:	d008      	beq.n	800681c <UART_SetConfig+0x1e8>
 800680a:	e00f      	b.n	800682c <UART_SetConfig+0x1f8>
 800680c:	2300      	movs	r3, #0
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006812:	e082      	b.n	800691a <UART_SetConfig+0x2e6>
 8006814:	2302      	movs	r3, #2
 8006816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681a:	e07e      	b.n	800691a <UART_SetConfig+0x2e6>
 800681c:	2304      	movs	r3, #4
 800681e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006822:	e07a      	b.n	800691a <UART_SetConfig+0x2e6>
 8006824:	2308      	movs	r3, #8
 8006826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682a:	e076      	b.n	800691a <UART_SetConfig+0x2e6>
 800682c:	2310      	movs	r3, #16
 800682e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006832:	e072      	b.n	800691a <UART_SetConfig+0x2e6>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a35      	ldr	r2, [pc, #212]	; (8006910 <UART_SetConfig+0x2dc>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d12a      	bne.n	8006894 <UART_SetConfig+0x260>
 800683e:	4b30      	ldr	r3, [pc, #192]	; (8006900 <UART_SetConfig+0x2cc>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684c:	d01a      	beq.n	8006884 <UART_SetConfig+0x250>
 800684e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006852:	d81b      	bhi.n	800688c <UART_SetConfig+0x258>
 8006854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006858:	d00c      	beq.n	8006874 <UART_SetConfig+0x240>
 800685a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685e:	d815      	bhi.n	800688c <UART_SetConfig+0x258>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <UART_SetConfig+0x238>
 8006864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006868:	d008      	beq.n	800687c <UART_SetConfig+0x248>
 800686a:	e00f      	b.n	800688c <UART_SetConfig+0x258>
 800686c:	2300      	movs	r3, #0
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006872:	e052      	b.n	800691a <UART_SetConfig+0x2e6>
 8006874:	2302      	movs	r3, #2
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687a:	e04e      	b.n	800691a <UART_SetConfig+0x2e6>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006882:	e04a      	b.n	800691a <UART_SetConfig+0x2e6>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800688a:	e046      	b.n	800691a <UART_SetConfig+0x2e6>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006892:	e042      	b.n	800691a <UART_SetConfig+0x2e6>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <UART_SetConfig+0x2c4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d13a      	bne.n	8006914 <UART_SetConfig+0x2e0>
 800689e:	4b18      	ldr	r3, [pc, #96]	; (8006900 <UART_SetConfig+0x2cc>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ac:	d01a      	beq.n	80068e4 <UART_SetConfig+0x2b0>
 80068ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068b2:	d81b      	bhi.n	80068ec <UART_SetConfig+0x2b8>
 80068b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b8:	d00c      	beq.n	80068d4 <UART_SetConfig+0x2a0>
 80068ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068be:	d815      	bhi.n	80068ec <UART_SetConfig+0x2b8>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <UART_SetConfig+0x298>
 80068c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c8:	d008      	beq.n	80068dc <UART_SetConfig+0x2a8>
 80068ca:	e00f      	b.n	80068ec <UART_SetConfig+0x2b8>
 80068cc:	2300      	movs	r3, #0
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d2:	e022      	b.n	800691a <UART_SetConfig+0x2e6>
 80068d4:	2302      	movs	r3, #2
 80068d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068da:	e01e      	b.n	800691a <UART_SetConfig+0x2e6>
 80068dc:	2304      	movs	r3, #4
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e2:	e01a      	b.n	800691a <UART_SetConfig+0x2e6>
 80068e4:	2308      	movs	r3, #8
 80068e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ea:	e016      	b.n	800691a <UART_SetConfig+0x2e6>
 80068ec:	2310      	movs	r3, #16
 80068ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f2:	e012      	b.n	800691a <UART_SetConfig+0x2e6>
 80068f4:	efff69f3 	.word	0xefff69f3
 80068f8:	40008000 	.word	0x40008000
 80068fc:	40013800 	.word	0x40013800
 8006900:	40021000 	.word	0x40021000
 8006904:	40004400 	.word	0x40004400
 8006908:	40004800 	.word	0x40004800
 800690c:	40004c00 	.word	0x40004c00
 8006910:	40005000 	.word	0x40005000
 8006914:	2310      	movs	r3, #16
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a9f      	ldr	r2, [pc, #636]	; (8006b9c <UART_SetConfig+0x568>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d17a      	bne.n	8006a1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006928:	2b08      	cmp	r3, #8
 800692a:	d824      	bhi.n	8006976 <UART_SetConfig+0x342>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x300>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006959 	.word	0x08006959
 8006938:	08006977 	.word	0x08006977
 800693c:	08006961 	.word	0x08006961
 8006940:	08006977 	.word	0x08006977
 8006944:	08006967 	.word	0x08006967
 8006948:	08006977 	.word	0x08006977
 800694c:	08006977 	.word	0x08006977
 8006950:	08006977 	.word	0x08006977
 8006954:	0800696f 	.word	0x0800696f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006958:	f7fd fd66 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 800695c:	61f8      	str	r0, [r7, #28]
        break;
 800695e:	e010      	b.n	8006982 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006960:	4b8f      	ldr	r3, [pc, #572]	; (8006ba0 <UART_SetConfig+0x56c>)
 8006962:	61fb      	str	r3, [r7, #28]
        break;
 8006964:	e00d      	b.n	8006982 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006966:	f7fd fcc7 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 800696a:	61f8      	str	r0, [r7, #28]
        break;
 800696c:	e009      	b.n	8006982 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006972:	61fb      	str	r3, [r7, #28]
        break;
 8006974:	e005      	b.n	8006982 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006980:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 80fb 	beq.w	8006b80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	4413      	add	r3, r2
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	429a      	cmp	r2, r3
 8006998:	d305      	bcc.n	80069a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d903      	bls.n	80069ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069ac:	e0e8      	b.n	8006b80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	2200      	movs	r2, #0
 80069b2:	461c      	mov	r4, r3
 80069b4:	4615      	mov	r5, r2
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	022b      	lsls	r3, r5, #8
 80069c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80069c4:	0222      	lsls	r2, r4, #8
 80069c6:	68f9      	ldr	r1, [r7, #12]
 80069c8:	6849      	ldr	r1, [r1, #4]
 80069ca:	0849      	lsrs	r1, r1, #1
 80069cc:	2000      	movs	r0, #0
 80069ce:	4688      	mov	r8, r1
 80069d0:	4681      	mov	r9, r0
 80069d2:	eb12 0a08 	adds.w	sl, r2, r8
 80069d6:	eb43 0b09 	adc.w	fp, r3, r9
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	603b      	str	r3, [r7, #0]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e8:	4650      	mov	r0, sl
 80069ea:	4659      	mov	r1, fp
 80069ec:	f7f9 fdd4 	bl	8000598 <__aeabi_uldivmod>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4613      	mov	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069fe:	d308      	bcc.n	8006a12 <UART_SetConfig+0x3de>
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a06:	d204      	bcs.n	8006a12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	60da      	str	r2, [r3, #12]
 8006a10:	e0b6      	b.n	8006b80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a18:	e0b2      	b.n	8006b80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a22:	d15e      	bne.n	8006ae2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d828      	bhi.n	8006a7e <UART_SetConfig+0x44a>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <UART_SetConfig+0x400>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a59 	.word	0x08006a59
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a69 	.word	0x08006a69
 8006a40:	08006a7f 	.word	0x08006a7f
 8006a44:	08006a6f 	.word	0x08006a6f
 8006a48:	08006a7f 	.word	0x08006a7f
 8006a4c:	08006a7f 	.word	0x08006a7f
 8006a50:	08006a7f 	.word	0x08006a7f
 8006a54:	08006a77 	.word	0x08006a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a58:	f7fd fce6 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8006a5c:	61f8      	str	r0, [r7, #28]
        break;
 8006a5e:	e014      	b.n	8006a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a60:	f7fd fcf8 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8006a64:	61f8      	str	r0, [r7, #28]
        break;
 8006a66:	e010      	b.n	8006a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a68:	4b4d      	ldr	r3, [pc, #308]	; (8006ba0 <UART_SetConfig+0x56c>)
 8006a6a:	61fb      	str	r3, [r7, #28]
        break;
 8006a6c:	e00d      	b.n	8006a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6e:	f7fd fc43 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 8006a72:	61f8      	str	r0, [r7, #28]
        break;
 8006a74:	e009      	b.n	8006a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7a:	61fb      	str	r3, [r7, #28]
        break;
 8006a7c:	e005      	b.n	8006a8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d077      	beq.n	8006b80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	005a      	lsls	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	441a      	add	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b0f      	cmp	r3, #15
 8006aaa:	d916      	bls.n	8006ada <UART_SetConfig+0x4a6>
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab2:	d212      	bcs.n	8006ada <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f023 030f 	bic.w	r3, r3, #15
 8006abc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	8afb      	ldrh	r3, [r7, #22]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	8afa      	ldrh	r2, [r7, #22]
 8006ad6:	60da      	str	r2, [r3, #12]
 8006ad8:	e052      	b.n	8006b80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ae0:	e04e      	b.n	8006b80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d827      	bhi.n	8006b3a <UART_SetConfig+0x506>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <UART_SetConfig+0x4bc>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b15 	.word	0x08006b15
 8006af4:	08006b1d 	.word	0x08006b1d
 8006af8:	08006b25 	.word	0x08006b25
 8006afc:	08006b3b 	.word	0x08006b3b
 8006b00:	08006b2b 	.word	0x08006b2b
 8006b04:	08006b3b 	.word	0x08006b3b
 8006b08:	08006b3b 	.word	0x08006b3b
 8006b0c:	08006b3b 	.word	0x08006b3b
 8006b10:	08006b33 	.word	0x08006b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b14:	f7fd fc88 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8006b18:	61f8      	str	r0, [r7, #28]
        break;
 8006b1a:	e014      	b.n	8006b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b1c:	f7fd fc9a 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8006b20:	61f8      	str	r0, [r7, #28]
        break;
 8006b22:	e010      	b.n	8006b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b24:	4b1e      	ldr	r3, [pc, #120]	; (8006ba0 <UART_SetConfig+0x56c>)
 8006b26:	61fb      	str	r3, [r7, #28]
        break;
 8006b28:	e00d      	b.n	8006b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b2a:	f7fd fbe5 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 8006b2e:	61f8      	str	r0, [r7, #28]
        break;
 8006b30:	e009      	b.n	8006b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b36:	61fb      	str	r3, [r7, #28]
        break;
 8006b38:	e005      	b.n	8006b46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b44:	bf00      	nop
    }

    if (pclk != 0U)
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d019      	beq.n	8006b80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	085a      	lsrs	r2, r3, #1
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	441a      	add	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2b0f      	cmp	r3, #15
 8006b64:	d909      	bls.n	8006b7a <UART_SetConfig+0x546>
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6c:	d205      	bcs.n	8006b7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60da      	str	r2, [r3, #12]
 8006b78:	e002      	b.n	8006b80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3728      	adds	r7, #40	; 0x28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40008000 	.word	0x40008000
 8006ba0:	00f42400 	.word	0x00f42400

08006ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00a      	beq.n	8006c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00a      	beq.n	8006c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d01a      	beq.n	8006cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ca2:	d10a      	bne.n	8006cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	605a      	str	r2, [r3, #4]
  }
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cf8:	f7fa ff30 	bl	8001b5c <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d10e      	bne.n	8006d2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f82d 	bl	8006d7a <UART_WaitOnFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e023      	b.n	8006d72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d10e      	bne.n	8006d56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f817 	bl	8006d7a <UART_WaitOnFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e00d      	b.n	8006d72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b09c      	sub	sp, #112	; 0x70
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	603b      	str	r3, [r7, #0]
 8006d86:	4613      	mov	r3, r2
 8006d88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d8a:	e0a5      	b.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d92:	f000 80a1 	beq.w	8006ed8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d96:	f7fa fee1 	bl	8001b5c <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d302      	bcc.n	8006dac <UART_WaitOnFlagUntilTimeout+0x32>
 8006da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d13e      	bne.n	8006e2a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dc0:	667b      	str	r3, [r7, #100]	; 0x64
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dcc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e6      	bne.n	8006dac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3308      	adds	r3, #8
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df0:	f023 0301 	bic.w	r3, r3, #1
 8006df4:	663b      	str	r3, [r7, #96]	; 0x60
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e5      	bne.n	8006dde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e067      	b.n	8006efa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d04f      	beq.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e46:	d147      	bne.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e50:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
 8006e72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e6      	bne.n	8006e52 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3308      	adds	r3, #8
 8006e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	613b      	str	r3, [r7, #16]
   return(result);
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f023 0301 	bic.w	r3, r3, #1
 8006e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ea4:	623a      	str	r2, [r7, #32]
 8006ea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	69f9      	ldr	r1, [r7, #28]
 8006eaa:	6a3a      	ldr	r2, [r7, #32]
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e5      	bne.n	8006e84 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e010      	b.n	8006efa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69da      	ldr	r2, [r3, #28]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	bf0c      	ite	eq
 8006ee8:	2301      	moveq	r3, #1
 8006eea:	2300      	movne	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	f43f af4a 	beq.w	8006d8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3770      	adds	r7, #112	; 0x70
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <__NVIC_SetPriority>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	6039      	str	r1, [r7, #0]
 8006f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	db0a      	blt.n	8006f2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	490c      	ldr	r1, [pc, #48]	; (8006f50 <__NVIC_SetPriority+0x4c>)
 8006f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f22:	0112      	lsls	r2, r2, #4
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	440b      	add	r3, r1
 8006f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f2c:	e00a      	b.n	8006f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	4908      	ldr	r1, [pc, #32]	; (8006f54 <__NVIC_SetPriority+0x50>)
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	f003 030f 	and.w	r3, r3, #15
 8006f3a:	3b04      	subs	r3, #4
 8006f3c:	0112      	lsls	r2, r2, #4
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	440b      	add	r3, r1
 8006f42:	761a      	strb	r2, [r3, #24]
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	e000e100 	.word	0xe000e100
 8006f54:	e000ed00 	.word	0xe000ed00

08006f58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <SysTick_Handler+0x1c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006f60:	f002 f8b2 	bl	80090c8 <xTaskGetSchedulerState>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d001      	beq.n	8006f6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006f6a:	f002 ff95 	bl	8009e98 <xPortSysTickHandler>
  }
}
 8006f6e:	bf00      	nop
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	e000e010 	.word	0xe000e010

08006f78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	f06f 0004 	mvn.w	r0, #4
 8006f82:	f7ff ffbf 	bl	8006f04 <__NVIC_SetPriority>
#endif
}
 8006f86:	bf00      	nop
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f92:	f3ef 8305 	mrs	r3, IPSR
 8006f96:	603b      	str	r3, [r7, #0]
  return(result);
 8006f98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f9e:	f06f 0305 	mvn.w	r3, #5
 8006fa2:	607b      	str	r3, [r7, #4]
 8006fa4:	e00c      	b.n	8006fc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006fa6:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <osKernelInitialize+0x44>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d105      	bne.n	8006fba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006fae:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <osKernelInitialize+0x44>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	607b      	str	r3, [r7, #4]
 8006fb8:	e002      	b.n	8006fc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006fba:	f04f 33ff 	mov.w	r3, #4294967295
 8006fbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fc0:	687b      	ldr	r3, [r7, #4]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000348 	.word	0x20000348

08006fd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fda:	f3ef 8305 	mrs	r3, IPSR
 8006fde:	603b      	str	r3, [r7, #0]
  return(result);
 8006fe0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <osKernelStart+0x1a>
    stat = osErrorISR;
 8006fe6:	f06f 0305 	mvn.w	r3, #5
 8006fea:	607b      	str	r3, [r7, #4]
 8006fec:	e010      	b.n	8007010 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006fee:	4b0b      	ldr	r3, [pc, #44]	; (800701c <osKernelStart+0x48>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d109      	bne.n	800700a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ff6:	f7ff ffbf 	bl	8006f78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ffa:	4b08      	ldr	r3, [pc, #32]	; (800701c <osKernelStart+0x48>)
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007000:	f001 fbf6 	bl	80087f0 <vTaskStartScheduler>
      stat = osOK;
 8007004:	2300      	movs	r3, #0
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	e002      	b.n	8007010 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800700a:	f04f 33ff 	mov.w	r3, #4294967295
 800700e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007010:	687b      	ldr	r3, [r7, #4]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000348 	.word	0x20000348

08007020 <osKernelLock>:

int32_t osKernelLock (void) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007026:	f3ef 8305 	mrs	r3, IPSR
 800702a:	603b      	str	r3, [r7, #0]
  return(result);
 800702c:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <osKernelLock+0x1a>
    lock = (int32_t)osErrorISR;
 8007032:	f06f 0305 	mvn.w	r3, #5
 8007036:	607b      	str	r3, [r7, #4]
 8007038:	e013      	b.n	8007062 <osKernelLock+0x42>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 800703a:	f002 f845 	bl	80090c8 <xTaskGetSchedulerState>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <osKernelLock+0x2a>
 8007044:	2b02      	cmp	r3, #2
 8007046:	d003      	beq.n	8007050 <osKernelLock+0x30>
 8007048:	e007      	b.n	800705a <osKernelLock+0x3a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 800704a:	2301      	movs	r3, #1
 800704c:	607b      	str	r3, [r7, #4]
        break;
 800704e:	e008      	b.n	8007062 <osKernelLock+0x42>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8007050:	f001 fc3e 	bl	80088d0 <vTaskSuspendAll>
        lock = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	607b      	str	r3, [r7, #4]
        break;
 8007058:	e003      	b.n	8007062 <osKernelLock+0x42>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 800705a:	f04f 33ff 	mov.w	r3, #4294967295
 800705e:	607b      	str	r3, [r7, #4]
        break;
 8007060:	bf00      	nop
    }
  }

  return (lock);
 8007062:	687b      	ldr	r3, [r7, #4]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007072:	f3ef 8305 	mrs	r3, IPSR
 8007076:	603b      	str	r3, [r7, #0]
  return(result);
 8007078:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <osKernelUnlock+0x1a>
    lock = (int32_t)osErrorISR;
 800707e:	f06f 0305 	mvn.w	r3, #5
 8007082:	607b      	str	r3, [r7, #4]
 8007084:	e01f      	b.n	80070c6 <osKernelUnlock+0x5a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8007086:	f002 f81f 	bl	80090c8 <xTaskGetSchedulerState>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <osKernelUnlock+0x2a>
 8007090:	2b02      	cmp	r3, #2
 8007092:	d010      	beq.n	80070b6 <osKernelUnlock+0x4a>
 8007094:	e012      	b.n	80070bc <osKernelUnlock+0x50>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8007096:	2301      	movs	r3, #1
 8007098:	607b      	str	r3, [r7, #4]

        if (xTaskResumeAll() != pdTRUE) {
 800709a:	f001 fc27 	bl	80088ec <xTaskResumeAll>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d00f      	beq.n	80070c4 <osKernelUnlock+0x58>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 80070a4:	f002 f810 	bl	80090c8 <xTaskGetSchedulerState>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10a      	bne.n	80070c4 <osKernelUnlock+0x58>
            lock = (int32_t)osError;
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295
 80070b2:	607b      	str	r3, [r7, #4]
          }
        }
        break;
 80070b4:	e006      	b.n	80070c4 <osKernelUnlock+0x58>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	607b      	str	r3, [r7, #4]
        break;
 80070ba:	e004      	b.n	80070c6 <osKernelUnlock+0x5a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 80070bc:	f04f 33ff 	mov.w	r3, #4294967295
 80070c0:	607b      	str	r3, [r7, #4]
        break;
 80070c2:	e000      	b.n	80070c6 <osKernelUnlock+0x5a>
        break;
 80070c4:	bf00      	nop
    }
  }

  return (lock);
 80070c6:	687b      	ldr	r3, [r7, #4]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08e      	sub	sp, #56	; 0x38
 80070d4:	af04      	add	r7, sp, #16
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070dc:	2300      	movs	r3, #0
 80070de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070e0:	f3ef 8305 	mrs	r3, IPSR
 80070e4:	617b      	str	r3, [r7, #20]
  return(result);
 80070e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d17e      	bne.n	80071ea <osThreadNew+0x11a>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d07b      	beq.n	80071ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80070f2:	2380      	movs	r3, #128	; 0x80
 80070f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80070f6:	2318      	movs	r3, #24
 80070f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007102:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d045      	beq.n	8007196 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <osThreadNew+0x48>
        name = attr->name;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d008      	beq.n	800713e <osThreadNew+0x6e>
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	2b38      	cmp	r3, #56	; 0x38
 8007130:	d805      	bhi.n	800713e <osThreadNew+0x6e>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <osThreadNew+0x72>
        return (NULL);
 800713e:	2300      	movs	r3, #0
 8007140:	e054      	b.n	80071ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	089b      	lsrs	r3, r3, #2
 8007150:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00e      	beq.n	8007178 <osThreadNew+0xa8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	2bbb      	cmp	r3, #187	; 0xbb
 8007160:	d90a      	bls.n	8007178 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007166:	2b00      	cmp	r3, #0
 8007168:	d006      	beq.n	8007178 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <osThreadNew+0xa8>
        mem = 1;
 8007172:	2301      	movs	r3, #1
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	e010      	b.n	800719a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10c      	bne.n	800719a <osThreadNew+0xca>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d108      	bne.n	800719a <osThreadNew+0xca>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <osThreadNew+0xca>
          mem = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	e001      	b.n	800719a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d110      	bne.n	80071c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071a8:	9202      	str	r2, [sp, #8]
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	6a3a      	ldr	r2, [r7, #32]
 80071b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f001 f92e 	bl	8008418 <xTaskCreateStatic>
 80071bc:	4603      	mov	r3, r0
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	e013      	b.n	80071ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d110      	bne.n	80071ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	f107 0310 	add.w	r3, r7, #16
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f001 f979 	bl	80084d2 <xTaskCreate>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d001      	beq.n	80071ea <osThreadNew+0x11a>
            hTask = NULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80071ea:	693b      	ldr	r3, [r7, #16]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3728      	adds	r7, #40	; 0x28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071fc:	f3ef 8305 	mrs	r3, IPSR
 8007200:	60bb      	str	r3, [r7, #8]
  return(result);
 8007202:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <osDelay+0x1c>
    stat = osErrorISR;
 8007208:	f06f 0305 	mvn.w	r3, #5
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	e007      	b.n	8007220 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <osDelay+0x2c>
      vTaskDelay(ticks);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fab4 	bl	8008788 <vTaskDelay>
    }
  }

  return (stat);
 8007220:	68fb      	ldr	r3, [r7, #12]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800722a:	b580      	push	{r7, lr}
 800722c:	b088      	sub	sp, #32
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007236:	f3ef 8305 	mrs	r3, IPSR
 800723a:	60bb      	str	r3, [r7, #8]
  return(result);
 800723c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800723e:	2b00      	cmp	r3, #0
 8007240:	d174      	bne.n	800732c <osMutexNew+0x102>
    if (attr != NULL) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	e001      	b.n	8007254 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <osMutexNew+0x3a>
      rmtx = 1U;
 800725e:	2301      	movs	r3, #1
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	e001      	b.n	8007268 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d15c      	bne.n	800732c <osMutexNew+0x102>
      mem = -1;
 8007272:	f04f 33ff 	mov.w	r3, #4294967295
 8007276:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d015      	beq.n	80072aa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d006      	beq.n	8007294 <osMutexNew+0x6a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	2b4f      	cmp	r3, #79	; 0x4f
 800728c:	d902      	bls.n	8007294 <osMutexNew+0x6a>
          mem = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	e00c      	b.n	80072ae <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d108      	bne.n	80072ae <osMutexNew+0x84>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d104      	bne.n	80072ae <osMutexNew+0x84>
            mem = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	e001      	b.n	80072ae <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d112      	bne.n	80072da <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4619      	mov	r1, r3
 80072c0:	2004      	movs	r0, #4
 80072c2:	f000 fb18 	bl	80078f6 <xQueueCreateMutexStatic>
 80072c6:	61f8      	str	r0, [r7, #28]
 80072c8:	e016      	b.n	80072f8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	4619      	mov	r1, r3
 80072d0:	2001      	movs	r0, #1
 80072d2:	f000 fb10 	bl	80078f6 <xQueueCreateMutexStatic>
 80072d6:	61f8      	str	r0, [r7, #28]
 80072d8:	e00e      	b.n	80072f8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80072e6:	2004      	movs	r0, #4
 80072e8:	f000 faed 	bl	80078c6 <xQueueCreateMutex>
 80072ec:	61f8      	str	r0, [r7, #28]
 80072ee:	e003      	b.n	80072f8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80072f0:	2001      	movs	r0, #1
 80072f2:	f000 fae8 	bl	80078c6 <xQueueCreateMutex>
 80072f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00c      	beq.n	8007318 <osMutexNew+0xee>
        if (attr != NULL) {
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <osMutexNew+0xe2>
          name = attr->name;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	e001      	b.n	8007310 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007310:	68f9      	ldr	r1, [r7, #12]
 8007312:	69f8      	ldr	r0, [r7, #28]
 8007314:	f001 f822 	bl	800835c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d006      	beq.n	800732c <osMutexNew+0x102>
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800732c:	69fb      	ldr	r3, [r7, #28]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3720      	adds	r7, #32
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007336:	b580      	push	{r7, lr}
 8007338:	b086      	sub	sp, #24
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f023 0301 	bic.w	r3, r3, #1
 8007346:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007354:	f3ef 8305 	mrs	r3, IPSR
 8007358:	60bb      	str	r3, [r7, #8]
  return(result);
 800735a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007360:	f06f 0305 	mvn.w	r3, #5
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	e02c      	b.n	80073c2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d103      	bne.n	8007376 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800736e:	f06f 0303 	mvn.w	r3, #3
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	e025      	b.n	80073c2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d011      	beq.n	80073a0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6938      	ldr	r0, [r7, #16]
 8007380:	f000 fb08 	bl	8007994 <xQueueTakeMutexRecursive>
 8007384:	4603      	mov	r3, r0
 8007386:	2b01      	cmp	r3, #1
 8007388:	d01b      	beq.n	80073c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007390:	f06f 0301 	mvn.w	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	e014      	b.n	80073c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007398:	f06f 0302 	mvn.w	r3, #2
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	e010      	b.n	80073c2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6938      	ldr	r0, [r7, #16]
 80073a4:	f000 fda6 	bl	8007ef4 <xQueueSemaphoreTake>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d009      	beq.n	80073c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80073b4:	f06f 0301 	mvn.w	r3, #1
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	e002      	b.n	80073c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80073bc:	f06f 0302 	mvn.w	r3, #2
 80073c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80073c2:	697b      	ldr	r3, [r7, #20]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f023 0301 	bic.w	r3, r3, #1
 80073da:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073e8:	f3ef 8305 	mrs	r3, IPSR
 80073ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80073ee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <osMutexRelease+0x30>
    stat = osErrorISR;
 80073f4:	f06f 0305 	mvn.w	r3, #5
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e01f      	b.n	800743c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d103      	bne.n	800740a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007402:	f06f 0303 	mvn.w	r3, #3
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	e018      	b.n	800743c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d009      	beq.n	8007424 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007410:	6938      	ldr	r0, [r7, #16]
 8007412:	f000 fa8b 	bl	800792c <xQueueGiveMutexRecursive>
 8007416:	4603      	mov	r3, r0
 8007418:	2b01      	cmp	r3, #1
 800741a:	d00f      	beq.n	800743c <osMutexRelease+0x70>
        stat = osErrorResource;
 800741c:	f06f 0302 	mvn.w	r3, #2
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	e00b      	b.n	800743c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007424:	2300      	movs	r3, #0
 8007426:	2200      	movs	r2, #0
 8007428:	2100      	movs	r1, #0
 800742a:	6938      	ldr	r0, [r7, #16]
 800742c:	f000 fae8 	bl	8007a00 <xQueueGenericSend>
 8007430:	4603      	mov	r3, r0
 8007432:	2b01      	cmp	r3, #1
 8007434:	d002      	beq.n	800743c <osMutexRelease+0x70>
        stat = osErrorResource;
 8007436:	f06f 0302 	mvn.w	r3, #2
 800743a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800743c:	697b      	ldr	r3, [r7, #20]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4a07      	ldr	r2, [pc, #28]	; (8007474 <vApplicationGetIdleTaskMemory+0x2c>)
 8007458:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	4a06      	ldr	r2, [pc, #24]	; (8007478 <vApplicationGetIdleTaskMemory+0x30>)
 800745e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2280      	movs	r2, #128	; 0x80
 8007464:	601a      	str	r2, [r3, #0]
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	2000034c 	.word	0x2000034c
 8007478:	20000408 	.word	0x20000408

0800747c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a07      	ldr	r2, [pc, #28]	; (80074a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800748c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	4a06      	ldr	r2, [pc, #24]	; (80074ac <vApplicationGetTimerTaskMemory+0x30>)
 8007492:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800749a:	601a      	str	r2, [r3, #0]
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	20000608 	.word	0x20000608
 80074ac:	200006c4 	.word	0x200006c4

080074b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f103 0208 	add.w	r2, r3, #8
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f04f 32ff 	mov.w	r2, #4294967295
 80074c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f103 0208 	add.w	r2, r3, #8
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f103 0208 	add.w	r2, r3, #8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	601a      	str	r2, [r3, #0]
}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007568:	d103      	bne.n	8007572 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	e00c      	b.n	800758c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3308      	adds	r3, #8
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e002      	b.n	8007580 <vListInsert+0x2e>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	429a      	cmp	r2, r3
 800758a:	d2f6      	bcs.n	800757a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
}
 80075b8:	bf00      	nop
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6892      	ldr	r2, [r2, #8]
 80075da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6852      	ldr	r2, [r2, #4]
 80075e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d103      	bne.n	80075f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	1e5a      	subs	r2, r3, #1
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007642:	f002 fb97 	bl	8009d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764e:	68f9      	ldr	r1, [r7, #12]
 8007650:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	441a      	add	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	3b01      	subs	r3, #1
 8007674:	68f9      	ldr	r1, [r7, #12]
 8007676:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007678:	fb01 f303 	mul.w	r3, r1, r3
 800767c:	441a      	add	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	22ff      	movs	r2, #255	; 0xff
 8007686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	22ff      	movs	r2, #255	; 0xff
 800768e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d114      	bne.n	80076c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d01a      	beq.n	80076d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3310      	adds	r3, #16
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 fb3d 	bl	8008d24 <xTaskRemoveFromEventList>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d012      	beq.n	80076d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076b0:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <xQueueGenericReset+0xcc>)
 80076b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	e009      	b.n	80076d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3310      	adds	r3, #16
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff fef2 	bl	80074b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3324      	adds	r3, #36	; 0x24
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff feed 	bl	80074b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076d6:	f002 fb7d 	bl	8009dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076da:	2301      	movs	r3, #1
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08e      	sub	sp, #56	; 0x38
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	627b      	str	r3, [r7, #36]	; 0x24
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <xQueueGenericCreateStatic+0x52>
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <xQueueGenericCreateStatic+0x56>
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <xQueueGenericCreateStatic+0x58>
 800773e:	2300      	movs	r3, #0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10a      	bne.n	800775a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	623b      	str	r3, [r7, #32]
}
 8007756:	bf00      	nop
 8007758:	e7fe      	b.n	8007758 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d102      	bne.n	8007766 <xQueueGenericCreateStatic+0x7e>
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <xQueueGenericCreateStatic+0x82>
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <xQueueGenericCreateStatic+0x84>
 800776a:	2300      	movs	r3, #0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	61fb      	str	r3, [r7, #28]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007786:	2350      	movs	r3, #80	; 0x50
 8007788:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b50      	cmp	r3, #80	; 0x50
 800778e:	d00a      	beq.n	80077a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	61bb      	str	r3, [r7, #24]
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00d      	beq.n	80077ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80077be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4613      	mov	r3, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f83f 	bl	800784c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3730      	adds	r7, #48	; 0x30
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af02      	add	r7, sp, #8
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	4613      	mov	r3, r2
 80077e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xQueueGenericCreate+0x2a>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	613b      	str	r3, [r7, #16]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	fb02 f303 	mul.w	r3, r2, r3
 800780a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	3350      	adds	r3, #80	; 0x50
 8007810:	4618      	mov	r0, r3
 8007812:	f002 fbd1 	bl	8009fb8 <pvPortMalloc>
 8007816:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d011      	beq.n	8007842 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	3350      	adds	r3, #80	; 0x50
 8007826:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007830:	79fa      	ldrb	r2, [r7, #7]
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	4613      	mov	r3, r2
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 f805 	bl	800784c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007842:	69bb      	ldr	r3, [r7, #24]
	}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e002      	b.n	800786e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800787a:	2101      	movs	r1, #1
 800787c:	69b8      	ldr	r0, [r7, #24]
 800787e:	f7ff fecb 	bl	8007618 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00e      	beq.n	80078be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80078b2:	2300      	movs	r3, #0
 80078b4:	2200      	movs	r2, #0
 80078b6:	2100      	movs	r1, #0
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f8a1 	bl	8007a00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b086      	sub	sp, #24
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	4603      	mov	r3, r0
 80078ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80078d0:	2301      	movs	r3, #1
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	2300      	movs	r3, #0
 80078d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	461a      	mov	r2, r3
 80078dc:	6939      	ldr	r1, [r7, #16]
 80078de:	6978      	ldr	r0, [r7, #20]
 80078e0:	f7ff ff7a 	bl	80077d8 <xQueueGenericCreate>
 80078e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff ffd3 	bl	8007892 <prvInitialiseMutex>

		return xNewQueue;
 80078ec:	68fb      	ldr	r3, [r7, #12]
	}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b088      	sub	sp, #32
 80078fa:	af02      	add	r7, sp, #8
 80078fc:	4603      	mov	r3, r0
 80078fe:	6039      	str	r1, [r7, #0]
 8007900:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007902:	2301      	movs	r3, #1
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	2300      	movs	r3, #0
 8007908:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2200      	movs	r2, #0
 8007912:	6939      	ldr	r1, [r7, #16]
 8007914:	6978      	ldr	r0, [r7, #20]
 8007916:	f7ff fee7 	bl	80076e8 <xQueueGenericCreateStatic>
 800791a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7ff ffb8 	bl	8007892 <prvInitialiseMutex>

		return xNewQueue;
 8007922:	68fb      	ldr	r3, [r7, #12]
	}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800792c:	b590      	push	{r4, r7, lr}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10a      	bne.n	8007954 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	60fb      	str	r3, [r7, #12]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	689c      	ldr	r4, [r3, #8]
 8007958:	f001 fba6 	bl	80090a8 <xTaskGetCurrentTaskHandle>
 800795c:	4603      	mov	r3, r0
 800795e:	429c      	cmp	r4, r3
 8007960:	d111      	bne.n	8007986 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	1e5a      	subs	r2, r3, #1
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d105      	bne.n	8007980 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007974:	2300      	movs	r3, #0
 8007976:	2200      	movs	r2, #0
 8007978:	2100      	movs	r1, #0
 800797a:	6938      	ldr	r0, [r7, #16]
 800797c:	f000 f840 	bl	8007a00 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007980:	2301      	movs	r3, #1
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	e001      	b.n	800798a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800798a:	697b      	ldr	r3, [r7, #20]
	}
 800798c:	4618      	mov	r0, r3
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	bd90      	pop	{r4, r7, pc}

08007994 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007994:	b590      	push	{r4, r7, lr}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	60fb      	str	r3, [r7, #12]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	689c      	ldr	r4, [r3, #8]
 80079c2:	f001 fb71 	bl	80090a8 <xTaskGetCurrentTaskHandle>
 80079c6:	4603      	mov	r3, r0
 80079c8:	429c      	cmp	r4, r3
 80079ca:	d107      	bne.n	80079dc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80079d6:	2301      	movs	r3, #1
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	e00c      	b.n	80079f6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6938      	ldr	r0, [r7, #16]
 80079e0:	f000 fa88 	bl	8007ef4 <xQueueSemaphoreTake>
 80079e4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80079f6:	697b      	ldr	r3, [r7, #20]
	}
 80079f8:	4618      	mov	r0, r3
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}

08007a00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08e      	sub	sp, #56	; 0x38
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <xQueueGenericSend+0x32>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d103      	bne.n	8007a40 <xQueueGenericSend+0x40>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <xQueueGenericSend+0x44>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <xQueueGenericSend+0x46>
 8007a44:	2300      	movs	r3, #0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <xQueueGenericSend+0x60>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d103      	bne.n	8007a6e <xQueueGenericSend+0x6e>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <xQueueGenericSend+0x72>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <xQueueGenericSend+0x74>
 8007a72:	2300      	movs	r3, #0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <xQueueGenericSend+0x8e>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	623b      	str	r3, [r7, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a8e:	f001 fb1b 	bl	80090c8 <xTaskGetSchedulerState>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <xQueueGenericSend+0x9e>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <xQueueGenericSend+0xa2>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <xQueueGenericSend+0xa4>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <xQueueGenericSend+0xbe>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	61fb      	str	r3, [r7, #28]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007abe:	f002 f959 	bl	8009d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d302      	bcc.n	8007ad4 <xQueueGenericSend+0xd4>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d129      	bne.n	8007b28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	68b9      	ldr	r1, [r7, #8]
 8007ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ada:	f000 fb2f 	bl	800813c <prvCopyDataToQueue>
 8007ade:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d010      	beq.n	8007b0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	3324      	adds	r3, #36	; 0x24
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f919 	bl	8008d24 <xTaskRemoveFromEventList>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d013      	beq.n	8007b20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007af8:	4b3f      	ldr	r3, [pc, #252]	; (8007bf8 <xQueueGenericSend+0x1f8>)
 8007afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	e00a      	b.n	8007b20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b10:	4b39      	ldr	r3, [pc, #228]	; (8007bf8 <xQueueGenericSend+0x1f8>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b20:	f002 f958 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e063      	b.n	8007bf0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d103      	bne.n	8007b36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b2e:	f002 f951 	bl	8009dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	e05c      	b.n	8007bf0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d106      	bne.n	8007b4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b3c:	f107 0314 	add.w	r3, r7, #20
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 f953 	bl	8008dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b46:	2301      	movs	r3, #1
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b4a:	f002 f943 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b4e:	f000 febf 	bl	80088d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b52:	f002 f90f 	bl	8009d74 <vPortEnterCritical>
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b5c:	b25b      	sxtb	r3, r3
 8007b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b62:	d103      	bne.n	8007b6c <xQueueGenericSend+0x16c>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b72:	b25b      	sxtb	r3, r3
 8007b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b78:	d103      	bne.n	8007b82 <xQueueGenericSend+0x182>
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b82:	f002 f927 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b86:	1d3a      	adds	r2, r7, #4
 8007b88:	f107 0314 	add.w	r3, r7, #20
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 f942 	bl	8008e18 <xTaskCheckForTimeOut>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d124      	bne.n	8007be4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b9c:	f000 fbc6 	bl	800832c <prvIsQueueFull>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d018      	beq.n	8007bd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	3310      	adds	r3, #16
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	4611      	mov	r1, r2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 f868 	bl	8008c84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bb6:	f000 fb51 	bl	800825c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bba:	f000 fe97 	bl	80088ec <xTaskResumeAll>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f47f af7c 	bne.w	8007abe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <xQueueGenericSend+0x1f8>)
 8007bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	e772      	b.n	8007abe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bda:	f000 fb3f 	bl	800825c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bde:	f000 fe85 	bl	80088ec <xTaskResumeAll>
 8007be2:	e76c      	b.n	8007abe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007be6:	f000 fb39 	bl	800825c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bea:	f000 fe7f 	bl	80088ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3738      	adds	r7, #56	; 0x38
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	e000ed04 	.word	0xe000ed04

08007bfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b090      	sub	sp, #64	; 0x40
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d103      	bne.n	8007c38 <xQueueGenericSendFromISR+0x3c>
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <xQueueGenericSendFromISR+0x40>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <xQueueGenericSendFromISR+0x42>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10a      	bne.n	8007c58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c54:	bf00      	nop
 8007c56:	e7fe      	b.n	8007c56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d103      	bne.n	8007c66 <xQueueGenericSendFromISR+0x6a>
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <xQueueGenericSendFromISR+0x6e>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <xQueueGenericSendFromISR+0x70>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	623b      	str	r3, [r7, #32]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c86:	f002 f957 	bl	8009f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	61fa      	str	r2, [r7, #28]
 8007ca0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ca2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ca4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d302      	bcc.n	8007cb8 <xQueueGenericSendFromISR+0xbc>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d12f      	bne.n	8007d18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cce:	f000 fa35 	bl	800813c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cda:	d112      	bne.n	8007d02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d016      	beq.n	8007d12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	3324      	adds	r3, #36	; 0x24
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f001 f81b 	bl	8008d24 <xTaskRemoveFromEventList>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00e      	beq.n	8007d12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00b      	beq.n	8007d12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e007      	b.n	8007d12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d06:	3301      	adds	r3, #1
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	b25a      	sxtb	r2, r3
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d12:	2301      	movs	r3, #1
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d16:	e001      	b.n	8007d1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3740      	adds	r7, #64	; 0x40
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08c      	sub	sp, #48	; 0x30
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <xQueueReceive+0x30>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	623b      	str	r3, [r7, #32]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <xQueueReceive+0x3e>
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <xQueueReceive+0x42>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e000      	b.n	8007d78 <xQueueReceive+0x44>
 8007d76:	2300      	movs	r3, #0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xQueueReceive+0x5e>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	61fb      	str	r3, [r7, #28]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d92:	f001 f999 	bl	80090c8 <xTaskGetSchedulerState>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <xQueueReceive+0x6e>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <xQueueReceive+0x72>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <xQueueReceive+0x74>
 8007da6:	2300      	movs	r3, #0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <xQueueReceive+0x8e>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	61bb      	str	r3, [r7, #24]
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dc2:	f001 ffd7 	bl	8009d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d01f      	beq.n	8007e12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dd2:	68b9      	ldr	r1, [r7, #8]
 8007dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd6:	f000 fa1b 	bl	8008210 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	1e5a      	subs	r2, r3, #1
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00f      	beq.n	8007e0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	3310      	adds	r3, #16
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 ff98 	bl	8008d24 <xTaskRemoveFromEventList>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007dfa:	4b3d      	ldr	r3, [pc, #244]	; (8007ef0 <xQueueReceive+0x1bc>)
 8007dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e0a:	f001 ffe3 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e069      	b.n	8007ee6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d103      	bne.n	8007e20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e18:	f001 ffdc 	bl	8009dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e062      	b.n	8007ee6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e26:	f107 0310 	add.w	r3, r7, #16
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 ffde 	bl	8008dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e30:	2301      	movs	r3, #1
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e34:	f001 ffce 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e38:	f000 fd4a 	bl	80088d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e3c:	f001 ff9a 	bl	8009d74 <vPortEnterCritical>
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4c:	d103      	bne.n	8007e56 <xQueueReceive+0x122>
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e5c:	b25b      	sxtb	r3, r3
 8007e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e62:	d103      	bne.n	8007e6c <xQueueReceive+0x138>
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e6c:	f001 ffb2 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e70:	1d3a      	adds	r2, r7, #4
 8007e72:	f107 0310 	add.w	r3, r7, #16
 8007e76:	4611      	mov	r1, r2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 ffcd 	bl	8008e18 <xTaskCheckForTimeOut>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d123      	bne.n	8007ecc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e86:	f000 fa3b 	bl	8008300 <prvIsQueueEmpty>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d017      	beq.n	8007ec0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	3324      	adds	r3, #36	; 0x24
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 fef3 	bl	8008c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea0:	f000 f9dc 	bl	800825c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ea4:	f000 fd22 	bl	80088ec <xTaskResumeAll>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d189      	bne.n	8007dc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007eae:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <xQueueReceive+0x1bc>)
 8007eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	e780      	b.n	8007dc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec2:	f000 f9cb 	bl	800825c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ec6:	f000 fd11 	bl	80088ec <xTaskResumeAll>
 8007eca:	e77a      	b.n	8007dc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ece:	f000 f9c5 	bl	800825c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ed2:	f000 fd0b 	bl	80088ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed8:	f000 fa12 	bl	8008300 <prvIsQueueEmpty>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f43f af6f 	beq.w	8007dc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3730      	adds	r7, #48	; 0x30
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08e      	sub	sp, #56	; 0x38
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007f06:	2300      	movs	r3, #0
 8007f08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	623b      	str	r3, [r7, #32]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	61fb      	str	r3, [r7, #28]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f44:	f001 f8c0 	bl	80090c8 <xTaskGetSchedulerState>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <xQueueSemaphoreTake+0x60>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <xQueueSemaphoreTake+0x64>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e000      	b.n	8007f5a <xQueueSemaphoreTake+0x66>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	61bb      	str	r3, [r7, #24]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f74:	f001 fefe 	bl	8009d74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d024      	beq.n	8007fce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	1e5a      	subs	r2, r3, #1
 8007f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007f94:	f001 fa0e 	bl	80093b4 <pvTaskIncrementMutexHeldCount>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00f      	beq.n	8007fc6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	3310      	adds	r3, #16
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 feba 	bl	8008d24 <xTaskRemoveFromEventList>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d007      	beq.n	8007fc6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fb6:	4b54      	ldr	r3, [pc, #336]	; (8008108 <xQueueSemaphoreTake+0x214>)
 8007fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fc6:	f001 ff05 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e097      	b.n	80080fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d111      	bne.n	8007ff8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	617b      	str	r3, [r7, #20]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ff0:	f001 fef0 	bl	8009dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	e082      	b.n	80080fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d106      	bne.n	800800c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ffe:	f107 030c 	add.w	r3, r7, #12
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fef2 	bl	8008dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008008:	2301      	movs	r3, #1
 800800a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800800c:	f001 fee2 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008010:	f000 fc5e 	bl	80088d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008014:	f001 feae 	bl	8009d74 <vPortEnterCritical>
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800801e:	b25b      	sxtb	r3, r3
 8008020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008024:	d103      	bne.n	800802e <xQueueSemaphoreTake+0x13a>
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008034:	b25b      	sxtb	r3, r3
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d103      	bne.n	8008044 <xQueueSemaphoreTake+0x150>
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008044:	f001 fec6 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008048:	463a      	mov	r2, r7
 800804a:	f107 030c 	add.w	r3, r7, #12
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fee1 	bl	8008e18 <xTaskCheckForTimeOut>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d132      	bne.n	80080c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800805c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800805e:	f000 f94f 	bl	8008300 <prvIsQueueEmpty>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d026      	beq.n	80080b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d109      	bne.n	8008084 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008070:	f001 fe80 	bl	8009d74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	4618      	mov	r0, r3
 800807a:	f001 f843 	bl	8009104 <xTaskPriorityInherit>
 800807e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008080:	f001 fea8 	bl	8009dd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	3324      	adds	r3, #36	; 0x24
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	4611      	mov	r1, r2
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fdf9 	bl	8008c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008094:	f000 f8e2 	bl	800825c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008098:	f000 fc28 	bl	80088ec <xTaskResumeAll>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f47f af68 	bne.w	8007f74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80080a4:	4b18      	ldr	r3, [pc, #96]	; (8008108 <xQueueSemaphoreTake+0x214>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	e75e      	b.n	8007f74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80080b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080b8:	f000 f8d0 	bl	800825c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080bc:	f000 fc16 	bl	80088ec <xTaskResumeAll>
 80080c0:	e758      	b.n	8007f74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80080c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080c4:	f000 f8ca 	bl	800825c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080c8:	f000 fc10 	bl	80088ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080ce:	f000 f917 	bl	8008300 <prvIsQueueEmpty>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f43f af4d 	beq.w	8007f74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00d      	beq.n	80080fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80080e0:	f001 fe48 	bl	8009d74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80080e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080e6:	f000 f811 	bl	800810c <prvGetDisinheritPriorityAfterTimeout>
 80080ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 f8dc 	bl	80092b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80080f8:	f001 fe6c 	bl	8009dd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3738      	adds	r7, #56	; 0x38
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d006      	beq.n	800812a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	e001      	b.n	800812e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800812e:	68fb      	ldr	r3, [r7, #12]
	}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10d      	bne.n	8008176 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d14d      	bne.n	80081fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	4618      	mov	r0, r3
 8008168:	f001 f834 	bl	80091d4 <xTaskPriorityDisinherit>
 800816c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	609a      	str	r2, [r3, #8]
 8008174:	e043      	b.n	80081fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d119      	bne.n	80081b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6858      	ldr	r0, [r3, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	461a      	mov	r2, r3
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	f002 f926 	bl	800a3d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008194:	441a      	add	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d32b      	bcc.n	80081fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	605a      	str	r2, [r3, #4]
 80081ae:	e026      	b.n	80081fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	68d8      	ldr	r0, [r3, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	461a      	mov	r2, r3
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	f002 f90c 	bl	800a3d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	425b      	negs	r3, r3
 80081ca:	441a      	add	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d207      	bcs.n	80081ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	425b      	negs	r3, r3
 80081e6:	441a      	add	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d105      	bne.n	80081fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008206:	697b      	ldr	r3, [r7, #20]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d018      	beq.n	8008254 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	441a      	add	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	429a      	cmp	r2, r3
 800823a:	d303      	bcc.n	8008244 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68d9      	ldr	r1, [r3, #12]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	461a      	mov	r2, r3
 800824e:	6838      	ldr	r0, [r7, #0]
 8008250:	f002 f8c2 	bl	800a3d8 <memcpy>
	}
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008264:	f001 fd86 	bl	8009d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800826e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008270:	e011      	b.n	8008296 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	d012      	beq.n	80082a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3324      	adds	r3, #36	; 0x24
 800827e:	4618      	mov	r0, r3
 8008280:	f000 fd50 	bl	8008d24 <xTaskRemoveFromEventList>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800828a:	f000 fe27 	bl	8008edc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	3b01      	subs	r3, #1
 8008292:	b2db      	uxtb	r3, r3
 8008294:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800829a:	2b00      	cmp	r3, #0
 800829c:	dce9      	bgt.n	8008272 <prvUnlockQueue+0x16>
 800829e:	e000      	b.n	80082a2 <prvUnlockQueue+0x46>
					break;
 80082a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	22ff      	movs	r2, #255	; 0xff
 80082a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082aa:	f001 fd93 	bl	8009dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082ae:	f001 fd61 	bl	8009d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082ba:	e011      	b.n	80082e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d012      	beq.n	80082ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3310      	adds	r3, #16
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fd2b 	bl	8008d24 <xTaskRemoveFromEventList>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082d4:	f000 fe02 	bl	8008edc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	3b01      	subs	r3, #1
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dce9      	bgt.n	80082bc <prvUnlockQueue+0x60>
 80082e8:	e000      	b.n	80082ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	22ff      	movs	r2, #255	; 0xff
 80082f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082f4:	f001 fd6e 	bl	8009dd4 <vPortExitCritical>
}
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008308:	f001 fd34 	bl	8009d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008314:	2301      	movs	r3, #1
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	e001      	b.n	800831e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800831e:	f001 fd59 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 8008322:	68fb      	ldr	r3, [r7, #12]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008334:	f001 fd1e 	bl	8009d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008340:	429a      	cmp	r2, r3
 8008342:	d102      	bne.n	800834a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008344:	2301      	movs	r3, #1
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	e001      	b.n	800834e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800834a:	2300      	movs	r3, #0
 800834c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800834e:	f001 fd41 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 8008352:	68fb      	ldr	r3, [r7, #12]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
 800836a:	e014      	b.n	8008396 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800836c:	4a0f      	ldr	r2, [pc, #60]	; (80083ac <vQueueAddToRegistry+0x50>)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10b      	bne.n	8008390 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008378:	490c      	ldr	r1, [pc, #48]	; (80083ac <vQueueAddToRegistry+0x50>)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008382:	4a0a      	ldr	r2, [pc, #40]	; (80083ac <vQueueAddToRegistry+0x50>)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4413      	add	r3, r2
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800838e:	e006      	b.n	800839e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3301      	adds	r3, #1
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b07      	cmp	r3, #7
 800839a:	d9e7      	bls.n	800836c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	20000ac4 	.word	0x20000ac4

080083b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083c0:	f001 fcd8 	bl	8009d74 <vPortEnterCritical>
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ca:	b25b      	sxtb	r3, r3
 80083cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d0:	d103      	bne.n	80083da <vQueueWaitForMessageRestricted+0x2a>
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e6:	d103      	bne.n	80083f0 <vQueueWaitForMessageRestricted+0x40>
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f0:	f001 fcf0 	bl	8009dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d106      	bne.n	800840a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	3324      	adds	r3, #36	; 0x24
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	68b9      	ldr	r1, [r7, #8]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fc61 	bl	8008ccc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800840a:	6978      	ldr	r0, [r7, #20]
 800840c:	f7ff ff26 	bl	800825c <prvUnlockQueue>
	}
 8008410:	bf00      	nop
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08e      	sub	sp, #56	; 0x38
 800841c:	af04      	add	r7, sp, #16
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
 8008424:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10a      	bne.n	8008442 <xTaskCreateStatic+0x2a>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	623b      	str	r3, [r7, #32]
}
 800843e:	bf00      	nop
 8008440:	e7fe      	b.n	8008440 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <xTaskCreateStatic+0x46>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	61fb      	str	r3, [r7, #28]
}
 800845a:	bf00      	nop
 800845c:	e7fe      	b.n	800845c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800845e:	23bc      	movs	r3, #188	; 0xbc
 8008460:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2bbc      	cmp	r3, #188	; 0xbc
 8008466:	d00a      	beq.n	800847e <xTaskCreateStatic+0x66>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	61bb      	str	r3, [r7, #24]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800847e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01e      	beq.n	80084c4 <xTaskCreateStatic+0xac>
 8008486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01b      	beq.n	80084c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008494:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	2202      	movs	r2, #2
 800849a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800849e:	2300      	movs	r3, #0
 80084a0:	9303      	str	r3, [sp, #12]
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	9302      	str	r3, [sp, #8]
 80084a6:	f107 0314 	add.w	r3, r7, #20
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	68b9      	ldr	r1, [r7, #8]
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 f850 	bl	800855c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084be:	f000 f8f3 	bl	80086a8 <prvAddNewTaskToReadyList>
 80084c2:	e001      	b.n	80084c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084c8:	697b      	ldr	r3, [r7, #20]
	}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3728      	adds	r7, #40	; 0x28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b08c      	sub	sp, #48	; 0x30
 80084d6:	af04      	add	r7, sp, #16
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	603b      	str	r3, [r7, #0]
 80084de:	4613      	mov	r3, r2
 80084e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084e2:	88fb      	ldrh	r3, [r7, #6]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 fd66 	bl	8009fb8 <pvPortMalloc>
 80084ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00e      	beq.n	8008512 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084f4:	20bc      	movs	r0, #188	; 0xbc
 80084f6:	f001 fd5f 	bl	8009fb8 <pvPortMalloc>
 80084fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	631a      	str	r2, [r3, #48]	; 0x30
 8008508:	e005      	b.n	8008516 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800850a:	6978      	ldr	r0, [r7, #20]
 800850c:	f001 fe20 	bl	800a150 <vPortFree>
 8008510:	e001      	b.n	8008516 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d017      	beq.n	800854c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008524:	88fa      	ldrh	r2, [r7, #6]
 8008526:	2300      	movs	r3, #0
 8008528:	9303      	str	r3, [sp, #12]
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	9302      	str	r3, [sp, #8]
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 f80e 	bl	800855c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008540:	69f8      	ldr	r0, [r7, #28]
 8008542:	f000 f8b1 	bl	80086a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008546:	2301      	movs	r3, #1
 8008548:	61bb      	str	r3, [r7, #24]
 800854a:	e002      	b.n	8008552 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800854c:	f04f 33ff 	mov.w	r3, #4294967295
 8008550:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008552:	69bb      	ldr	r3, [r7, #24]
	}
 8008554:	4618      	mov	r0, r3
 8008556:	3720      	adds	r7, #32
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	461a      	mov	r2, r3
 8008574:	21a5      	movs	r1, #165	; 0xa5
 8008576:	f001 ff3d 	bl	800a3f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008584:	3b01      	subs	r3, #1
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	f023 0307 	bic.w	r3, r3, #7
 8008592:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	617b      	str	r3, [r7, #20]
}
 80085b0:	bf00      	nop
 80085b2:	e7fe      	b.n	80085b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d01f      	beq.n	80085fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085ba:	2300      	movs	r3, #0
 80085bc:	61fb      	str	r3, [r7, #28]
 80085be:	e012      	b.n	80085e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	4413      	add	r3, r2
 80085c6:	7819      	ldrb	r1, [r3, #0]
 80085c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	4413      	add	r3, r2
 80085ce:	3334      	adds	r3, #52	; 0x34
 80085d0:	460a      	mov	r2, r1
 80085d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	4413      	add	r3, r2
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d006      	beq.n	80085ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	3301      	adds	r3, #1
 80085e4:	61fb      	str	r3, [r7, #28]
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	2b0f      	cmp	r3, #15
 80085ea:	d9e9      	bls.n	80085c0 <prvInitialiseNewTask+0x64>
 80085ec:	e000      	b.n	80085f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80085ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085f8:	e003      	b.n	8008602 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	2b37      	cmp	r3, #55	; 0x37
 8008606:	d901      	bls.n	800860c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008608:	2337      	movs	r3, #55	; 0x37
 800860a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008610:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008616:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	2200      	movs	r2, #0
 800861c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008620:	3304      	adds	r3, #4
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe ff64 	bl	80074f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	3318      	adds	r3, #24
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe ff5f 	bl	80074f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008636:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008646:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	2200      	movs	r2, #0
 8008654:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	3354      	adds	r3, #84	; 0x54
 800865c:	2260      	movs	r2, #96	; 0x60
 800865e:	2100      	movs	r1, #0
 8008660:	4618      	mov	r0, r3
 8008662:	f001 fec7 	bl	800a3f4 <memset>
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	4a0c      	ldr	r2, [pc, #48]	; (800869c <prvInitialiseNewTask+0x140>)
 800866a:	659a      	str	r2, [r3, #88]	; 0x58
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	4a0c      	ldr	r2, [pc, #48]	; (80086a0 <prvInitialiseNewTask+0x144>)
 8008670:	65da      	str	r2, [r3, #92]	; 0x5c
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	4a0b      	ldr	r2, [pc, #44]	; (80086a4 <prvInitialiseNewTask+0x148>)
 8008676:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	68f9      	ldr	r1, [r7, #12]
 800867c:	69b8      	ldr	r0, [r7, #24]
 800867e:	f001 fa4f 	bl	8009b20 <pxPortInitialiseStack>
 8008682:	4602      	mov	r2, r0
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008692:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008694:	bf00      	nop
 8008696:	3720      	adds	r7, #32
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	0800a700 	.word	0x0800a700
 80086a0:	0800a720 	.word	0x0800a720
 80086a4:	0800a6e0 	.word	0x0800a6e0

080086a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086b0:	f001 fb60 	bl	8009d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086b4:	4b2d      	ldr	r3, [pc, #180]	; (800876c <prvAddNewTaskToReadyList+0xc4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3301      	adds	r3, #1
 80086ba:	4a2c      	ldr	r2, [pc, #176]	; (800876c <prvAddNewTaskToReadyList+0xc4>)
 80086bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086be:	4b2c      	ldr	r3, [pc, #176]	; (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086c6:	4a2a      	ldr	r2, [pc, #168]	; (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086cc:	4b27      	ldr	r3, [pc, #156]	; (800876c <prvAddNewTaskToReadyList+0xc4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d110      	bne.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086d4:	f000 fc26 	bl	8008f24 <prvInitialiseTaskLists>
 80086d8:	e00d      	b.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086da:	4b26      	ldr	r3, [pc, #152]	; (8008774 <prvAddNewTaskToReadyList+0xcc>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086e2:	4b23      	ldr	r3, [pc, #140]	; (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d802      	bhi.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086f0:	4a1f      	ldr	r2, [pc, #124]	; (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086f6:	4b20      	ldr	r3, [pc, #128]	; (8008778 <prvAddNewTaskToReadyList+0xd0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	4a1e      	ldr	r2, [pc, #120]	; (8008778 <prvAddNewTaskToReadyList+0xd0>)
 80086fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008700:	4b1d      	ldr	r3, [pc, #116]	; (8008778 <prvAddNewTaskToReadyList+0xd0>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870c:	4b1b      	ldr	r3, [pc, #108]	; (800877c <prvAddNewTaskToReadyList+0xd4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d903      	bls.n	800871c <prvAddNewTaskToReadyList+0x74>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	4a18      	ldr	r2, [pc, #96]	; (800877c <prvAddNewTaskToReadyList+0xd4>)
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4a15      	ldr	r2, [pc, #84]	; (8008780 <prvAddNewTaskToReadyList+0xd8>)
 800872a:	441a      	add	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3304      	adds	r3, #4
 8008730:	4619      	mov	r1, r3
 8008732:	4610      	mov	r0, r2
 8008734:	f7fe fee9 	bl	800750a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008738:	f001 fb4c 	bl	8009dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800873c:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <prvAddNewTaskToReadyList+0xcc>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00e      	beq.n	8008762 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008744:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <prvAddNewTaskToReadyList+0xc8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	429a      	cmp	r2, r3
 8008750:	d207      	bcs.n	8008762 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <prvAddNewTaskToReadyList+0xdc>)
 8008754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000fd8 	.word	0x20000fd8
 8008770:	20000b04 	.word	0x20000b04
 8008774:	20000fe4 	.word	0x20000fe4
 8008778:	20000ff4 	.word	0x20000ff4
 800877c:	20000fe0 	.word	0x20000fe0
 8008780:	20000b08 	.word	0x20000b08
 8008784:	e000ed04 	.word	0xe000ed04

08008788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008790:	2300      	movs	r3, #0
 8008792:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d017      	beq.n	80087ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800879a:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <vTaskDelay+0x60>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <vTaskDelay+0x30>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	60bb      	str	r3, [r7, #8]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087b8:	f000 f88a 	bl	80088d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087bc:	2100      	movs	r1, #0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fe0c 	bl	80093dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087c4:	f000 f892 	bl	80088ec <xTaskResumeAll>
 80087c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d107      	bne.n	80087e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <vTaskDelay+0x64>)
 80087d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	20001000 	.word	0x20001000
 80087ec:	e000ed04 	.word	0xe000ed04

080087f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08a      	sub	sp, #40	; 0x28
 80087f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087fe:	463a      	mov	r2, r7
 8008800:	1d39      	adds	r1, r7, #4
 8008802:	f107 0308 	add.w	r3, r7, #8
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe fe1e 	bl	8007448 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	9202      	str	r2, [sp, #8]
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	2300      	movs	r3, #0
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	2300      	movs	r3, #0
 800881c:	460a      	mov	r2, r1
 800881e:	4924      	ldr	r1, [pc, #144]	; (80088b0 <vTaskStartScheduler+0xc0>)
 8008820:	4824      	ldr	r0, [pc, #144]	; (80088b4 <vTaskStartScheduler+0xc4>)
 8008822:	f7ff fdf9 	bl	8008418 <xTaskCreateStatic>
 8008826:	4603      	mov	r3, r0
 8008828:	4a23      	ldr	r2, [pc, #140]	; (80088b8 <vTaskStartScheduler+0xc8>)
 800882a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800882c:	4b22      	ldr	r3, [pc, #136]	; (80088b8 <vTaskStartScheduler+0xc8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008834:	2301      	movs	r3, #1
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	e001      	b.n	800883e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800883a:	2300      	movs	r3, #0
 800883c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d102      	bne.n	800884a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008844:	f000 fe1e 	bl	8009484 <xTimerCreateTimerTask>
 8008848:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d11b      	bne.n	8008888 <vTaskStartScheduler+0x98>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	613b      	str	r3, [r7, #16]
}
 8008862:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008864:	4b15      	ldr	r3, [pc, #84]	; (80088bc <vTaskStartScheduler+0xcc>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3354      	adds	r3, #84	; 0x54
 800886a:	4a15      	ldr	r2, [pc, #84]	; (80088c0 <vTaskStartScheduler+0xd0>)
 800886c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800886e:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <vTaskStartScheduler+0xd4>)
 8008870:	f04f 32ff 	mov.w	r2, #4294967295
 8008874:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008876:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <vTaskStartScheduler+0xd8>)
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800887c:	4b13      	ldr	r3, [pc, #76]	; (80088cc <vTaskStartScheduler+0xdc>)
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008882:	f001 f9d5 	bl	8009c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008886:	e00e      	b.n	80088a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888e:	d10a      	bne.n	80088a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	60fb      	str	r3, [r7, #12]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <vTaskStartScheduler+0xb4>
}
 80088a6:	bf00      	nop
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	0800a604 	.word	0x0800a604
 80088b4:	08008ef5 	.word	0x08008ef5
 80088b8:	20000ffc 	.word	0x20000ffc
 80088bc:	20000b04 	.word	0x20000b04
 80088c0:	20000014 	.word	0x20000014
 80088c4:	20000ff8 	.word	0x20000ff8
 80088c8:	20000fe4 	.word	0x20000fe4
 80088cc:	20000fdc 	.word	0x20000fdc

080088d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088d0:	b480      	push	{r7}
 80088d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088d4:	4b04      	ldr	r3, [pc, #16]	; (80088e8 <vTaskSuspendAll+0x18>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3301      	adds	r3, #1
 80088da:	4a03      	ldr	r2, [pc, #12]	; (80088e8 <vTaskSuspendAll+0x18>)
 80088dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088de:	bf00      	nop
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	20001000 	.word	0x20001000

080088ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088fa:	4b42      	ldr	r3, [pc, #264]	; (8008a04 <xTaskResumeAll+0x118>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10a      	bne.n	8008918 <xTaskResumeAll+0x2c>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	603b      	str	r3, [r7, #0]
}
 8008914:	bf00      	nop
 8008916:	e7fe      	b.n	8008916 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008918:	f001 fa2c 	bl	8009d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800891c:	4b39      	ldr	r3, [pc, #228]	; (8008a04 <xTaskResumeAll+0x118>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3b01      	subs	r3, #1
 8008922:	4a38      	ldr	r2, [pc, #224]	; (8008a04 <xTaskResumeAll+0x118>)
 8008924:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008926:	4b37      	ldr	r3, [pc, #220]	; (8008a04 <xTaskResumeAll+0x118>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d162      	bne.n	80089f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800892e:	4b36      	ldr	r3, [pc, #216]	; (8008a08 <xTaskResumeAll+0x11c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d05e      	beq.n	80089f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008936:	e02f      	b.n	8008998 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008938:	4b34      	ldr	r3, [pc, #208]	; (8008a0c <xTaskResumeAll+0x120>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3318      	adds	r3, #24
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe fe3d 	bl	80075c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3304      	adds	r3, #4
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fe38 	bl	80075c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4b2d      	ldr	r3, [pc, #180]	; (8008a10 <xTaskResumeAll+0x124>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d903      	bls.n	8008968 <xTaskResumeAll+0x7c>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	4a2a      	ldr	r2, [pc, #168]	; (8008a10 <xTaskResumeAll+0x124>)
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4a27      	ldr	r2, [pc, #156]	; (8008a14 <xTaskResumeAll+0x128>)
 8008976:	441a      	add	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3304      	adds	r3, #4
 800897c:	4619      	mov	r1, r3
 800897e:	4610      	mov	r0, r2
 8008980:	f7fe fdc3 	bl	800750a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4b23      	ldr	r3, [pc, #140]	; (8008a18 <xTaskResumeAll+0x12c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	429a      	cmp	r2, r3
 8008990:	d302      	bcc.n	8008998 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008992:	4b22      	ldr	r3, [pc, #136]	; (8008a1c <xTaskResumeAll+0x130>)
 8008994:	2201      	movs	r2, #1
 8008996:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008998:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <xTaskResumeAll+0x120>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1cb      	bne.n	8008938 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089a6:	f000 fb5f 	bl	8009068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089aa:	4b1d      	ldr	r3, [pc, #116]	; (8008a20 <xTaskResumeAll+0x134>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d010      	beq.n	80089d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089b6:	f000 f847 	bl	8008a48 <xTaskIncrementTick>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80089c0:	4b16      	ldr	r3, [pc, #88]	; (8008a1c <xTaskResumeAll+0x130>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1f1      	bne.n	80089b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80089d2:	4b13      	ldr	r3, [pc, #76]	; (8008a20 <xTaskResumeAll+0x134>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089d8:	4b10      	ldr	r3, [pc, #64]	; (8008a1c <xTaskResumeAll+0x130>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d009      	beq.n	80089f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089e0:	2301      	movs	r3, #1
 80089e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089e4:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <xTaskResumeAll+0x138>)
 80089e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089f4:	f001 f9ee 	bl	8009dd4 <vPortExitCritical>

	return xAlreadyYielded;
 80089f8:	68bb      	ldr	r3, [r7, #8]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20001000 	.word	0x20001000
 8008a08:	20000fd8 	.word	0x20000fd8
 8008a0c:	20000f98 	.word	0x20000f98
 8008a10:	20000fe0 	.word	0x20000fe0
 8008a14:	20000b08 	.word	0x20000b08
 8008a18:	20000b04 	.word	0x20000b04
 8008a1c:	20000fec 	.word	0x20000fec
 8008a20:	20000fe8 	.word	0x20000fe8
 8008a24:	e000ed04 	.word	0xe000ed04

08008a28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <xTaskGetTickCount+0x1c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a34:	687b      	ldr	r3, [r7, #4]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20000fdc 	.word	0x20000fdc

08008a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a52:	4b4f      	ldr	r3, [pc, #316]	; (8008b90 <xTaskIncrementTick+0x148>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f040 808f 	bne.w	8008b7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a5c:	4b4d      	ldr	r3, [pc, #308]	; (8008b94 <xTaskIncrementTick+0x14c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3301      	adds	r3, #1
 8008a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a64:	4a4b      	ldr	r2, [pc, #300]	; (8008b94 <xTaskIncrementTick+0x14c>)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d120      	bne.n	8008ab2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a70:	4b49      	ldr	r3, [pc, #292]	; (8008b98 <xTaskIncrementTick+0x150>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	603b      	str	r3, [r7, #0]
}
 8008a8c:	bf00      	nop
 8008a8e:	e7fe      	b.n	8008a8e <xTaskIncrementTick+0x46>
 8008a90:	4b41      	ldr	r3, [pc, #260]	; (8008b98 <xTaskIncrementTick+0x150>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	4b41      	ldr	r3, [pc, #260]	; (8008b9c <xTaskIncrementTick+0x154>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a3f      	ldr	r2, [pc, #252]	; (8008b98 <xTaskIncrementTick+0x150>)
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	4a3f      	ldr	r2, [pc, #252]	; (8008b9c <xTaskIncrementTick+0x154>)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	4b3e      	ldr	r3, [pc, #248]	; (8008ba0 <xTaskIncrementTick+0x158>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	4a3d      	ldr	r2, [pc, #244]	; (8008ba0 <xTaskIncrementTick+0x158>)
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	f000 fadb 	bl	8009068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ab2:	4b3c      	ldr	r3, [pc, #240]	; (8008ba4 <xTaskIncrementTick+0x15c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d349      	bcc.n	8008b50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008abc:	4b36      	ldr	r3, [pc, #216]	; (8008b98 <xTaskIncrementTick+0x150>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d104      	bne.n	8008ad0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac6:	4b37      	ldr	r3, [pc, #220]	; (8008ba4 <xTaskIncrementTick+0x15c>)
 8008ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8008acc:	601a      	str	r2, [r3, #0]
					break;
 8008ace:	e03f      	b.n	8008b50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad0:	4b31      	ldr	r3, [pc, #196]	; (8008b98 <xTaskIncrementTick+0x150>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d203      	bcs.n	8008af0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ae8:	4a2e      	ldr	r2, [pc, #184]	; (8008ba4 <xTaskIncrementTick+0x15c>)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008aee:	e02f      	b.n	8008b50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	3304      	adds	r3, #4
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fd65 	bl	80075c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d004      	beq.n	8008b0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	3318      	adds	r3, #24
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fd5c 	bl	80075c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	4b25      	ldr	r3, [pc, #148]	; (8008ba8 <xTaskIncrementTick+0x160>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d903      	bls.n	8008b20 <xTaskIncrementTick+0xd8>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	4a22      	ldr	r2, [pc, #136]	; (8008ba8 <xTaskIncrementTick+0x160>)
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4a1f      	ldr	r2, [pc, #124]	; (8008bac <xTaskIncrementTick+0x164>)
 8008b2e:	441a      	add	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	3304      	adds	r3, #4
 8008b34:	4619      	mov	r1, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	f7fe fce7 	bl	800750a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b40:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <xTaskIncrementTick+0x168>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d3b8      	bcc.n	8008abc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b4e:	e7b5      	b.n	8008abc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b50:	4b17      	ldr	r3, [pc, #92]	; (8008bb0 <xTaskIncrementTick+0x168>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b56:	4915      	ldr	r1, [pc, #84]	; (8008bac <xTaskIncrementTick+0x164>)
 8008b58:	4613      	mov	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	440b      	add	r3, r1
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d901      	bls.n	8008b6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b6c:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <xTaskIncrementTick+0x16c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d007      	beq.n	8008b84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b74:	2301      	movs	r3, #1
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	e004      	b.n	8008b84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b7a:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <xTaskIncrementTick+0x170>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	4a0d      	ldr	r2, [pc, #52]	; (8008bb8 <xTaskIncrementTick+0x170>)
 8008b82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b84:	697b      	ldr	r3, [r7, #20]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3718      	adds	r7, #24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20001000 	.word	0x20001000
 8008b94:	20000fdc 	.word	0x20000fdc
 8008b98:	20000f90 	.word	0x20000f90
 8008b9c:	20000f94 	.word	0x20000f94
 8008ba0:	20000ff0 	.word	0x20000ff0
 8008ba4:	20000ff8 	.word	0x20000ff8
 8008ba8:	20000fe0 	.word	0x20000fe0
 8008bac:	20000b08 	.word	0x20000b08
 8008bb0:	20000b04 	.word	0x20000b04
 8008bb4:	20000fec 	.word	0x20000fec
 8008bb8:	20000fe8 	.word	0x20000fe8

08008bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bc2:	4b2a      	ldr	r3, [pc, #168]	; (8008c6c <vTaskSwitchContext+0xb0>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bca:	4b29      	ldr	r3, [pc, #164]	; (8008c70 <vTaskSwitchContext+0xb4>)
 8008bcc:	2201      	movs	r2, #1
 8008bce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bd0:	e046      	b.n	8008c60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008bd2:	4b27      	ldr	r3, [pc, #156]	; (8008c70 <vTaskSwitchContext+0xb4>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd8:	4b26      	ldr	r3, [pc, #152]	; (8008c74 <vTaskSwitchContext+0xb8>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60fb      	str	r3, [r7, #12]
 8008bde:	e010      	b.n	8008c02 <vTaskSwitchContext+0x46>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <vTaskSwitchContext+0x40>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	607b      	str	r3, [r7, #4]
}
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <vTaskSwitchContext+0x3e>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	491d      	ldr	r1, [pc, #116]	; (8008c78 <vTaskSwitchContext+0xbc>)
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0e4      	beq.n	8008be0 <vTaskSwitchContext+0x24>
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4a15      	ldr	r2, [pc, #84]	; (8008c78 <vTaskSwitchContext+0xbc>)
 8008c22:	4413      	add	r3, r2
 8008c24:	60bb      	str	r3, [r7, #8]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	605a      	str	r2, [r3, #4]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	3308      	adds	r3, #8
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d104      	bne.n	8008c46 <vTaskSwitchContext+0x8a>
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	605a      	str	r2, [r3, #4]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	4a0b      	ldr	r2, [pc, #44]	; (8008c7c <vTaskSwitchContext+0xc0>)
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	4a08      	ldr	r2, [pc, #32]	; (8008c74 <vTaskSwitchContext+0xb8>)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c56:	4b09      	ldr	r3, [pc, #36]	; (8008c7c <vTaskSwitchContext+0xc0>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3354      	adds	r3, #84	; 0x54
 8008c5c:	4a08      	ldr	r2, [pc, #32]	; (8008c80 <vTaskSwitchContext+0xc4>)
 8008c5e:	6013      	str	r3, [r2, #0]
}
 8008c60:	bf00      	nop
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	20001000 	.word	0x20001000
 8008c70:	20000fec 	.word	0x20000fec
 8008c74:	20000fe0 	.word	0x20000fe0
 8008c78:	20000b08 	.word	0x20000b08
 8008c7c:	20000b04 	.word	0x20000b04
 8008c80:	20000014 	.word	0x20000014

08008c84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10a      	bne.n	8008caa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	60fb      	str	r3, [r7, #12]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008caa:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <vTaskPlaceOnEventList+0x44>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3318      	adds	r3, #24
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7fe fc4d 	bl	8007552 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cb8:	2101      	movs	r1, #1
 8008cba:	6838      	ldr	r0, [r7, #0]
 8008cbc:	f000 fb8e 	bl	80093dc <prvAddCurrentTaskToDelayedList>
}
 8008cc0:	bf00      	nop
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	20000b04 	.word	0x20000b04

08008ccc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	617b      	str	r3, [r7, #20]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cf4:	4b0a      	ldr	r3, [pc, #40]	; (8008d20 <vTaskPlaceOnEventListRestricted+0x54>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3318      	adds	r3, #24
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7fe fc04 	bl	800750a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d08:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	68b8      	ldr	r0, [r7, #8]
 8008d12:	f000 fb63 	bl	80093dc <prvAddCurrentTaskToDelayedList>
	}
 8008d16:	bf00      	nop
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20000b04 	.word	0x20000b04

08008d24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	60fb      	str	r3, [r7, #12]
}
 8008d4c:	bf00      	nop
 8008d4e:	e7fe      	b.n	8008d4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	3318      	adds	r3, #24
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe fc35 	bl	80075c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d5a:	4b1e      	ldr	r3, [pc, #120]	; (8008dd4 <xTaskRemoveFromEventList+0xb0>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d11d      	bne.n	8008d9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	3304      	adds	r3, #4
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe fc2c 	bl	80075c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	4b19      	ldr	r3, [pc, #100]	; (8008dd8 <xTaskRemoveFromEventList+0xb4>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d903      	bls.n	8008d80 <xTaskRemoveFromEventList+0x5c>
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	4a16      	ldr	r2, [pc, #88]	; (8008dd8 <xTaskRemoveFromEventList+0xb4>)
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4a13      	ldr	r2, [pc, #76]	; (8008ddc <xTaskRemoveFromEventList+0xb8>)
 8008d8e:	441a      	add	r2, r3
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f7fe fbb7 	bl	800750a <vListInsertEnd>
 8008d9c:	e005      	b.n	8008daa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	3318      	adds	r3, #24
 8008da2:	4619      	mov	r1, r3
 8008da4:	480e      	ldr	r0, [pc, #56]	; (8008de0 <xTaskRemoveFromEventList+0xbc>)
 8008da6:	f7fe fbb0 	bl	800750a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dae:	4b0d      	ldr	r3, [pc, #52]	; (8008de4 <xTaskRemoveFromEventList+0xc0>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d905      	bls.n	8008dc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008db8:	2301      	movs	r3, #1
 8008dba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <xTaskRemoveFromEventList+0xc4>)
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	e001      	b.n	8008dc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008dc8:	697b      	ldr	r3, [r7, #20]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20001000 	.word	0x20001000
 8008dd8:	20000fe0 	.word	0x20000fe0
 8008ddc:	20000b08 	.word	0x20000b08
 8008de0:	20000f98 	.word	0x20000f98
 8008de4:	20000b04 	.word	0x20000b04
 8008de8:	20000fec 	.word	0x20000fec

08008dec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008df4:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <vTaskInternalSetTimeOutState+0x24>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008dfc:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <vTaskInternalSetTimeOutState+0x28>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	605a      	str	r2, [r3, #4]
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	20000ff0 	.word	0x20000ff0
 8008e14:	20000fdc 	.word	0x20000fdc

08008e18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	613b      	str	r3, [r7, #16]
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	60fb      	str	r3, [r7, #12]
}
 8008e56:	bf00      	nop
 8008e58:	e7fe      	b.n	8008e58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e5a:	f000 ff8b 	bl	8009d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e5e:	4b1d      	ldr	r3, [pc, #116]	; (8008ed4 <xTaskCheckForTimeOut+0xbc>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e76:	d102      	bne.n	8008e7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	61fb      	str	r3, [r7, #28]
 8008e7c:	e023      	b.n	8008ec6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	4b15      	ldr	r3, [pc, #84]	; (8008ed8 <xTaskCheckForTimeOut+0xc0>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d007      	beq.n	8008e9a <xTaskCheckForTimeOut+0x82>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d302      	bcc.n	8008e9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e94:	2301      	movs	r3, #1
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	e015      	b.n	8008ec6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d20b      	bcs.n	8008ebc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	1ad2      	subs	r2, r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff ff9b 	bl	8008dec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	e004      	b.n	8008ec6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ec6:	f000 ff85 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 8008eca:	69fb      	ldr	r3, [r7, #28]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3720      	adds	r7, #32
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	20000fdc 	.word	0x20000fdc
 8008ed8:	20000ff0 	.word	0x20000ff0

08008edc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ee0:	4b03      	ldr	r3, [pc, #12]	; (8008ef0 <vTaskMissedYield+0x14>)
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
}
 8008ee6:	bf00      	nop
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	20000fec 	.word	0x20000fec

08008ef4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008efc:	f000 f852 	bl	8008fa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f00:	4b06      	ldr	r3, [pc, #24]	; (8008f1c <prvIdleTask+0x28>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d9f9      	bls.n	8008efc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <prvIdleTask+0x2c>)
 8008f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f18:	e7f0      	b.n	8008efc <prvIdleTask+0x8>
 8008f1a:	bf00      	nop
 8008f1c:	20000b08 	.word	0x20000b08
 8008f20:	e000ed04 	.word	0xe000ed04

08008f24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	607b      	str	r3, [r7, #4]
 8008f2e:	e00c      	b.n	8008f4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	4613      	mov	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4a12      	ldr	r2, [pc, #72]	; (8008f84 <prvInitialiseTaskLists+0x60>)
 8008f3c:	4413      	add	r3, r2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe fab6 	bl	80074b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3301      	adds	r3, #1
 8008f48:	607b      	str	r3, [r7, #4]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b37      	cmp	r3, #55	; 0x37
 8008f4e:	d9ef      	bls.n	8008f30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f50:	480d      	ldr	r0, [pc, #52]	; (8008f88 <prvInitialiseTaskLists+0x64>)
 8008f52:	f7fe faad 	bl	80074b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f56:	480d      	ldr	r0, [pc, #52]	; (8008f8c <prvInitialiseTaskLists+0x68>)
 8008f58:	f7fe faaa 	bl	80074b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f5c:	480c      	ldr	r0, [pc, #48]	; (8008f90 <prvInitialiseTaskLists+0x6c>)
 8008f5e:	f7fe faa7 	bl	80074b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f62:	480c      	ldr	r0, [pc, #48]	; (8008f94 <prvInitialiseTaskLists+0x70>)
 8008f64:	f7fe faa4 	bl	80074b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f68:	480b      	ldr	r0, [pc, #44]	; (8008f98 <prvInitialiseTaskLists+0x74>)
 8008f6a:	f7fe faa1 	bl	80074b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f6e:	4b0b      	ldr	r3, [pc, #44]	; (8008f9c <prvInitialiseTaskLists+0x78>)
 8008f70:	4a05      	ldr	r2, [pc, #20]	; (8008f88 <prvInitialiseTaskLists+0x64>)
 8008f72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f74:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <prvInitialiseTaskLists+0x7c>)
 8008f76:	4a05      	ldr	r2, [pc, #20]	; (8008f8c <prvInitialiseTaskLists+0x68>)
 8008f78:	601a      	str	r2, [r3, #0]
}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20000b08 	.word	0x20000b08
 8008f88:	20000f68 	.word	0x20000f68
 8008f8c:	20000f7c 	.word	0x20000f7c
 8008f90:	20000f98 	.word	0x20000f98
 8008f94:	20000fac 	.word	0x20000fac
 8008f98:	20000fc4 	.word	0x20000fc4
 8008f9c:	20000f90 	.word	0x20000f90
 8008fa0:	20000f94 	.word	0x20000f94

08008fa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008faa:	e019      	b.n	8008fe0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fac:	f000 fee2 	bl	8009d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb0:	4b10      	ldr	r3, [pc, #64]	; (8008ff4 <prvCheckTasksWaitingTermination+0x50>)
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe fb01 	bl	80075c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fc2:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <prvCheckTasksWaitingTermination+0x54>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	4a0b      	ldr	r2, [pc, #44]	; (8008ff8 <prvCheckTasksWaitingTermination+0x54>)
 8008fca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fcc:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <prvCheckTasksWaitingTermination+0x58>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	4a0a      	ldr	r2, [pc, #40]	; (8008ffc <prvCheckTasksWaitingTermination+0x58>)
 8008fd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fd6:	f000 fefd 	bl	8009dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f810 	bl	8009000 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fe0:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <prvCheckTasksWaitingTermination+0x58>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1e1      	bne.n	8008fac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fe8:	bf00      	nop
 8008fea:	bf00      	nop
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20000fac 	.word	0x20000fac
 8008ff8:	20000fd8 	.word	0x20000fd8
 8008ffc:	20000fc0 	.word	0x20000fc0

08009000 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3354      	adds	r3, #84	; 0x54
 800900c:	4618      	mov	r0, r3
 800900e:	f001 fa07 	bl	800a420 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009018:	2b00      	cmp	r3, #0
 800901a:	d108      	bne.n	800902e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009020:	4618      	mov	r0, r3
 8009022:	f001 f895 	bl	800a150 <vPortFree>
				vPortFree( pxTCB );
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f001 f892 	bl	800a150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800902c:	e018      	b.n	8009060 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009034:	2b01      	cmp	r3, #1
 8009036:	d103      	bne.n	8009040 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 f889 	bl	800a150 <vPortFree>
	}
 800903e:	e00f      	b.n	8009060 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009046:	2b02      	cmp	r3, #2
 8009048:	d00a      	beq.n	8009060 <prvDeleteTCB+0x60>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	60fb      	str	r3, [r7, #12]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <prvDeleteTCB+0x5e>
	}
 8009060:	bf00      	nop
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800906e:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <prvResetNextTaskUnblockTime+0x38>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d104      	bne.n	8009082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009078:	4b0a      	ldr	r3, [pc, #40]	; (80090a4 <prvResetNextTaskUnblockTime+0x3c>)
 800907a:	f04f 32ff 	mov.w	r2, #4294967295
 800907e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009080:	e008      	b.n	8009094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009082:	4b07      	ldr	r3, [pc, #28]	; (80090a0 <prvResetNextTaskUnblockTime+0x38>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4a04      	ldr	r2, [pc, #16]	; (80090a4 <prvResetNextTaskUnblockTime+0x3c>)
 8009092:	6013      	str	r3, [r2, #0]
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	20000f90 	.word	0x20000f90
 80090a4:	20000ff8 	.word	0x20000ff8

080090a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80090ae:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <xTaskGetCurrentTaskHandle+0x1c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80090b4:	687b      	ldr	r3, [r7, #4]
	}
 80090b6:	4618      	mov	r0, r3
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	20000b04 	.word	0x20000b04

080090c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090ce:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <xTaskGetSchedulerState+0x34>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d102      	bne.n	80090dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090d6:	2301      	movs	r3, #1
 80090d8:	607b      	str	r3, [r7, #4]
 80090da:	e008      	b.n	80090ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090dc:	4b08      	ldr	r3, [pc, #32]	; (8009100 <xTaskGetSchedulerState+0x38>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d102      	bne.n	80090ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090e4:	2302      	movs	r3, #2
 80090e6:	607b      	str	r3, [r7, #4]
 80090e8:	e001      	b.n	80090ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090ea:	2300      	movs	r3, #0
 80090ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090ee:	687b      	ldr	r3, [r7, #4]
	}
 80090f0:	4618      	mov	r0, r3
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	20000fe4 	.word	0x20000fe4
 8009100:	20001000 	.word	0x20001000

08009104 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d051      	beq.n	80091be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911e:	4b2a      	ldr	r3, [pc, #168]	; (80091c8 <xTaskPriorityInherit+0xc4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	429a      	cmp	r2, r3
 8009126:	d241      	bcs.n	80091ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	2b00      	cmp	r3, #0
 800912e:	db06      	blt.n	800913e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009130:	4b25      	ldr	r3, [pc, #148]	; (80091c8 <xTaskPriorityInherit+0xc4>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009136:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	6959      	ldr	r1, [r3, #20]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009146:	4613      	mov	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4a1f      	ldr	r2, [pc, #124]	; (80091cc <xTaskPriorityInherit+0xc8>)
 8009150:	4413      	add	r3, r2
 8009152:	4299      	cmp	r1, r3
 8009154:	d122      	bne.n	800919c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	3304      	adds	r3, #4
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fa32 	bl	80075c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009160:	4b19      	ldr	r3, [pc, #100]	; (80091c8 <xTaskPriorityInherit+0xc4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916e:	4b18      	ldr	r3, [pc, #96]	; (80091d0 <xTaskPriorityInherit+0xcc>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d903      	bls.n	800917e <xTaskPriorityInherit+0x7a>
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917a:	4a15      	ldr	r2, [pc, #84]	; (80091d0 <xTaskPriorityInherit+0xcc>)
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4a10      	ldr	r2, [pc, #64]	; (80091cc <xTaskPriorityInherit+0xc8>)
 800918c:	441a      	add	r2, r3
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	3304      	adds	r3, #4
 8009192:	4619      	mov	r1, r3
 8009194:	4610      	mov	r0, r2
 8009196:	f7fe f9b8 	bl	800750a <vListInsertEnd>
 800919a:	e004      	b.n	80091a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800919c:	4b0a      	ldr	r3, [pc, #40]	; (80091c8 <xTaskPriorityInherit+0xc4>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80091a6:	2301      	movs	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	e008      	b.n	80091be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091b0:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <xTaskPriorityInherit+0xc4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d201      	bcs.n	80091be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80091ba:	2301      	movs	r3, #1
 80091bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091be:	68fb      	ldr	r3, [r7, #12]
	}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20000b04 	.word	0x20000b04
 80091cc:	20000b08 	.word	0x20000b08
 80091d0:	20000fe0 	.word	0x20000fe0

080091d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d056      	beq.n	8009298 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091ea:	4b2e      	ldr	r3, [pc, #184]	; (80092a4 <xTaskPriorityDisinherit+0xd0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d00a      	beq.n	800920a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	60fb      	str	r3, [r7, #12]
}
 8009206:	bf00      	nop
 8009208:	e7fe      	b.n	8009208 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10a      	bne.n	8009228 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	60bb      	str	r3, [r7, #8]
}
 8009224:	bf00      	nop
 8009226:	e7fe      	b.n	8009226 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800922c:	1e5a      	subs	r2, r3, #1
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800923a:	429a      	cmp	r2, r3
 800923c:	d02c      	beq.n	8009298 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009242:	2b00      	cmp	r3, #0
 8009244:	d128      	bne.n	8009298 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	3304      	adds	r3, #4
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe f9ba 	bl	80075c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <xTaskPriorityDisinherit+0xd4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d903      	bls.n	8009278 <xTaskPriorityDisinherit+0xa4>
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a0c      	ldr	r2, [pc, #48]	; (80092a8 <xTaskPriorityDisinherit+0xd4>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4a09      	ldr	r2, [pc, #36]	; (80092ac <xTaskPriorityDisinherit+0xd8>)
 8009286:	441a      	add	r2, r3
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fe f93b 	bl	800750a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009294:	2301      	movs	r3, #1
 8009296:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009298:	697b      	ldr	r3, [r7, #20]
	}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000b04 	.word	0x20000b04
 80092a8:	20000fe0 	.word	0x20000fe0
 80092ac:	20000b08 	.word	0x20000b08

080092b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80092be:	2301      	movs	r3, #1
 80092c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d06a      	beq.n	800939e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10a      	bne.n	80092e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	60fb      	str	r3, [r7, #12]
}
 80092e2:	bf00      	nop
 80092e4:	e7fe      	b.n	80092e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d902      	bls.n	80092f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	61fb      	str	r3, [r7, #28]
 80092f4:	e002      	b.n	80092fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009300:	69fa      	ldr	r2, [r7, #28]
 8009302:	429a      	cmp	r2, r3
 8009304:	d04b      	beq.n	800939e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	429a      	cmp	r2, r3
 800930e:	d146      	bne.n	800939e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009310:	4b25      	ldr	r3, [pc, #148]	; (80093a8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	429a      	cmp	r2, r3
 8009318:	d10a      	bne.n	8009330 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	60bb      	str	r3, [r7, #8]
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	2b00      	cmp	r3, #0
 8009342:	db04      	blt.n	800934e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	6959      	ldr	r1, [r3, #20]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	4613      	mov	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4a13      	ldr	r2, [pc, #76]	; (80093ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800935e:	4413      	add	r3, r2
 8009360:	4299      	cmp	r1, r3
 8009362:	d11c      	bne.n	800939e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	3304      	adds	r3, #4
 8009368:	4618      	mov	r0, r3
 800936a:	f7fe f92b 	bl	80075c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009372:	4b0f      	ldr	r3, [pc, #60]	; (80093b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	d903      	bls.n	8009382 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937e:	4a0c      	ldr	r2, [pc, #48]	; (80093b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009386:	4613      	mov	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4a07      	ldr	r2, [pc, #28]	; (80093ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009390:	441a      	add	r2, r3
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	3304      	adds	r3, #4
 8009396:	4619      	mov	r1, r3
 8009398:	4610      	mov	r0, r2
 800939a:	f7fe f8b6 	bl	800750a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800939e:	bf00      	nop
 80093a0:	3720      	adds	r7, #32
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	20000b04 	.word	0x20000b04
 80093ac:	20000b08 	.word	0x20000b08
 80093b0:	20000fe0 	.word	0x20000fe0

080093b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80093b4:	b480      	push	{r7}
 80093b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80093b8:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d004      	beq.n	80093ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80093c0:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093c6:	3201      	adds	r2, #1
 80093c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80093ca:	4b03      	ldr	r3, [pc, #12]	; (80093d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80093cc:	681b      	ldr	r3, [r3, #0]
	}
 80093ce:	4618      	mov	r0, r3
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	20000b04 	.word	0x20000b04

080093dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093e6:	4b21      	ldr	r3, [pc, #132]	; (800946c <prvAddCurrentTaskToDelayedList+0x90>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ec:	4b20      	ldr	r3, [pc, #128]	; (8009470 <prvAddCurrentTaskToDelayedList+0x94>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe f8e6 	bl	80075c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fe:	d10a      	bne.n	8009416 <prvAddCurrentTaskToDelayedList+0x3a>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d007      	beq.n	8009416 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009406:	4b1a      	ldr	r3, [pc, #104]	; (8009470 <prvAddCurrentTaskToDelayedList+0x94>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3304      	adds	r3, #4
 800940c:	4619      	mov	r1, r3
 800940e:	4819      	ldr	r0, [pc, #100]	; (8009474 <prvAddCurrentTaskToDelayedList+0x98>)
 8009410:	f7fe f87b 	bl	800750a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009414:	e026      	b.n	8009464 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4413      	add	r3, r2
 800941c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800941e:	4b14      	ldr	r3, [pc, #80]	; (8009470 <prvAddCurrentTaskToDelayedList+0x94>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	429a      	cmp	r2, r3
 800942c:	d209      	bcs.n	8009442 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800942e:	4b12      	ldr	r3, [pc, #72]	; (8009478 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <prvAddCurrentTaskToDelayedList+0x94>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3304      	adds	r3, #4
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f7fe f889 	bl	8007552 <vListInsert>
}
 8009440:	e010      	b.n	8009464 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009442:	4b0e      	ldr	r3, [pc, #56]	; (800947c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	4b0a      	ldr	r3, [pc, #40]	; (8009470 <prvAddCurrentTaskToDelayedList+0x94>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3304      	adds	r3, #4
 800944c:	4619      	mov	r1, r3
 800944e:	4610      	mov	r0, r2
 8009450:	f7fe f87f 	bl	8007552 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009454:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	429a      	cmp	r2, r3
 800945c:	d202      	bcs.n	8009464 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800945e:	4a08      	ldr	r2, [pc, #32]	; (8009480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	6013      	str	r3, [r2, #0]
}
 8009464:	bf00      	nop
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20000fdc 	.word	0x20000fdc
 8009470:	20000b04 	.word	0x20000b04
 8009474:	20000fc4 	.word	0x20000fc4
 8009478:	20000f94 	.word	0x20000f94
 800947c:	20000f90 	.word	0x20000f90
 8009480:	20000ff8 	.word	0x20000ff8

08009484 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08a      	sub	sp, #40	; 0x28
 8009488:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800948a:	2300      	movs	r3, #0
 800948c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800948e:	f000 fb07 	bl	8009aa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009492:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <xTimerCreateTimerTask+0x80>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d021      	beq.n	80094de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800949e:	2300      	movs	r3, #0
 80094a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094a2:	1d3a      	adds	r2, r7, #4
 80094a4:	f107 0108 	add.w	r1, r7, #8
 80094a8:	f107 030c 	add.w	r3, r7, #12
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fd ffe5 	bl	800747c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	9202      	str	r2, [sp, #8]
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	2302      	movs	r3, #2
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	2300      	movs	r3, #0
 80094c2:	460a      	mov	r2, r1
 80094c4:	4910      	ldr	r1, [pc, #64]	; (8009508 <xTimerCreateTimerTask+0x84>)
 80094c6:	4811      	ldr	r0, [pc, #68]	; (800950c <xTimerCreateTimerTask+0x88>)
 80094c8:	f7fe ffa6 	bl	8008418 <xTaskCreateStatic>
 80094cc:	4603      	mov	r3, r0
 80094ce:	4a10      	ldr	r2, [pc, #64]	; (8009510 <xTimerCreateTimerTask+0x8c>)
 80094d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094d2:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <xTimerCreateTimerTask+0x8c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094da:	2301      	movs	r3, #1
 80094dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	613b      	str	r3, [r7, #16]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80094fa:	697b      	ldr	r3, [r7, #20]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	20001034 	.word	0x20001034
 8009508:	0800a60c 	.word	0x0800a60c
 800950c:	08009649 	.word	0x08009649
 8009510:	20001038 	.word	0x20001038

08009514 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08a      	sub	sp, #40	; 0x28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009522:	2300      	movs	r3, #0
 8009524:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <xTimerGenericCommand+0x2e>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	623b      	str	r3, [r7, #32]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009542:	4b1a      	ldr	r3, [pc, #104]	; (80095ac <xTimerGenericCommand+0x98>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d02a      	beq.n	80095a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b05      	cmp	r3, #5
 800955a:	dc18      	bgt.n	800958e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800955c:	f7ff fdb4 	bl	80090c8 <xTaskGetSchedulerState>
 8009560:	4603      	mov	r3, r0
 8009562:	2b02      	cmp	r3, #2
 8009564:	d109      	bne.n	800957a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009566:	4b11      	ldr	r3, [pc, #68]	; (80095ac <xTimerGenericCommand+0x98>)
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f107 0110 	add.w	r1, r7, #16
 800956e:	2300      	movs	r3, #0
 8009570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009572:	f7fe fa45 	bl	8007a00 <xQueueGenericSend>
 8009576:	6278      	str	r0, [r7, #36]	; 0x24
 8009578:	e012      	b.n	80095a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800957a:	4b0c      	ldr	r3, [pc, #48]	; (80095ac <xTimerGenericCommand+0x98>)
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	f107 0110 	add.w	r1, r7, #16
 8009582:	2300      	movs	r3, #0
 8009584:	2200      	movs	r2, #0
 8009586:	f7fe fa3b 	bl	8007a00 <xQueueGenericSend>
 800958a:	6278      	str	r0, [r7, #36]	; 0x24
 800958c:	e008      	b.n	80095a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800958e:	4b07      	ldr	r3, [pc, #28]	; (80095ac <xTimerGenericCommand+0x98>)
 8009590:	6818      	ldr	r0, [r3, #0]
 8009592:	f107 0110 	add.w	r1, r7, #16
 8009596:	2300      	movs	r3, #0
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	f7fe fb2f 	bl	8007bfc <xQueueGenericSendFromISR>
 800959e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3728      	adds	r7, #40	; 0x28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20001034 	.word	0x20001034

080095b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af02      	add	r7, sp, #8
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ba:	4b22      	ldr	r3, [pc, #136]	; (8009644 <prvProcessExpiredTimer+0x94>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	3304      	adds	r3, #4
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fd fffb 	bl	80075c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d022      	beq.n	8009622 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	699a      	ldr	r2, [r3, #24]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	18d1      	adds	r1, r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	6978      	ldr	r0, [r7, #20]
 80095ea:	f000 f8d1 	bl	8009790 <prvInsertTimerInActiveList>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d01f      	beq.n	8009634 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095f4:	2300      	movs	r3, #0
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	2300      	movs	r3, #0
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	2100      	movs	r1, #0
 80095fe:	6978      	ldr	r0, [r7, #20]
 8009600:	f7ff ff88 	bl	8009514 <xTimerGenericCommand>
 8009604:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d113      	bne.n	8009634 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	60fb      	str	r3, [r7, #12]
}
 800961e:	bf00      	nop
 8009620:	e7fe      	b.n	8009620 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009628:	f023 0301 	bic.w	r3, r3, #1
 800962c:	b2da      	uxtb	r2, r3
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	6978      	ldr	r0, [r7, #20]
 800963a:	4798      	blx	r3
}
 800963c:	bf00      	nop
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	2000102c 	.word	0x2000102c

08009648 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009650:	f107 0308 	add.w	r3, r7, #8
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f857 	bl	8009708 <prvGetNextExpireTime>
 800965a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	4619      	mov	r1, r3
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f803 	bl	800966c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009666:	f000 f8d5 	bl	8009814 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800966a:	e7f1      	b.n	8009650 <prvTimerTask+0x8>

0800966c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009676:	f7ff f92b 	bl	80088d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800967a:	f107 0308 	add.w	r3, r7, #8
 800967e:	4618      	mov	r0, r3
 8009680:	f000 f866 	bl	8009750 <prvSampleTimeNow>
 8009684:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d130      	bne.n	80096ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10a      	bne.n	80096a8 <prvProcessTimerOrBlockTask+0x3c>
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	429a      	cmp	r2, r3
 8009698:	d806      	bhi.n	80096a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800969a:	f7ff f927 	bl	80088ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800969e:	68f9      	ldr	r1, [r7, #12]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff ff85 	bl	80095b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096a6:	e024      	b.n	80096f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d008      	beq.n	80096c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096ae:	4b13      	ldr	r3, [pc, #76]	; (80096fc <prvProcessTimerOrBlockTask+0x90>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d101      	bne.n	80096bc <prvProcessTimerOrBlockTask+0x50>
 80096b8:	2301      	movs	r3, #1
 80096ba:	e000      	b.n	80096be <prvProcessTimerOrBlockTask+0x52>
 80096bc:	2300      	movs	r3, #0
 80096be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096c0:	4b0f      	ldr	r3, [pc, #60]	; (8009700 <prvProcessTimerOrBlockTask+0x94>)
 80096c2:	6818      	ldr	r0, [r3, #0]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	4619      	mov	r1, r3
 80096ce:	f7fe fe6f 	bl	80083b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096d2:	f7ff f90b 	bl	80088ec <xTaskResumeAll>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096dc:	4b09      	ldr	r3, [pc, #36]	; (8009704 <prvProcessTimerOrBlockTask+0x98>)
 80096de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	f3bf 8f6f 	isb	sy
}
 80096ec:	e001      	b.n	80096f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096ee:	f7ff f8fd 	bl	80088ec <xTaskResumeAll>
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20001030 	.word	0x20001030
 8009700:	20001034 	.word	0x20001034
 8009704:	e000ed04 	.word	0xe000ed04

08009708 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009710:	4b0e      	ldr	r3, [pc, #56]	; (800974c <prvGetNextExpireTime+0x44>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <prvGetNextExpireTime+0x16>
 800971a:	2201      	movs	r2, #1
 800971c:	e000      	b.n	8009720 <prvGetNextExpireTime+0x18>
 800971e:	2200      	movs	r2, #0
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d105      	bne.n	8009738 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800972c:	4b07      	ldr	r3, [pc, #28]	; (800974c <prvGetNextExpireTime+0x44>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	e001      	b.n	800973c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800973c:	68fb      	ldr	r3, [r7, #12]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	2000102c 	.word	0x2000102c

08009750 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009758:	f7ff f966 	bl	8008a28 <xTaskGetTickCount>
 800975c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800975e:	4b0b      	ldr	r3, [pc, #44]	; (800978c <prvSampleTimeNow+0x3c>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	429a      	cmp	r2, r3
 8009766:	d205      	bcs.n	8009774 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009768:	f000 f936 	bl	80099d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	e002      	b.n	800977a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800977a:	4a04      	ldr	r2, [pc, #16]	; (800978c <prvSampleTimeNow+0x3c>)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009780:	68fb      	ldr	r3, [r7, #12]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	2000103c 	.word	0x2000103c

08009790 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
 800979c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d812      	bhi.n	80097dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	1ad2      	subs	r2, r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d302      	bcc.n	80097ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097c4:	2301      	movs	r3, #1
 80097c6:	617b      	str	r3, [r7, #20]
 80097c8:	e01b      	b.n	8009802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097ca:	4b10      	ldr	r3, [pc, #64]	; (800980c <prvInsertTimerInActiveList+0x7c>)
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3304      	adds	r3, #4
 80097d2:	4619      	mov	r1, r3
 80097d4:	4610      	mov	r0, r2
 80097d6:	f7fd febc 	bl	8007552 <vListInsert>
 80097da:	e012      	b.n	8009802 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d206      	bcs.n	80097f2 <prvInsertTimerInActiveList+0x62>
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d302      	bcc.n	80097f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097ec:	2301      	movs	r3, #1
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	e007      	b.n	8009802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097f2:	4b07      	ldr	r3, [pc, #28]	; (8009810 <prvInsertTimerInActiveList+0x80>)
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3304      	adds	r3, #4
 80097fa:	4619      	mov	r1, r3
 80097fc:	4610      	mov	r0, r2
 80097fe:	f7fd fea8 	bl	8007552 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009802:	697b      	ldr	r3, [r7, #20]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3718      	adds	r7, #24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	20001030 	.word	0x20001030
 8009810:	2000102c 	.word	0x2000102c

08009814 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08e      	sub	sp, #56	; 0x38
 8009818:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800981a:	e0ca      	b.n	80099b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	da18      	bge.n	8009854 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009822:	1d3b      	adds	r3, r7, #4
 8009824:	3304      	adds	r3, #4
 8009826:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10a      	bne.n	8009844 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	61fb      	str	r3, [r7, #28]
}
 8009840:	bf00      	nop
 8009842:	e7fe      	b.n	8009842 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800984a:	6850      	ldr	r0, [r2, #4]
 800984c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800984e:	6892      	ldr	r2, [r2, #8]
 8009850:	4611      	mov	r1, r2
 8009852:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f2c0 80aa 	blt.w	80099b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d004      	beq.n	8009872 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	3304      	adds	r3, #4
 800986c:	4618      	mov	r0, r3
 800986e:	f7fd fea9 	bl	80075c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009872:	463b      	mov	r3, r7
 8009874:	4618      	mov	r0, r3
 8009876:	f7ff ff6b 	bl	8009750 <prvSampleTimeNow>
 800987a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b09      	cmp	r3, #9
 8009880:	f200 8097 	bhi.w	80099b2 <prvProcessReceivedCommands+0x19e>
 8009884:	a201      	add	r2, pc, #4	; (adr r2, 800988c <prvProcessReceivedCommands+0x78>)
 8009886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988a:	bf00      	nop
 800988c:	080098b5 	.word	0x080098b5
 8009890:	080098b5 	.word	0x080098b5
 8009894:	080098b5 	.word	0x080098b5
 8009898:	08009929 	.word	0x08009929
 800989c:	0800993d 	.word	0x0800993d
 80098a0:	08009987 	.word	0x08009987
 80098a4:	080098b5 	.word	0x080098b5
 80098a8:	080098b5 	.word	0x080098b5
 80098ac:	08009929 	.word	0x08009929
 80098b0:	0800993d 	.word	0x0800993d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098ba:	f043 0301 	orr.w	r3, r3, #1
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	18d1      	adds	r1, r2, r3
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098d4:	f7ff ff5c 	bl	8009790 <prvInsertTimerInActiveList>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d069      	beq.n	80099b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d05e      	beq.n	80099b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	441a      	add	r2, r3
 80098fc:	2300      	movs	r3, #0
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	2300      	movs	r3, #0
 8009902:	2100      	movs	r1, #0
 8009904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009906:	f7ff fe05 	bl	8009514 <xTimerGenericCommand>
 800990a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d14f      	bne.n	80099b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	61bb      	str	r3, [r7, #24]
}
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800992e:	f023 0301 	bic.w	r3, r3, #1
 8009932:	b2da      	uxtb	r2, r3
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800993a:	e03a      	b.n	80099b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009942:	f043 0301 	orr.w	r3, r3, #1
 8009946:	b2da      	uxtb	r2, r3
 8009948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009952:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	617b      	str	r3, [r7, #20]
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	699a      	ldr	r2, [r3, #24]
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	18d1      	adds	r1, r2, r3
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009980:	f7ff ff06 	bl	8009790 <prvInsertTimerInActiveList>
					break;
 8009984:	e015      	b.n	80099b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800998c:	f003 0302 	and.w	r3, r3, #2
 8009990:	2b00      	cmp	r3, #0
 8009992:	d103      	bne.n	800999c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009996:	f000 fbdb 	bl	800a150 <vPortFree>
 800999a:	e00a      	b.n	80099b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099a2:	f023 0301 	bic.w	r3, r3, #1
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099ae:	e000      	b.n	80099b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80099b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099b2:	4b08      	ldr	r3, [pc, #32]	; (80099d4 <prvProcessReceivedCommands+0x1c0>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	1d39      	adds	r1, r7, #4
 80099b8:	2200      	movs	r2, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fe f9ba 	bl	8007d34 <xQueueReceive>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f47f af2a 	bne.w	800981c <prvProcessReceivedCommands+0x8>
	}
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	3730      	adds	r7, #48	; 0x30
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20001034 	.word	0x20001034

080099d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099de:	e048      	b.n	8009a72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099e0:	4b2d      	ldr	r3, [pc, #180]	; (8009a98 <prvSwitchTimerLists+0xc0>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ea:	4b2b      	ldr	r3, [pc, #172]	; (8009a98 <prvSwitchTimerLists+0xc0>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3304      	adds	r3, #4
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fd fde3 	bl	80075c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a0c:	f003 0304 	and.w	r3, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d02e      	beq.n	8009a72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d90e      	bls.n	8009a44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a32:	4b19      	ldr	r3, [pc, #100]	; (8009a98 <prvSwitchTimerLists+0xc0>)
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f7fd fd88 	bl	8007552 <vListInsert>
 8009a42:	e016      	b.n	8009a72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a44:	2300      	movs	r3, #0
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f7ff fd60 	bl	8009514 <xTimerGenericCommand>
 8009a54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	603b      	str	r3, [r7, #0]
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a72:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <prvSwitchTimerLists+0xc0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1b1      	bne.n	80099e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a7c:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <prvSwitchTimerLists+0xc0>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a82:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <prvSwitchTimerLists+0xc4>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a04      	ldr	r2, [pc, #16]	; (8009a98 <prvSwitchTimerLists+0xc0>)
 8009a88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a8a:	4a04      	ldr	r2, [pc, #16]	; (8009a9c <prvSwitchTimerLists+0xc4>)
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	6013      	str	r3, [r2, #0]
}
 8009a90:	bf00      	nop
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	2000102c 	.word	0x2000102c
 8009a9c:	20001030 	.word	0x20001030

08009aa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009aa6:	f000 f965 	bl	8009d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009aaa:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <prvCheckForValidListAndQueue+0x60>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d120      	bne.n	8009af4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ab2:	4814      	ldr	r0, [pc, #80]	; (8009b04 <prvCheckForValidListAndQueue+0x64>)
 8009ab4:	f7fd fcfc 	bl	80074b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ab8:	4813      	ldr	r0, [pc, #76]	; (8009b08 <prvCheckForValidListAndQueue+0x68>)
 8009aba:	f7fd fcf9 	bl	80074b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009abe:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <prvCheckForValidListAndQueue+0x6c>)
 8009ac0:	4a10      	ldr	r2, [pc, #64]	; (8009b04 <prvCheckForValidListAndQueue+0x64>)
 8009ac2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ac4:	4b12      	ldr	r3, [pc, #72]	; (8009b10 <prvCheckForValidListAndQueue+0x70>)
 8009ac6:	4a10      	ldr	r2, [pc, #64]	; (8009b08 <prvCheckForValidListAndQueue+0x68>)
 8009ac8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009aca:	2300      	movs	r3, #0
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	4b11      	ldr	r3, [pc, #68]	; (8009b14 <prvCheckForValidListAndQueue+0x74>)
 8009ad0:	4a11      	ldr	r2, [pc, #68]	; (8009b18 <prvCheckForValidListAndQueue+0x78>)
 8009ad2:	2110      	movs	r1, #16
 8009ad4:	200a      	movs	r0, #10
 8009ad6:	f7fd fe07 	bl	80076e8 <xQueueGenericCreateStatic>
 8009ada:	4603      	mov	r3, r0
 8009adc:	4a08      	ldr	r2, [pc, #32]	; (8009b00 <prvCheckForValidListAndQueue+0x60>)
 8009ade:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <prvCheckForValidListAndQueue+0x60>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ae8:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <prvCheckForValidListAndQueue+0x60>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	490b      	ldr	r1, [pc, #44]	; (8009b1c <prvCheckForValidListAndQueue+0x7c>)
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe fc34 	bl	800835c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009af4:	f000 f96e 	bl	8009dd4 <vPortExitCritical>
}
 8009af8:	bf00      	nop
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20001034 	.word	0x20001034
 8009b04:	20001004 	.word	0x20001004
 8009b08:	20001018 	.word	0x20001018
 8009b0c:	2000102c 	.word	0x2000102c
 8009b10:	20001030 	.word	0x20001030
 8009b14:	200010e0 	.word	0x200010e0
 8009b18:	20001040 	.word	0x20001040
 8009b1c:	0800a614 	.word	0x0800a614

08009b20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3b04      	subs	r3, #4
 8009b30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3b04      	subs	r3, #4
 8009b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f023 0201 	bic.w	r2, r3, #1
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3b04      	subs	r3, #4
 8009b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b50:	4a0c      	ldr	r2, [pc, #48]	; (8009b84 <pxPortInitialiseStack+0x64>)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3b14      	subs	r3, #20
 8009b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3b04      	subs	r3, #4
 8009b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f06f 0202 	mvn.w	r2, #2
 8009b6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3b20      	subs	r3, #32
 8009b74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b76:	68fb      	ldr	r3, [r7, #12]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3714      	adds	r7, #20
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr
 8009b84:	08009b89 	.word	0x08009b89

08009b88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b92:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <prvTaskExitError+0x54>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9a:	d00a      	beq.n	8009bb2 <prvTaskExitError+0x2a>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	60fb      	str	r3, [r7, #12]
}
 8009bae:	bf00      	nop
 8009bb0:	e7fe      	b.n	8009bb0 <prvTaskExitError+0x28>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	60bb      	str	r3, [r7, #8]
}
 8009bc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bc6:	bf00      	nop
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0fc      	beq.n	8009bc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bce:	bf00      	nop
 8009bd0:	bf00      	nop
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	20000010 	.word	0x20000010

08009be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <pxCurrentTCBConst2>)
 8009be2:	6819      	ldr	r1, [r3, #0]
 8009be4:	6808      	ldr	r0, [r1, #0]
 8009be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	f380 8809 	msr	PSP, r0
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f380 8811 	msr	BASEPRI, r0
 8009bfa:	4770      	bx	lr
 8009bfc:	f3af 8000 	nop.w

08009c00 <pxCurrentTCBConst2>:
 8009c00:	20000b04 	.word	0x20000b04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop

08009c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c08:	4808      	ldr	r0, [pc, #32]	; (8009c2c <prvPortStartFirstTask+0x24>)
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	6800      	ldr	r0, [r0, #0]
 8009c0e:	f380 8808 	msr	MSP, r0
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8814 	msr	CONTROL, r0
 8009c1a:	b662      	cpsie	i
 8009c1c:	b661      	cpsie	f
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	df00      	svc	0
 8009c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed08 	.word	0xe000ed08

08009c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c36:	4b46      	ldr	r3, [pc, #280]	; (8009d50 <xPortStartScheduler+0x120>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a46      	ldr	r2, [pc, #280]	; (8009d54 <xPortStartScheduler+0x124>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d10a      	bne.n	8009c56 <xPortStartScheduler+0x26>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	613b      	str	r3, [r7, #16]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c56:	4b3e      	ldr	r3, [pc, #248]	; (8009d50 <xPortStartScheduler+0x120>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a3f      	ldr	r2, [pc, #252]	; (8009d58 <xPortStartScheduler+0x128>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d10a      	bne.n	8009c76 <xPortStartScheduler+0x46>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	60fb      	str	r3, [r7, #12]
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c76:	4b39      	ldr	r3, [pc, #228]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	22ff      	movs	r2, #255	; 0xff
 8009c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c90:	78fb      	ldrb	r3, [r7, #3]
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	4b31      	ldr	r3, [pc, #196]	; (8009d60 <xPortStartScheduler+0x130>)
 8009c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c9e:	4b31      	ldr	r3, [pc, #196]	; (8009d64 <xPortStartScheduler+0x134>)
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ca4:	e009      	b.n	8009cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ca6:	4b2f      	ldr	r3, [pc, #188]	; (8009d64 <xPortStartScheduler+0x134>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	4a2d      	ldr	r2, [pc, #180]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cba:	78fb      	ldrb	r3, [r7, #3]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc2:	2b80      	cmp	r3, #128	; 0x80
 8009cc4:	d0ef      	beq.n	8009ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cc6:	4b27      	ldr	r3, [pc, #156]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f1c3 0307 	rsb	r3, r3, #7
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d00a      	beq.n	8009ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	60bb      	str	r3, [r7, #8]
}
 8009ce4:	bf00      	nop
 8009ce6:	e7fe      	b.n	8009ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ce8:	4b1e      	ldr	r3, [pc, #120]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	021b      	lsls	r3, r3, #8
 8009cee:	4a1d      	ldr	r2, [pc, #116]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cf2:	4b1c      	ldr	r3, [pc, #112]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cfa:	4a1a      	ldr	r2, [pc, #104]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d06:	4b18      	ldr	r3, [pc, #96]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a17      	ldr	r2, [pc, #92]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a14      	ldr	r2, [pc, #80]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d1e:	f000 f8dd 	bl	8009edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d22:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <xPortStartScheduler+0x13c>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d28:	f000 f8fc 	bl	8009f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d2c:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <xPortStartScheduler+0x140>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a0f      	ldr	r2, [pc, #60]	; (8009d70 <xPortStartScheduler+0x140>)
 8009d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d38:	f7ff ff66 	bl	8009c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d3c:	f7fe ff3e 	bl	8008bbc <vTaskSwitchContext>
	prvTaskExitError();
 8009d40:	f7ff ff22 	bl	8009b88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	e000ed00 	.word	0xe000ed00
 8009d54:	410fc271 	.word	0x410fc271
 8009d58:	410fc270 	.word	0x410fc270
 8009d5c:	e000e400 	.word	0xe000e400
 8009d60:	20001130 	.word	0x20001130
 8009d64:	20001134 	.word	0x20001134
 8009d68:	e000ed20 	.word	0xe000ed20
 8009d6c:	20000010 	.word	0x20000010
 8009d70:	e000ef34 	.word	0xe000ef34

08009d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
	__asm volatile
 8009d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	607b      	str	r3, [r7, #4]
}
 8009d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d8e:	4b0f      	ldr	r3, [pc, #60]	; (8009dcc <vPortEnterCritical+0x58>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a0d      	ldr	r2, [pc, #52]	; (8009dcc <vPortEnterCritical+0x58>)
 8009d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d98:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <vPortEnterCritical+0x58>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d10f      	bne.n	8009dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009da0:	4b0b      	ldr	r3, [pc, #44]	; (8009dd0 <vPortEnterCritical+0x5c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	603b      	str	r3, [r7, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <vPortEnterCritical+0x4a>
	}
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	20000010 	.word	0x20000010
 8009dd0:	e000ed04 	.word	0xe000ed04

08009dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <vPortExitCritical+0x50>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10a      	bne.n	8009df8 <vPortExitCritical+0x24>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	607b      	str	r3, [r7, #4]
}
 8009df4:	bf00      	nop
 8009df6:	e7fe      	b.n	8009df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009df8:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <vPortExitCritical+0x50>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	4a09      	ldr	r2, [pc, #36]	; (8009e24 <vPortExitCritical+0x50>)
 8009e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e02:	4b08      	ldr	r3, [pc, #32]	; (8009e24 <vPortExitCritical+0x50>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d105      	bne.n	8009e16 <vPortExitCritical+0x42>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	f383 8811 	msr	BASEPRI, r3
}
 8009e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20000010 	.word	0x20000010
	...

08009e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e30:	f3ef 8009 	mrs	r0, PSP
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4b15      	ldr	r3, [pc, #84]	; (8009e90 <pxCurrentTCBConst>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	f01e 0f10 	tst.w	lr, #16
 8009e40:	bf08      	it	eq
 8009e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4a:	6010      	str	r0, [r2, #0]
 8009e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e54:	f380 8811 	msr	BASEPRI, r0
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f7fe feac 	bl	8008bbc <vTaskSwitchContext>
 8009e64:	f04f 0000 	mov.w	r0, #0
 8009e68:	f380 8811 	msr	BASEPRI, r0
 8009e6c:	bc09      	pop	{r0, r3}
 8009e6e:	6819      	ldr	r1, [r3, #0]
 8009e70:	6808      	ldr	r0, [r1, #0]
 8009e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e76:	f01e 0f10 	tst.w	lr, #16
 8009e7a:	bf08      	it	eq
 8009e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e80:	f380 8809 	msr	PSP, r0
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	f3af 8000 	nop.w

08009e90 <pxCurrentTCBConst>:
 8009e90:	20000b04 	.word	0x20000b04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	607b      	str	r3, [r7, #4]
}
 8009eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009eb2:	f7fe fdc9 	bl	8008a48 <xTaskIncrementTick>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ebc:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <xPortSysTickHandler+0x40>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ee6:	4b0b      	ldr	r3, [pc, #44]	; (8009f14 <vPortSetupTimerInterrupt+0x38>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009eec:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <vPortSetupTimerInterrupt+0x3c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a0a      	ldr	r2, [pc, #40]	; (8009f1c <vPortSetupTimerInterrupt+0x40>)
 8009ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef6:	099b      	lsrs	r3, r3, #6
 8009ef8:	4a09      	ldr	r2, [pc, #36]	; (8009f20 <vPortSetupTimerInterrupt+0x44>)
 8009efa:	3b01      	subs	r3, #1
 8009efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009efe:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009f00:	2207      	movs	r2, #7
 8009f02:	601a      	str	r2, [r3, #0]
}
 8009f04:	bf00      	nop
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	e000e010 	.word	0xe000e010
 8009f14:	e000e018 	.word	0xe000e018
 8009f18:	20000004 	.word	0x20000004
 8009f1c:	10624dd3 	.word	0x10624dd3
 8009f20:	e000e014 	.word	0xe000e014

08009f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f34 <vPortEnableVFP+0x10>
 8009f28:	6801      	ldr	r1, [r0, #0]
 8009f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f2e:	6001      	str	r1, [r0, #0]
 8009f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f32:	bf00      	nop
 8009f34:	e000ed88 	.word	0xe000ed88

08009f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f3e:	f3ef 8305 	mrs	r3, IPSR
 8009f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	d914      	bls.n	8009f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f4a:	4a17      	ldr	r2, [pc, #92]	; (8009fa8 <vPortValidateInterruptPriority+0x70>)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f54:	4b15      	ldr	r3, [pc, #84]	; (8009fac <vPortValidateInterruptPriority+0x74>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	7afa      	ldrb	r2, [r7, #11]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d20a      	bcs.n	8009f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	607b      	str	r3, [r7, #4]
}
 8009f70:	bf00      	nop
 8009f72:	e7fe      	b.n	8009f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f74:	4b0e      	ldr	r3, [pc, #56]	; (8009fb0 <vPortValidateInterruptPriority+0x78>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f7c:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <vPortValidateInterruptPriority+0x7c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d90a      	bls.n	8009f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	603b      	str	r3, [r7, #0]
}
 8009f96:	bf00      	nop
 8009f98:	e7fe      	b.n	8009f98 <vPortValidateInterruptPriority+0x60>
	}
 8009f9a:	bf00      	nop
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	e000e3f0 	.word	0xe000e3f0
 8009fac:	20001130 	.word	0x20001130
 8009fb0:	e000ed0c 	.word	0xe000ed0c
 8009fb4:	20001134 	.word	0x20001134

08009fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08a      	sub	sp, #40	; 0x28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fc4:	f7fe fc84 	bl	80088d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fc8:	4b5b      	ldr	r3, [pc, #364]	; (800a138 <pvPortMalloc+0x180>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fd0:	f000 f920 	bl	800a214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fd4:	4b59      	ldr	r3, [pc, #356]	; (800a13c <pvPortMalloc+0x184>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4013      	ands	r3, r2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f040 8093 	bne.w	800a108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d01d      	beq.n	800a024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009fe8:	2208      	movs	r2, #8
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4413      	add	r3, r2
 8009fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f003 0307 	and.w	r3, r3, #7
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d014      	beq.n	800a024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f023 0307 	bic.w	r3, r3, #7
 800a000:	3308      	adds	r3, #8
 800a002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <pvPortMalloc+0x6c>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	617b      	str	r3, [r7, #20]
}
 800a020:	bf00      	nop
 800a022:	e7fe      	b.n	800a022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d06e      	beq.n	800a108 <pvPortMalloc+0x150>
 800a02a:	4b45      	ldr	r3, [pc, #276]	; (800a140 <pvPortMalloc+0x188>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	429a      	cmp	r2, r3
 800a032:	d869      	bhi.n	800a108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a034:	4b43      	ldr	r3, [pc, #268]	; (800a144 <pvPortMalloc+0x18c>)
 800a036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a038:	4b42      	ldr	r3, [pc, #264]	; (800a144 <pvPortMalloc+0x18c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a03e:	e004      	b.n	800a04a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	429a      	cmp	r2, r3
 800a052:	d903      	bls.n	800a05c <pvPortMalloc+0xa4>
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1f1      	bne.n	800a040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a05c:	4b36      	ldr	r3, [pc, #216]	; (800a138 <pvPortMalloc+0x180>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a062:	429a      	cmp	r2, r3
 800a064:	d050      	beq.n	800a108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2208      	movs	r2, #8
 800a06c:	4413      	add	r3, r2
 800a06e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	1ad2      	subs	r2, r2, r3
 800a080:	2308      	movs	r3, #8
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	429a      	cmp	r2, r3
 800a086:	d91f      	bls.n	800a0c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4413      	add	r3, r2
 800a08e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	f003 0307 	and.w	r3, r3, #7
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <pvPortMalloc+0xf8>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	613b      	str	r3, [r7, #16]
}
 800a0ac:	bf00      	nop
 800a0ae:	e7fe      	b.n	800a0ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	1ad2      	subs	r2, r2, r3
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0c2:	69b8      	ldr	r0, [r7, #24]
 800a0c4:	f000 f908 	bl	800a2d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0c8:	4b1d      	ldr	r3, [pc, #116]	; (800a140 <pvPortMalloc+0x188>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	4a1b      	ldr	r2, [pc, #108]	; (800a140 <pvPortMalloc+0x188>)
 800a0d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0d6:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <pvPortMalloc+0x188>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	4b1b      	ldr	r3, [pc, #108]	; (800a148 <pvPortMalloc+0x190>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d203      	bcs.n	800a0ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0e2:	4b17      	ldr	r3, [pc, #92]	; (800a140 <pvPortMalloc+0x188>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a18      	ldr	r2, [pc, #96]	; (800a148 <pvPortMalloc+0x190>)
 800a0e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	4b13      	ldr	r3, [pc, #76]	; (800a13c <pvPortMalloc+0x184>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	431a      	orrs	r2, r3
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a0fe:	4b13      	ldr	r3, [pc, #76]	; (800a14c <pvPortMalloc+0x194>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3301      	adds	r3, #1
 800a104:	4a11      	ldr	r2, [pc, #68]	; (800a14c <pvPortMalloc+0x194>)
 800a106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a108:	f7fe fbf0 	bl	80088ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	f003 0307 	and.w	r3, r3, #7
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <pvPortMalloc+0x174>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	60fb      	str	r3, [r7, #12]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <pvPortMalloc+0x172>
	return pvReturn;
 800a12c:	69fb      	ldr	r3, [r7, #28]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3728      	adds	r7, #40	; 0x28
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20001cf8 	.word	0x20001cf8
 800a13c:	20001d0c 	.word	0x20001d0c
 800a140:	20001cfc 	.word	0x20001cfc
 800a144:	20001cf0 	.word	0x20001cf0
 800a148:	20001d00 	.word	0x20001d00
 800a14c:	20001d04 	.word	0x20001d04

0800a150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d04d      	beq.n	800a1fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a162:	2308      	movs	r3, #8
 800a164:	425b      	negs	r3, r3
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	4413      	add	r3, r2
 800a16a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	4b24      	ldr	r3, [pc, #144]	; (800a208 <vPortFree+0xb8>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4013      	ands	r3, r2
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10a      	bne.n	800a194 <vPortFree+0x44>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	60fb      	str	r3, [r7, #12]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00a      	beq.n	800a1b2 <vPortFree+0x62>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	60bb      	str	r3, [r7, #8]
}
 800a1ae:	bf00      	nop
 800a1b0:	e7fe      	b.n	800a1b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	4b14      	ldr	r3, [pc, #80]	; (800a208 <vPortFree+0xb8>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d01e      	beq.n	800a1fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d11a      	bne.n	800a1fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	4b0e      	ldr	r3, [pc, #56]	; (800a208 <vPortFree+0xb8>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	43db      	mvns	r3, r3
 800a1d2:	401a      	ands	r2, r3
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1d8:	f7fe fb7a 	bl	80088d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <vPortFree+0xbc>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	4a09      	ldr	r2, [pc, #36]	; (800a20c <vPortFree+0xbc>)
 800a1e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1ea:	6938      	ldr	r0, [r7, #16]
 800a1ec:	f000 f874 	bl	800a2d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1f0:	4b07      	ldr	r3, [pc, #28]	; (800a210 <vPortFree+0xc0>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	4a06      	ldr	r2, [pc, #24]	; (800a210 <vPortFree+0xc0>)
 800a1f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a1fa:	f7fe fb77 	bl	80088ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1fe:	bf00      	nop
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20001d0c 	.word	0x20001d0c
 800a20c:	20001cfc 	.word	0x20001cfc
 800a210:	20001d08 	.word	0x20001d08

0800a214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a21a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a21e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a220:	4b27      	ldr	r3, [pc, #156]	; (800a2c0 <prvHeapInit+0xac>)
 800a222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00c      	beq.n	800a248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3307      	adds	r3, #7
 800a232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f023 0307 	bic.w	r3, r3, #7
 800a23a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	4a1f      	ldr	r2, [pc, #124]	; (800a2c0 <prvHeapInit+0xac>)
 800a244:	4413      	add	r3, r2
 800a246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a24c:	4a1d      	ldr	r2, [pc, #116]	; (800a2c4 <prvHeapInit+0xb0>)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a252:	4b1c      	ldr	r3, [pc, #112]	; (800a2c4 <prvHeapInit+0xb0>)
 800a254:	2200      	movs	r2, #0
 800a256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	4413      	add	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a260:	2208      	movs	r2, #8
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 0307 	bic.w	r3, r3, #7
 800a26e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4a15      	ldr	r2, [pc, #84]	; (800a2c8 <prvHeapInit+0xb4>)
 800a274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a276:	4b14      	ldr	r3, [pc, #80]	; (800a2c8 <prvHeapInit+0xb4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2200      	movs	r2, #0
 800a27c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a27e:	4b12      	ldr	r3, [pc, #72]	; (800a2c8 <prvHeapInit+0xb4>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	1ad2      	subs	r2, r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a294:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <prvHeapInit+0xb4>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	4a0a      	ldr	r2, [pc, #40]	; (800a2cc <prvHeapInit+0xb8>)
 800a2a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	4a09      	ldr	r2, [pc, #36]	; (800a2d0 <prvHeapInit+0xbc>)
 800a2aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2ac:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <prvHeapInit+0xc0>)
 800a2ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a2b2:	601a      	str	r2, [r3, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	20001138 	.word	0x20001138
 800a2c4:	20001cf0 	.word	0x20001cf0
 800a2c8:	20001cf8 	.word	0x20001cf8
 800a2cc:	20001d00 	.word	0x20001d00
 800a2d0:	20001cfc 	.word	0x20001cfc
 800a2d4:	20001d0c 	.word	0x20001d0c

0800a2d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2e0:	4b28      	ldr	r3, [pc, #160]	; (800a384 <prvInsertBlockIntoFreeList+0xac>)
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	e002      	b.n	800a2ec <prvInsertBlockIntoFreeList+0x14>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d8f7      	bhi.n	800a2e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	4413      	add	r3, r2
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	429a      	cmp	r2, r3
 800a306:	d108      	bne.n	800a31a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	441a      	add	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	441a      	add	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d118      	bne.n	800a360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4b15      	ldr	r3, [pc, #84]	; (800a388 <prvInsertBlockIntoFreeList+0xb0>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d00d      	beq.n	800a356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	441a      	add	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	e008      	b.n	800a368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a356:	4b0c      	ldr	r3, [pc, #48]	; (800a388 <prvInsertBlockIntoFreeList+0xb0>)
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	e003      	b.n	800a368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d002      	beq.n	800a376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a376:	bf00      	nop
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	20001cf0 	.word	0x20001cf0
 800a388:	20001cf8 	.word	0x20001cf8

0800a38c <__libc_init_array>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	4d0d      	ldr	r5, [pc, #52]	; (800a3c4 <__libc_init_array+0x38>)
 800a390:	4c0d      	ldr	r4, [pc, #52]	; (800a3c8 <__libc_init_array+0x3c>)
 800a392:	1b64      	subs	r4, r4, r5
 800a394:	10a4      	asrs	r4, r4, #2
 800a396:	2600      	movs	r6, #0
 800a398:	42a6      	cmp	r6, r4
 800a39a:	d109      	bne.n	800a3b0 <__libc_init_array+0x24>
 800a39c:	4d0b      	ldr	r5, [pc, #44]	; (800a3cc <__libc_init_array+0x40>)
 800a39e:	4c0c      	ldr	r4, [pc, #48]	; (800a3d0 <__libc_init_array+0x44>)
 800a3a0:	f000 f8f2 	bl	800a588 <_init>
 800a3a4:	1b64      	subs	r4, r4, r5
 800a3a6:	10a4      	asrs	r4, r4, #2
 800a3a8:	2600      	movs	r6, #0
 800a3aa:	42a6      	cmp	r6, r4
 800a3ac:	d105      	bne.n	800a3ba <__libc_init_array+0x2e>
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}
 800a3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3b4:	4798      	blx	r3
 800a3b6:	3601      	adds	r6, #1
 800a3b8:	e7ee      	b.n	800a398 <__libc_init_array+0xc>
 800a3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3be:	4798      	blx	r3
 800a3c0:	3601      	adds	r6, #1
 800a3c2:	e7f2      	b.n	800a3aa <__libc_init_array+0x1e>
 800a3c4:	0800a748 	.word	0x0800a748
 800a3c8:	0800a748 	.word	0x0800a748
 800a3cc:	0800a748 	.word	0x0800a748
 800a3d0:	0800a74c 	.word	0x0800a74c

0800a3d4 <__retarget_lock_acquire_recursive>:
 800a3d4:	4770      	bx	lr

0800a3d6 <__retarget_lock_release_recursive>:
 800a3d6:	4770      	bx	lr

0800a3d8 <memcpy>:
 800a3d8:	440a      	add	r2, r1
 800a3da:	4291      	cmp	r1, r2
 800a3dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3e0:	d100      	bne.n	800a3e4 <memcpy+0xc>
 800a3e2:	4770      	bx	lr
 800a3e4:	b510      	push	{r4, lr}
 800a3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3ee:	4291      	cmp	r1, r2
 800a3f0:	d1f9      	bne.n	800a3e6 <memcpy+0xe>
 800a3f2:	bd10      	pop	{r4, pc}

0800a3f4 <memset>:
 800a3f4:	4402      	add	r2, r0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d100      	bne.n	800a3fe <memset+0xa>
 800a3fc:	4770      	bx	lr
 800a3fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a402:	e7f9      	b.n	800a3f8 <memset+0x4>

0800a404 <cleanup_glue>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	460c      	mov	r4, r1
 800a408:	6809      	ldr	r1, [r1, #0]
 800a40a:	4605      	mov	r5, r0
 800a40c:	b109      	cbz	r1, 800a412 <cleanup_glue+0xe>
 800a40e:	f7ff fff9 	bl	800a404 <cleanup_glue>
 800a412:	4621      	mov	r1, r4
 800a414:	4628      	mov	r0, r5
 800a416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a41a:	f000 b869 	b.w	800a4f0 <_free_r>
	...

0800a420 <_reclaim_reent>:
 800a420:	4b2c      	ldr	r3, [pc, #176]	; (800a4d4 <_reclaim_reent+0xb4>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4283      	cmp	r3, r0
 800a426:	b570      	push	{r4, r5, r6, lr}
 800a428:	4604      	mov	r4, r0
 800a42a:	d051      	beq.n	800a4d0 <_reclaim_reent+0xb0>
 800a42c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a42e:	b143      	cbz	r3, 800a442 <_reclaim_reent+0x22>
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d14a      	bne.n	800a4cc <_reclaim_reent+0xac>
 800a436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a438:	6819      	ldr	r1, [r3, #0]
 800a43a:	b111      	cbz	r1, 800a442 <_reclaim_reent+0x22>
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 f857 	bl	800a4f0 <_free_r>
 800a442:	6961      	ldr	r1, [r4, #20]
 800a444:	b111      	cbz	r1, 800a44c <_reclaim_reent+0x2c>
 800a446:	4620      	mov	r0, r4
 800a448:	f000 f852 	bl	800a4f0 <_free_r>
 800a44c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a44e:	b111      	cbz	r1, 800a456 <_reclaim_reent+0x36>
 800a450:	4620      	mov	r0, r4
 800a452:	f000 f84d 	bl	800a4f0 <_free_r>
 800a456:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a458:	b111      	cbz	r1, 800a460 <_reclaim_reent+0x40>
 800a45a:	4620      	mov	r0, r4
 800a45c:	f000 f848 	bl	800a4f0 <_free_r>
 800a460:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a462:	b111      	cbz	r1, 800a46a <_reclaim_reent+0x4a>
 800a464:	4620      	mov	r0, r4
 800a466:	f000 f843 	bl	800a4f0 <_free_r>
 800a46a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a46c:	b111      	cbz	r1, 800a474 <_reclaim_reent+0x54>
 800a46e:	4620      	mov	r0, r4
 800a470:	f000 f83e 	bl	800a4f0 <_free_r>
 800a474:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a476:	b111      	cbz	r1, 800a47e <_reclaim_reent+0x5e>
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 f839 	bl	800a4f0 <_free_r>
 800a47e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a480:	b111      	cbz	r1, 800a488 <_reclaim_reent+0x68>
 800a482:	4620      	mov	r0, r4
 800a484:	f000 f834 	bl	800a4f0 <_free_r>
 800a488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a48a:	b111      	cbz	r1, 800a492 <_reclaim_reent+0x72>
 800a48c:	4620      	mov	r0, r4
 800a48e:	f000 f82f 	bl	800a4f0 <_free_r>
 800a492:	69a3      	ldr	r3, [r4, #24]
 800a494:	b1e3      	cbz	r3, 800a4d0 <_reclaim_reent+0xb0>
 800a496:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a498:	4620      	mov	r0, r4
 800a49a:	4798      	blx	r3
 800a49c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a49e:	b1b9      	cbz	r1, 800a4d0 <_reclaim_reent+0xb0>
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4a6:	f7ff bfad 	b.w	800a404 <cleanup_glue>
 800a4aa:	5949      	ldr	r1, [r1, r5]
 800a4ac:	b941      	cbnz	r1, 800a4c0 <_reclaim_reent+0xa0>
 800a4ae:	3504      	adds	r5, #4
 800a4b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4b2:	2d80      	cmp	r5, #128	; 0x80
 800a4b4:	68d9      	ldr	r1, [r3, #12]
 800a4b6:	d1f8      	bne.n	800a4aa <_reclaim_reent+0x8a>
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 f819 	bl	800a4f0 <_free_r>
 800a4be:	e7ba      	b.n	800a436 <_reclaim_reent+0x16>
 800a4c0:	680e      	ldr	r6, [r1, #0]
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 f814 	bl	800a4f0 <_free_r>
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	e7ef      	b.n	800a4ac <_reclaim_reent+0x8c>
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	e7ef      	b.n	800a4b0 <_reclaim_reent+0x90>
 800a4d0:	bd70      	pop	{r4, r5, r6, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000014 	.word	0x20000014

0800a4d8 <__malloc_lock>:
 800a4d8:	4801      	ldr	r0, [pc, #4]	; (800a4e0 <__malloc_lock+0x8>)
 800a4da:	f7ff bf7b 	b.w	800a3d4 <__retarget_lock_acquire_recursive>
 800a4de:	bf00      	nop
 800a4e0:	20001d10 	.word	0x20001d10

0800a4e4 <__malloc_unlock>:
 800a4e4:	4801      	ldr	r0, [pc, #4]	; (800a4ec <__malloc_unlock+0x8>)
 800a4e6:	f7ff bf76 	b.w	800a3d6 <__retarget_lock_release_recursive>
 800a4ea:	bf00      	nop
 800a4ec:	20001d10 	.word	0x20001d10

0800a4f0 <_free_r>:
 800a4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4f2:	2900      	cmp	r1, #0
 800a4f4:	d044      	beq.n	800a580 <_free_r+0x90>
 800a4f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4fa:	9001      	str	r0, [sp, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a502:	bfb8      	it	lt
 800a504:	18e4      	addlt	r4, r4, r3
 800a506:	f7ff ffe7 	bl	800a4d8 <__malloc_lock>
 800a50a:	4a1e      	ldr	r2, [pc, #120]	; (800a584 <_free_r+0x94>)
 800a50c:	9801      	ldr	r0, [sp, #4]
 800a50e:	6813      	ldr	r3, [r2, #0]
 800a510:	b933      	cbnz	r3, 800a520 <_free_r+0x30>
 800a512:	6063      	str	r3, [r4, #4]
 800a514:	6014      	str	r4, [r2, #0]
 800a516:	b003      	add	sp, #12
 800a518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a51c:	f7ff bfe2 	b.w	800a4e4 <__malloc_unlock>
 800a520:	42a3      	cmp	r3, r4
 800a522:	d908      	bls.n	800a536 <_free_r+0x46>
 800a524:	6825      	ldr	r5, [r4, #0]
 800a526:	1961      	adds	r1, r4, r5
 800a528:	428b      	cmp	r3, r1
 800a52a:	bf01      	itttt	eq
 800a52c:	6819      	ldreq	r1, [r3, #0]
 800a52e:	685b      	ldreq	r3, [r3, #4]
 800a530:	1949      	addeq	r1, r1, r5
 800a532:	6021      	streq	r1, [r4, #0]
 800a534:	e7ed      	b.n	800a512 <_free_r+0x22>
 800a536:	461a      	mov	r2, r3
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	b10b      	cbz	r3, 800a540 <_free_r+0x50>
 800a53c:	42a3      	cmp	r3, r4
 800a53e:	d9fa      	bls.n	800a536 <_free_r+0x46>
 800a540:	6811      	ldr	r1, [r2, #0]
 800a542:	1855      	adds	r5, r2, r1
 800a544:	42a5      	cmp	r5, r4
 800a546:	d10b      	bne.n	800a560 <_free_r+0x70>
 800a548:	6824      	ldr	r4, [r4, #0]
 800a54a:	4421      	add	r1, r4
 800a54c:	1854      	adds	r4, r2, r1
 800a54e:	42a3      	cmp	r3, r4
 800a550:	6011      	str	r1, [r2, #0]
 800a552:	d1e0      	bne.n	800a516 <_free_r+0x26>
 800a554:	681c      	ldr	r4, [r3, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	6053      	str	r3, [r2, #4]
 800a55a:	4421      	add	r1, r4
 800a55c:	6011      	str	r1, [r2, #0]
 800a55e:	e7da      	b.n	800a516 <_free_r+0x26>
 800a560:	d902      	bls.n	800a568 <_free_r+0x78>
 800a562:	230c      	movs	r3, #12
 800a564:	6003      	str	r3, [r0, #0]
 800a566:	e7d6      	b.n	800a516 <_free_r+0x26>
 800a568:	6825      	ldr	r5, [r4, #0]
 800a56a:	1961      	adds	r1, r4, r5
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf04      	itt	eq
 800a570:	6819      	ldreq	r1, [r3, #0]
 800a572:	685b      	ldreq	r3, [r3, #4]
 800a574:	6063      	str	r3, [r4, #4]
 800a576:	bf04      	itt	eq
 800a578:	1949      	addeq	r1, r1, r5
 800a57a:	6021      	streq	r1, [r4, #0]
 800a57c:	6054      	str	r4, [r2, #4]
 800a57e:	e7ca      	b.n	800a516 <_free_r+0x26>
 800a580:	b003      	add	sp, #12
 800a582:	bd30      	pop	{r4, r5, pc}
 800a584:	20001d14 	.word	0x20001d14

0800a588 <_init>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	bf00      	nop
 800a58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a58e:	bc08      	pop	{r3}
 800a590:	469e      	mov	lr, r3
 800a592:	4770      	bx	lr

0800a594 <_fini>:
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a596:	bf00      	nop
 800a598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59a:	bc08      	pop	{r3}
 800a59c:	469e      	mov	lr, r3
 800a59e:	4770      	bx	lr
