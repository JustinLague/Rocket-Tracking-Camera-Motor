
Rocket-Tracking-Camera-Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d2c  08009d2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009d2c  08009d2c  00019d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d34  08009d34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d34  08009d34  00019d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d38  08009d38  00019d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c90  20000074  08009db0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d04  08009db0  00021d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021928  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fbf  00000000  00000000  000419cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  00045990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001940  00000000  00000000  00047448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029175  00000000  00000000  00048d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecbb  00000000  00000000  00071efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffba5  00000000  00000000  00090bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019075d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000753c  00000000  00000000  001907b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b98 	.word	0x08009b98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009b98 	.word	0x08009b98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_d2uiz>:
 8000558:	004a      	lsls	r2, r1, #1
 800055a:	d211      	bcs.n	8000580 <__aeabi_d2uiz+0x28>
 800055c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000560:	d211      	bcs.n	8000586 <__aeabi_d2uiz+0x2e>
 8000562:	d50d      	bpl.n	8000580 <__aeabi_d2uiz+0x28>
 8000564:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000568:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800056c:	d40e      	bmi.n	800058c <__aeabi_d2uiz+0x34>
 800056e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000576:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800057a:	fa23 f002 	lsr.w	r0, r3, r2
 800057e:	4770      	bx	lr
 8000580:	f04f 0000 	mov.w	r0, #0
 8000584:	4770      	bx	lr
 8000586:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800058a:	d102      	bne.n	8000592 <__aeabi_d2uiz+0x3a>
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	4770      	bx	lr
 8000592:	f04f 0000 	mov.w	r0, #0
 8000596:	4770      	bx	lr

08000598 <__aeabi_uldivmod>:
 8000598:	b953      	cbnz	r3, 80005b0 <__aeabi_uldivmod+0x18>
 800059a:	b94a      	cbnz	r2, 80005b0 <__aeabi_uldivmod+0x18>
 800059c:	2900      	cmp	r1, #0
 800059e:	bf08      	it	eq
 80005a0:	2800      	cmpeq	r0, #0
 80005a2:	bf1c      	itt	ne
 80005a4:	f04f 31ff 	movne.w	r1, #4294967295
 80005a8:	f04f 30ff 	movne.w	r0, #4294967295
 80005ac:	f000 b974 	b.w	8000898 <__aeabi_idiv0>
 80005b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80005b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b8:	f000 f806 	bl	80005c8 <__udivmoddi4>
 80005bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005c4:	b004      	add	sp, #16
 80005c6:	4770      	bx	lr

080005c8 <__udivmoddi4>:
 80005c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005cc:	9d08      	ldr	r5, [sp, #32]
 80005ce:	4604      	mov	r4, r0
 80005d0:	468e      	mov	lr, r1
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d14d      	bne.n	8000672 <__udivmoddi4+0xaa>
 80005d6:	428a      	cmp	r2, r1
 80005d8:	4694      	mov	ip, r2
 80005da:	d969      	bls.n	80006b0 <__udivmoddi4+0xe8>
 80005dc:	fab2 f282 	clz	r2, r2
 80005e0:	b152      	cbz	r2, 80005f8 <__udivmoddi4+0x30>
 80005e2:	fa01 f302 	lsl.w	r3, r1, r2
 80005e6:	f1c2 0120 	rsb	r1, r2, #32
 80005ea:	fa20 f101 	lsr.w	r1, r0, r1
 80005ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f2:	ea41 0e03 	orr.w	lr, r1, r3
 80005f6:	4094      	lsls	r4, r2
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	0c21      	lsrs	r1, r4, #16
 80005fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000602:	fa1f f78c 	uxth.w	r7, ip
 8000606:	fb08 e316 	mls	r3, r8, r6, lr
 800060a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800060e:	fb06 f107 	mul.w	r1, r6, r7
 8000612:	4299      	cmp	r1, r3
 8000614:	d90a      	bls.n	800062c <__udivmoddi4+0x64>
 8000616:	eb1c 0303 	adds.w	r3, ip, r3
 800061a:	f106 30ff 	add.w	r0, r6, #4294967295
 800061e:	f080 811f 	bcs.w	8000860 <__udivmoddi4+0x298>
 8000622:	4299      	cmp	r1, r3
 8000624:	f240 811c 	bls.w	8000860 <__udivmoddi4+0x298>
 8000628:	3e02      	subs	r6, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f0f8 	udiv	r0, r3, r8
 8000634:	fb08 3310 	mls	r3, r8, r0, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb00 f707 	mul.w	r7, r0, r7
 8000640:	42a7      	cmp	r7, r4
 8000642:	d90a      	bls.n	800065a <__udivmoddi4+0x92>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f100 33ff 	add.w	r3, r0, #4294967295
 800064c:	f080 810a 	bcs.w	8000864 <__udivmoddi4+0x29c>
 8000650:	42a7      	cmp	r7, r4
 8000652:	f240 8107 	bls.w	8000864 <__udivmoddi4+0x29c>
 8000656:	4464      	add	r4, ip
 8000658:	3802      	subs	r0, #2
 800065a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800065e:	1be4      	subs	r4, r4, r7
 8000660:	2600      	movs	r6, #0
 8000662:	b11d      	cbz	r5, 800066c <__udivmoddi4+0xa4>
 8000664:	40d4      	lsrs	r4, r2
 8000666:	2300      	movs	r3, #0
 8000668:	e9c5 4300 	strd	r4, r3, [r5]
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	428b      	cmp	r3, r1
 8000674:	d909      	bls.n	800068a <__udivmoddi4+0xc2>
 8000676:	2d00      	cmp	r5, #0
 8000678:	f000 80ef 	beq.w	800085a <__udivmoddi4+0x292>
 800067c:	2600      	movs	r6, #0
 800067e:	e9c5 0100 	strd	r0, r1, [r5]
 8000682:	4630      	mov	r0, r6
 8000684:	4631      	mov	r1, r6
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	fab3 f683 	clz	r6, r3
 800068e:	2e00      	cmp	r6, #0
 8000690:	d14a      	bne.n	8000728 <__udivmoddi4+0x160>
 8000692:	428b      	cmp	r3, r1
 8000694:	d302      	bcc.n	800069c <__udivmoddi4+0xd4>
 8000696:	4282      	cmp	r2, r0
 8000698:	f200 80f9 	bhi.w	800088e <__udivmoddi4+0x2c6>
 800069c:	1a84      	subs	r4, r0, r2
 800069e:	eb61 0303 	sbc.w	r3, r1, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	469e      	mov	lr, r3
 80006a6:	2d00      	cmp	r5, #0
 80006a8:	d0e0      	beq.n	800066c <__udivmoddi4+0xa4>
 80006aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80006ae:	e7dd      	b.n	800066c <__udivmoddi4+0xa4>
 80006b0:	b902      	cbnz	r2, 80006b4 <__udivmoddi4+0xec>
 80006b2:	deff      	udf	#255	; 0xff
 80006b4:	fab2 f282 	clz	r2, r2
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	f040 8092 	bne.w	80007e2 <__udivmoddi4+0x21a>
 80006be:	eba1 010c 	sub.w	r1, r1, ip
 80006c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006c6:	fa1f fe8c 	uxth.w	lr, ip
 80006ca:	2601      	movs	r6, #1
 80006cc:	0c20      	lsrs	r0, r4, #16
 80006ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80006d2:	fb07 1113 	mls	r1, r7, r3, r1
 80006d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006da:	fb0e f003 	mul.w	r0, lr, r3
 80006de:	4288      	cmp	r0, r1
 80006e0:	d908      	bls.n	80006f4 <__udivmoddi4+0x12c>
 80006e2:	eb1c 0101 	adds.w	r1, ip, r1
 80006e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80006ea:	d202      	bcs.n	80006f2 <__udivmoddi4+0x12a>
 80006ec:	4288      	cmp	r0, r1
 80006ee:	f200 80cb 	bhi.w	8000888 <__udivmoddi4+0x2c0>
 80006f2:	4643      	mov	r3, r8
 80006f4:	1a09      	subs	r1, r1, r0
 80006f6:	b2a4      	uxth	r4, r4
 80006f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80006fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000700:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000704:	fb0e fe00 	mul.w	lr, lr, r0
 8000708:	45a6      	cmp	lr, r4
 800070a:	d908      	bls.n	800071e <__udivmoddi4+0x156>
 800070c:	eb1c 0404 	adds.w	r4, ip, r4
 8000710:	f100 31ff 	add.w	r1, r0, #4294967295
 8000714:	d202      	bcs.n	800071c <__udivmoddi4+0x154>
 8000716:	45a6      	cmp	lr, r4
 8000718:	f200 80bb 	bhi.w	8000892 <__udivmoddi4+0x2ca>
 800071c:	4608      	mov	r0, r1
 800071e:	eba4 040e 	sub.w	r4, r4, lr
 8000722:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000726:	e79c      	b.n	8000662 <__udivmoddi4+0x9a>
 8000728:	f1c6 0720 	rsb	r7, r6, #32
 800072c:	40b3      	lsls	r3, r6
 800072e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000732:	ea4c 0c03 	orr.w	ip, ip, r3
 8000736:	fa20 f407 	lsr.w	r4, r0, r7
 800073a:	fa01 f306 	lsl.w	r3, r1, r6
 800073e:	431c      	orrs	r4, r3
 8000740:	40f9      	lsrs	r1, r7
 8000742:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000746:	fa00 f306 	lsl.w	r3, r0, r6
 800074a:	fbb1 f8f9 	udiv	r8, r1, r9
 800074e:	0c20      	lsrs	r0, r4, #16
 8000750:	fa1f fe8c 	uxth.w	lr, ip
 8000754:	fb09 1118 	mls	r1, r9, r8, r1
 8000758:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800075c:	fb08 f00e 	mul.w	r0, r8, lr
 8000760:	4288      	cmp	r0, r1
 8000762:	fa02 f206 	lsl.w	r2, r2, r6
 8000766:	d90b      	bls.n	8000780 <__udivmoddi4+0x1b8>
 8000768:	eb1c 0101 	adds.w	r1, ip, r1
 800076c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000770:	f080 8088 	bcs.w	8000884 <__udivmoddi4+0x2bc>
 8000774:	4288      	cmp	r0, r1
 8000776:	f240 8085 	bls.w	8000884 <__udivmoddi4+0x2bc>
 800077a:	f1a8 0802 	sub.w	r8, r8, #2
 800077e:	4461      	add	r1, ip
 8000780:	1a09      	subs	r1, r1, r0
 8000782:	b2a4      	uxth	r4, r4
 8000784:	fbb1 f0f9 	udiv	r0, r1, r9
 8000788:	fb09 1110 	mls	r1, r9, r0, r1
 800078c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000790:	fb00 fe0e 	mul.w	lr, r0, lr
 8000794:	458e      	cmp	lr, r1
 8000796:	d908      	bls.n	80007aa <__udivmoddi4+0x1e2>
 8000798:	eb1c 0101 	adds.w	r1, ip, r1
 800079c:	f100 34ff 	add.w	r4, r0, #4294967295
 80007a0:	d26c      	bcs.n	800087c <__udivmoddi4+0x2b4>
 80007a2:	458e      	cmp	lr, r1
 80007a4:	d96a      	bls.n	800087c <__udivmoddi4+0x2b4>
 80007a6:	3802      	subs	r0, #2
 80007a8:	4461      	add	r1, ip
 80007aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007ae:	fba0 9402 	umull	r9, r4, r0, r2
 80007b2:	eba1 010e 	sub.w	r1, r1, lr
 80007b6:	42a1      	cmp	r1, r4
 80007b8:	46c8      	mov	r8, r9
 80007ba:	46a6      	mov	lr, r4
 80007bc:	d356      	bcc.n	800086c <__udivmoddi4+0x2a4>
 80007be:	d053      	beq.n	8000868 <__udivmoddi4+0x2a0>
 80007c0:	b15d      	cbz	r5, 80007da <__udivmoddi4+0x212>
 80007c2:	ebb3 0208 	subs.w	r2, r3, r8
 80007c6:	eb61 010e 	sbc.w	r1, r1, lr
 80007ca:	fa01 f707 	lsl.w	r7, r1, r7
 80007ce:	fa22 f306 	lsr.w	r3, r2, r6
 80007d2:	40f1      	lsrs	r1, r6
 80007d4:	431f      	orrs	r7, r3
 80007d6:	e9c5 7100 	strd	r7, r1, [r5]
 80007da:	2600      	movs	r6, #0
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	40d8      	lsrs	r0, r3
 80007e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80007ec:	fa21 f303 	lsr.w	r3, r1, r3
 80007f0:	4091      	lsls	r1, r2
 80007f2:	4301      	orrs	r1, r0
 80007f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007f8:	fa1f fe8c 	uxth.w	lr, ip
 80007fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000800:	fb07 3610 	mls	r6, r7, r0, r3
 8000804:	0c0b      	lsrs	r3, r1, #16
 8000806:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800080a:	fb00 f60e 	mul.w	r6, r0, lr
 800080e:	429e      	cmp	r6, r3
 8000810:	fa04 f402 	lsl.w	r4, r4, r2
 8000814:	d908      	bls.n	8000828 <__udivmoddi4+0x260>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f100 38ff 	add.w	r8, r0, #4294967295
 800081e:	d22f      	bcs.n	8000880 <__udivmoddi4+0x2b8>
 8000820:	429e      	cmp	r6, r3
 8000822:	d92d      	bls.n	8000880 <__udivmoddi4+0x2b8>
 8000824:	3802      	subs	r0, #2
 8000826:	4463      	add	r3, ip
 8000828:	1b9b      	subs	r3, r3, r6
 800082a:	b289      	uxth	r1, r1
 800082c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000830:	fb07 3316 	mls	r3, r7, r6, r3
 8000834:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000838:	fb06 f30e 	mul.w	r3, r6, lr
 800083c:	428b      	cmp	r3, r1
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x28a>
 8000840:	eb1c 0101 	adds.w	r1, ip, r1
 8000844:	f106 38ff 	add.w	r8, r6, #4294967295
 8000848:	d216      	bcs.n	8000878 <__udivmoddi4+0x2b0>
 800084a:	428b      	cmp	r3, r1
 800084c:	d914      	bls.n	8000878 <__udivmoddi4+0x2b0>
 800084e:	3e02      	subs	r6, #2
 8000850:	4461      	add	r1, ip
 8000852:	1ac9      	subs	r1, r1, r3
 8000854:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000858:	e738      	b.n	80006cc <__udivmoddi4+0x104>
 800085a:	462e      	mov	r6, r5
 800085c:	4628      	mov	r0, r5
 800085e:	e705      	b.n	800066c <__udivmoddi4+0xa4>
 8000860:	4606      	mov	r6, r0
 8000862:	e6e3      	b.n	800062c <__udivmoddi4+0x64>
 8000864:	4618      	mov	r0, r3
 8000866:	e6f8      	b.n	800065a <__udivmoddi4+0x92>
 8000868:	454b      	cmp	r3, r9
 800086a:	d2a9      	bcs.n	80007c0 <__udivmoddi4+0x1f8>
 800086c:	ebb9 0802 	subs.w	r8, r9, r2
 8000870:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000874:	3801      	subs	r0, #1
 8000876:	e7a3      	b.n	80007c0 <__udivmoddi4+0x1f8>
 8000878:	4646      	mov	r6, r8
 800087a:	e7ea      	b.n	8000852 <__udivmoddi4+0x28a>
 800087c:	4620      	mov	r0, r4
 800087e:	e794      	b.n	80007aa <__udivmoddi4+0x1e2>
 8000880:	4640      	mov	r0, r8
 8000882:	e7d1      	b.n	8000828 <__udivmoddi4+0x260>
 8000884:	46d0      	mov	r8, sl
 8000886:	e77b      	b.n	8000780 <__udivmoddi4+0x1b8>
 8000888:	3b02      	subs	r3, #2
 800088a:	4461      	add	r1, ip
 800088c:	e732      	b.n	80006f4 <__udivmoddi4+0x12c>
 800088e:	4630      	mov	r0, r6
 8000890:	e709      	b.n	80006a6 <__udivmoddi4+0xde>
 8000892:	4464      	add	r4, ip
 8000894:	3802      	subs	r0, #2
 8000896:	e742      	b.n	800071e <__udivmoddi4+0x156>

08000898 <__aeabi_idiv0>:
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <tsk_i2c>:

/******************************************************************************/
/*                             Function implementation                        */
/******************************************************************************/

void tsk_i2c() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	if(HAL_I2C_EnableListen_IT(get_hi2cl()) != HAL_OK) {
 80008a0:	f000 fa0a 	bl	8000cb8 <get_hi2cl>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fd58 	bl	800235c <HAL_I2C_EnableListen_IT>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <tsk_i2c+0x1a>
		Error_Handler();
 80008b2:	f000 fd65 	bl	8001380 <Error_Handler>
	}

	while(1){
		osDelay(10000);
 80008b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80008ba:	f006 fbd1 	bl	8007060 <osDelay>
	while(1){
 80008be:	e7fa      	b.n	80008b6 <tsk_i2c+0x1a>

080008c0 <HAL_I2C_SlaveTxCpltCallback>:
	}
}

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	//strcpy((char*) debug_buf, "SlaveTxCptl\r\n");
	//HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	ft.b[0] = aRxBuffer[1];
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80008de:	785a      	ldrb	r2, [r3, #1]
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80008e2:	701a      	strb	r2, [r3, #0]
	ft.b[1] = aRxBuffer[2];
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80008e6:	789a      	ldrb	r2, [r3, #2]
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80008ea:	705a      	strb	r2, [r3, #1]
	ft.b[2] = aRxBuffer[3];
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80008ee:	78da      	ldrb	r2, [r3, #3]
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80008f2:	709a      	strb	r2, [r3, #2]
	ft.b[3] = aRxBuffer[4];
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80008f6:	791a      	ldrb	r2, [r3, #4]
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80008fa:	70da      	strb	r2, [r3, #3]


	//strcpy((char*) debug_buf, "SlaveRxCptl\r\n");
	//HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	20000094 	.word	0x20000094
 800090c:	20000090 	.word	0x20000090

08000910 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
 800091c:	4613      	mov	r3, r2
 800091e:	803b      	strh	r3, [r7, #0]
	if (TransferDirection != 0) {
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d00d      	beq.n	8000942 <HAL_I2C_AddrCallback+0x32>
		 /*##- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
		 "aTxBuffer" buffer */
		if (HAL_I2C_Slave_Seq_Transmit_IT(get_hi2cl(), (uint8_t *)aTxBuffer, TXBUFFERSIZE, I2C_NEXT_FRAME) != HAL_OK) {
 8000926:	f000 f9c7 	bl	8000cb8 <get_hi2cl>
 800092a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800092e:	2205      	movs	r2, #5
 8000930:	490c      	ldr	r1, [pc, #48]	; (8000964 <HAL_I2C_AddrCallback+0x54>)
 8000932:	f001 fbcb 	bl	80020cc <HAL_I2C_Slave_Seq_Transmit_IT>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00f      	beq.n	800095c <HAL_I2C_AddrCallback+0x4c>
			/* Transfer error in transmission process */
			Error_Handler();
 800093c:	f000 fd20 	bl	8001380 <Error_Handler>
		if (HAL_I2C_Slave_Seq_Receive_IT(get_hi2cl(), (uint8_t *)aRxBuffer, RXBUFFERSIZE, I2C_NEXT_FRAME) != HAL_OK) {
			/* Transfer error in reception process */
			Error_Handler();
		}
	}
}
 8000940:	e00c      	b.n	800095c <HAL_I2C_AddrCallback+0x4c>
		if (HAL_I2C_Slave_Seq_Receive_IT(get_hi2cl(), (uint8_t *)aRxBuffer, RXBUFFERSIZE, I2C_NEXT_FRAME) != HAL_OK) {
 8000942:	f000 f9b9 	bl	8000cb8 <get_hi2cl>
 8000946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800094a:	2205      	movs	r2, #5
 800094c:	4906      	ldr	r1, [pc, #24]	; (8000968 <HAL_I2C_AddrCallback+0x58>)
 800094e:	f001 fc61 	bl	8002214 <HAL_I2C_Slave_Seq_Receive_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <HAL_I2C_AddrCallback+0x4c>
			Error_Handler();
 8000958:	f000 fd12 	bl	8001380 <Error_Handler>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000009c 	.word	0x2000009c
 8000968:	20000094 	.word	0x20000094

0800096c <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	//strcpy((char*) debug_buf, "ListenCplt\r\n");
	//HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);

	if(HAL_I2C_EnableListen_IT(get_hi2cl()) != HAL_OK) {
 8000974:	f000 f9a0 	bl	8000cb8 <get_hi2cl>
 8000978:	4603      	mov	r3, r0
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fcee 	bl	800235c <HAL_I2C_EnableListen_IT>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_I2C_ListenCpltCallback+0x1e>
		Error_Handler();
 8000986:	f000 fcfb 	bl	8001380 <Error_Handler>
	}
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */

	strcpy((char*) debug_buf, "Erreur\r\n");
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_I2C_ErrorCallback+0x6c>)
 800099e:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <HAL_I2C_ErrorCallback+0x70>)
 80009a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009a2:	c303      	stmia	r3!, {r0, r1}
 80009a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
 80009a6:	f000 f991 	bl	8000ccc <get_huart2>
 80009aa:	4604      	mov	r4, r0
 80009ac:	4814      	ldr	r0, [pc, #80]	; (8000a00 <HAL_I2C_ErrorCallback+0x6c>)
 80009ae:	f7ff fc0f 	bl	80001d0 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	4911      	ldr	r1, [pc, #68]	; (8000a00 <HAL_I2C_ErrorCallback+0x6c>)
 80009bc:	4620      	mov	r0, r4
 80009be:	f005 fcdb 	bl	8006378 <HAL_UART_Transmit>

	if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF) {
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f001 fd97 	bl	80024f6 <HAL_I2C_GetError>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d014      	beq.n	80009f8 <HAL_I2C_ErrorCallback+0x64>
		strcpy((char*) debug_buf, "Erreur AF\r\n");
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_I2C_ErrorCallback+0x6c>)
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <HAL_I2C_ErrorCallback+0x74>)
 80009d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80009d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
 80009d8:	f000 f978 	bl	8000ccc <get_huart2>
 80009dc:	4604      	mov	r4, r0
 80009de:	4808      	ldr	r0, [pc, #32]	; (8000a00 <HAL_I2C_ErrorCallback+0x6c>)
 80009e0:	f7ff fbf6 	bl	80001d0 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ec:	4904      	ldr	r1, [pc, #16]	; (8000a00 <HAL_I2C_ErrorCallback+0x6c>)
 80009ee:	4620      	mov	r0, r4
 80009f0:	f005 fcc2 	bl	8006378 <HAL_UART_Transmit>
		Error_Handler();
 80009f4:	f000 fcc4 	bl	8001380 <Error_Handler>
	}
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	200000a4 	.word	0x200000a4
 8000a04:	08009bb0 	.word	0x08009bb0
 8000a08:	08009bbc 	.word	0x08009bbc

08000a0c <tsk_motor_control>:
Timer_def_t timer_zoom;


uint8_t speed[12];

void tsk_motor_control() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0

	start_motor(Motor_x);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f000 f91a 	bl	8000c4c <start_motor>
	start_motor(Motor_y);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f000 f917 	bl	8000c4c <start_motor>
	start_motor(Motor_zoom);
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f000 f914 	bl	8000c4c <start_motor>

	uint32_t speed_x = 60;
 8000a24:	233c      	movs	r3, #60	; 0x3c
 8000a26:	60fb      	str	r3, [r7, #12]
	uint32_t speed_y = 60;
 8000a28:	233c      	movs	r3, #60	; 0x3c
 8000a2a:	607b      	str	r3, [r7, #4]
	uint32_t speed_zoom = 60;
 8000a2c:	233c      	movs	r3, #60	; 0x3c
 8000a2e:	603b      	str	r3, [r7, #0]

	update_motor_x(speed_x);
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f000 f831 	bl	8000a98 <update_motor_x>
	update_motor_y(speed_y);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 f85a 	bl	8000af0 <update_motor_y>
	update_motor_zoom(speed_zoom);
 8000a3c:	6838      	ldr	r0, [r7, #0]
 8000a3e:	f000 f883 	bl	8000b48 <update_motor_zoom>

	uint8_t go_up = 1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	72fb      	strb	r3, [r7, #11]

	while(1){

		if(go_up) {
 8000a46:	7afb      	ldrb	r3, [r7, #11]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <tsk_motor_control+0x48>
			speed_x += 5;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3305      	adds	r3, #5
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e002      	b.n	8000a5a <tsk_motor_control+0x4e>
		} else {
			speed_x -= 1;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
		}
		if(speed_x >= 3500 && go_up) {
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d904      	bls.n	8000a6e <tsk_motor_control+0x62>
 8000a64:	7afb      	ldrb	r3, [r7, #11]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <tsk_motor_control+0x62>
			go_up = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	72fb      	strb	r3, [r7, #11]
		}
		if (!go_up && speed_x <= 60 ){
 8000a6e:	7afb      	ldrb	r3, [r7, #11]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d104      	bne.n	8000a7e <tsk_motor_control+0x72>
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b3c      	cmp	r3, #60	; 0x3c
 8000a78:	d801      	bhi.n	8000a7e <tsk_motor_control+0x72>
			go_up = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	72fb      	strb	r3, [r7, #11]
		}

		update_motor_x(speed_x);
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f000 f80a 	bl	8000a98 <update_motor_x>
		update_motor_y(speed_y);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f833 	bl	8000af0 <update_motor_y>
		update_motor_zoom(speed_zoom);
 8000a8a:	6838      	ldr	r0, [r7, #0]
 8000a8c:	f000 f85c 	bl	8000b48 <update_motor_zoom>
		osDelay(100);
 8000a90:	2064      	movs	r0, #100	; 0x64
 8000a92:	f006 fae5 	bl	8007060 <osDelay>
		if(go_up) {
 8000a96:	e7d6      	b.n	8000a46 <tsk_motor_control+0x3a>

08000a98 <update_motor_x>:
	}
}


void update_motor_x(uint32_t speed) {
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	change_speed(&timer_x, speed);
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <update_motor_x+0x50>)
 8000aa4:	f000 f8b8 	bl	8000c18 <change_speed>
	osKernelLock();
 8000aa8:	f006 f9f0 	bl	8006e8c <osKernelLock>
		TIM3->ARR = timer_x.arr;
 8000aac:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <update_motor_x+0x54>)
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <update_motor_x+0x50>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->PSC = timer_x.psc;
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <update_motor_x+0x54>)
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <update_motor_x+0x50>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	6293      	str	r3, [r2, #40]	; 0x28
		TIM3->CCR2 = (uint32_t) floor(timer_x.arr / 2);
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <update_motor_x+0x50>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	085b      	lsrs	r3, r3, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fcce 	bl	8000464 <__aeabi_ui2d>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	460b      	mov	r3, r1
 8000acc:	4c07      	ldr	r4, [pc, #28]	; (8000aec <update_motor_x+0x54>)
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f7ff fd41 	bl	8000558 <__aeabi_d2uiz>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	63a3      	str	r3, [r4, #56]	; 0x38
	osKernelUnlock();
 8000ada:	f006 f9fd 	bl	8006ed8 <osKernelUnlock>
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000b0 	.word	0x200000b0
 8000aec:	40000400 	.word	0x40000400

08000af0 <update_motor_y>:

void update_motor_y(uint32_t speed) {
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	change_speed(&timer_y, speed);
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	4811      	ldr	r0, [pc, #68]	; (8000b40 <update_motor_y+0x50>)
 8000afc:	f000 f88c 	bl	8000c18 <change_speed>
	osKernelLock();
 8000b00:	f006 f9c4 	bl	8006e8c <osKernelLock>
		TIM4->ARR = timer_y.arr;
 8000b04:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <update_motor_y+0x54>)
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <update_motor_y+0x50>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM4->PSC = timer_y.psc;
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <update_motor_y+0x54>)
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <update_motor_y+0x50>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	6293      	str	r3, [r2, #40]	; 0x28
		TIM4->CCR3 = (uint32_t) floor(timer_y.arr / 2);
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <update_motor_y+0x50>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fca2 	bl	8000464 <__aeabi_ui2d>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4c07      	ldr	r4, [pc, #28]	; (8000b44 <update_motor_y+0x54>)
 8000b26:	4610      	mov	r0, r2
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f7ff fd15 	bl	8000558 <__aeabi_d2uiz>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	63e3      	str	r3, [r4, #60]	; 0x3c
	osKernelUnlock();
 8000b32:	f006 f9d1 	bl	8006ed8 <osKernelUnlock>
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000b8 	.word	0x200000b8
 8000b44:	40000800 	.word	0x40000800

08000b48 <update_motor_zoom>:

void update_motor_zoom(uint32_t speed) {
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	change_speed(&timer_zoom, speed);
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <update_motor_zoom+0x50>)
 8000b54:	f000 f860 	bl	8000c18 <change_speed>
	osKernelLock();
 8000b58:	f006 f998 	bl	8006e8c <osKernelLock>
		TIM8->ARR = timer_zoom.arr;
 8000b5c:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <update_motor_zoom+0x54>)
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <update_motor_zoom+0x50>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM8->PSC = timer_zoom.psc;
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <update_motor_zoom+0x54>)
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <update_motor_zoom+0x50>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->CCR4 = (uint32_t) floor(timer_zoom.arr / 2);
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <update_motor_zoom+0x50>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fc76 	bl	8000464 <__aeabi_ui2d>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	4c07      	ldr	r4, [pc, #28]	; (8000b9c <update_motor_zoom+0x54>)
 8000b7e:	4610      	mov	r0, r2
 8000b80:	4619      	mov	r1, r3
 8000b82:	f7ff fce9 	bl	8000558 <__aeabi_d2uiz>
 8000b86:	4603      	mov	r3, r0
 8000b88:	6423      	str	r3, [r4, #64]	; 0x40
	osKernelUnlock();
 8000b8a:	f006 f9a5 	bl	8006ed8 <osKernelUnlock>
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200000c0 	.word	0x200000c0
 8000b9c:	40013400 	.word	0x40013400

08000ba0 <change_timer_def_for_freq>:

void change_timer_def_for_freq(uint32_t desired_freq, Timer_def_t* timer_def) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]

	//frequence du PCLK1
	uint32_t f_clk = HAL_RCC_GetPCLK1Freq();
 8000baa:	f003 fb73 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8000bae:	60f8      	str	r0, [r7, #12]

	// formule : https://deepbluembedded.com/stm32-pwm-example-timer-pwm-mode-tutorial/ apres je solve pour ARR
	uint32_t arr = (f_clk / desired_freq);
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb8:	617b      	str	r3, [r7, #20]
	uint32_t psc = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]

	if(arr > 65535) {
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc4:	d315      	bcc.n	8000bf2 <change_timer_def_for_freq+0x52>
		psc = (uint32_t) floor(arr / 65535) + 1;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <change_timer_def_for_freq+0x74>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0bdb      	lsrs	r3, r3, #15
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fc47 	bl	8000464 <__aeabi_ui2d>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	460b      	mov	r3, r1
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f7ff fcbb 	bl	8000558 <__aeabi_d2uiz>
 8000be2:	4603      	mov	r3, r0
 8000be4:	3301      	adds	r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
		arr = arr / psc;
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf0:	617b      	str	r3, [r7, #20]
	}

	timer_def->arr = arr - 1;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	1e5a      	subs	r2, r3, #1
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	601a      	str	r2, [r3, #0]
	timer_def->psc = psc == 0 ? psc : psc - 1;
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <change_timer_def_for_freq+0x66>
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	e000      	b.n	8000c08 <change_timer_def_for_freq+0x68>
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	6053      	str	r3, [r2, #4]
}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	80008001 	.word	0x80008001

08000c18 <change_speed>:

// go to X rpm
void change_speed(Timer_def_t* timer_def, uint32_t speed) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	//TODO: change "400" according to mode 1/mode * 400;

	uint32_t freq = (speed * 400) / 60;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000c28:	fb02 f303 	mul.w	r3, r2, r3
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <change_speed+0x30>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	60fb      	str	r3, [r7, #12]
	change_timer_def_for_freq(freq, timer_def);
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f7ff ffb1 	bl	8000ba0 <change_timer_def_for_freq>
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	88888889 	.word	0x88888889

08000c4c <start_motor>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start_motor(enum Motor_t motor) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	switch(motor){
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d017      	beq.n	8000c8c <start_motor+0x40>
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	dc1d      	bgt.n	8000c9c <start_motor+0x50>
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <start_motor+0x1e>
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d009      	beq.n	8000c7c <start_motor+0x30>
		case Motor_zoom:
			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
			TIM3->PSC = 0;
			break;
	}
}
 8000c68:	e018      	b.n	8000c9c <start_motor+0x50>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <start_motor+0x58>)
 8000c6e:	f004 f9b5 	bl	8004fdc <HAL_TIM_PWM_Start>
			TIM2->PSC = 0;
 8000c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8000c7a:	e00f      	b.n	8000c9c <start_motor+0x50>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <start_motor+0x5c>)
 8000c80:	f004 f9ac 	bl	8004fdc <HAL_TIM_PWM_Start>
			TIM4->PSC = 0;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <start_motor+0x60>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8000c8a:	e007      	b.n	8000c9c <start_motor+0x50>
			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000c8c:	210c      	movs	r1, #12
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <start_motor+0x64>)
 8000c90:	f004 f9a4 	bl	8004fdc <HAL_TIM_PWM_Start>
			TIM3->PSC = 0;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <start_motor+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8000c9a:	bf00      	nop
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000170 	.word	0x20000170
 8000ca8:	200001bc 	.word	0x200001bc
 8000cac:	40000800 	.word	0x40000800
 8000cb0:	20000208 	.word	0x20000208
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <get_hi2cl>:
			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
			break;
	}
}

I2C_HandleTypeDef* get_hi2cl(){ return &hi2c2; }
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <get_hi2cl+0x10>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	200000c8 	.word	0x200000c8

08000ccc <get_huart2>:
UART_HandleTypeDef* get_huart2(){ return &huart2; }
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <get_huart2+0x10>)
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	20000254 	.word	0x20000254

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce6:	f000 fe4c 	bl	8001982 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cea:	f000 f855 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cee:	f000 faef 	bl	80012d0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000cf2:	f000 f923 	bl	8000f3c <MX_TIM3_Init>
  MX_TIM8_Init();
 8000cf6:	f000 fa11 	bl	800111c <MX_TIM8_Init>
  MX_TIM4_Init();
 8000cfa:	f000 f997 	bl	800102c <MX_TIM4_Init>
  MX_I2C2_Init();
 8000cfe:	f000 f89d 	bl	8000e3c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000d02:	f000 fab5 	bl	8001270 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000d06:	f000 f8d9 	bl	8000ebc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t debug_buf[4];
  strcpy((char*) debug_buf, "Reset\r\n");
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <main+0x90>)
 8000d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d12:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(get_huart2(), debug_buf, strlen((char*)debug_buf), HAL_MAX_DELAY);
 8000d16:	f7ff ffd9 	bl	8000ccc <get_huart2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fa56 	bl	80001d0 <strlen>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	1d39      	adds	r1, r7, #4
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f005 fb22 	bl	8006378 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d34:	f006 f860 	bl	8006df8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <main+0x94>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	480e      	ldr	r0, [pc, #56]	; (8000d78 <main+0x98>)
 8000d3e:	f006 f8fd 	bl	8006f3c <osThreadNew>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <main+0x9c>)
 8000d46:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(tsk_motor_control, NULL, &motor_control_attributes);
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <main+0xa0>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <main+0xa4>)
 8000d4e:	f006 f8f5 	bl	8006f3c <osThreadNew>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <main+0xa8>)
 8000d56:	6013      	str	r3, [r2, #0]

  /* creation of i2c */
  i2cHandle = osThreadNew(tsk_i2c, NULL, &i2c_attributes);
 8000d58:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <main+0xac>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <main+0xb0>)
 8000d5e:	f006 f8ed 	bl	8006f3c <osThreadNew>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <main+0xb4>)
 8000d66:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d68:	f006 f86a 	bl	8006e40 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <main+0x8c>
 8000d6e:	bf00      	nop
 8000d70:	08009be8 	.word	0x08009be8
 8000d74:	08009c18 	.word	0x08009c18
 8000d78:	08001349 	.word	0x08001349
 8000d7c:	200002d8 	.word	0x200002d8
 8000d80:	08009c3c 	.word	0x08009c3c
 8000d84:	08000a0d 	.word	0x08000a0d
 8000d88:	200002dc 	.word	0x200002dc
 8000d8c:	08009c60 	.word	0x08009c60
 8000d90:	0800089d 	.word	0x0800089d
 8000d94:	200002e0 	.word	0x200002e0

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b096      	sub	sp, #88	; 0x58
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	2244      	movs	r2, #68	; 0x44
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f008 fe2c 	bl	8009a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dbe:	f002 fc9f 	bl	8003700 <HAL_PWREx_ControlVoltageScaling>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000dc8:	f000 fada 	bl	8001380 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dd8:	2360      	movs	r3, #96	; 0x60
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000de0:	2301      	movs	r3, #1
 8000de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000de8:	2324      	movs	r3, #36	; 0x24
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dec:	2307      	movs	r3, #7
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 fcd5 	bl	80037ac <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e08:	f000 faba 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2303      	movs	r3, #3
 8000e12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	2104      	movs	r1, #4
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 f89d 	bl	8003f64 <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e30:	f000 faa6 	bl	8001380 <Error_Handler>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3758      	adds	r7, #88	; 0x58
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e42:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <MX_I2C2_Init+0x78>)
 8000e44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702681;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <MX_I2C2_Init+0x7c>)
 8000e4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 70;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e4e:	2246      	movs	r2, #70	; 0x46
 8000e50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e70:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e7a:	f001 f897 	bl	8001fac <HAL_I2C_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e84:	f000 fa7c 	bl	8001380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e8c:	f002 fb92 	bl	80035b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000e96:	f000 fa73 	bl	8001380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_I2C2_Init+0x74>)
 8000e9e:	f002 fbd4 	bl	800364a <HAL_I2CEx_ConfigDigitalFilter>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000ea8:	f000 fa6a 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000c8 	.word	0x200000c8
 8000eb4:	40005800 	.word	0x40005800
 8000eb8:	00702681 	.word	0x00702681

08000ebc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <MX_I2C3_Init+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702681;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <MX_I2C3_Init+0x7c>)
 8000eca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ef6:	480e      	ldr	r0, [pc, #56]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000ef8:	f001 f858 	bl	8001fac <HAL_I2C_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f02:	f000 fa3d 	bl	8001380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000f0a:	f002 fb53 	bl	80035b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f14:	f000 fa34 	bl	8001380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_I2C3_Init+0x74>)
 8000f1c:	f002 fb95 	bl	800364a <HAL_I2CEx_ConfigDigitalFilter>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 fa2b 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000011c 	.word	0x2000011c
 8000f34:	40005c00 	.word	0x40005c00
 8000f38:	00702681 	.word	0x00702681

08000f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	; 0x38
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	615a      	str	r2, [r3, #20]
 8000f6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <MX_TIM3_Init+0xe8>)
 8000f70:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <MX_TIM3_Init+0xec>)
 8000f72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <MX_TIM3_Init+0xe8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <MX_TIM3_Init+0xe8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <MX_TIM3_Init+0xe8>)
 8000f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b26      	ldr	r3, [pc, #152]	; (8001024 <MX_TIM3_Init+0xe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <MX_TIM3_Init+0xe8>)
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f94:	4823      	ldr	r0, [pc, #140]	; (8001024 <MX_TIM3_Init+0xe8>)
 8000f96:	f003 fef7 	bl	8004d88 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000fa0:	f000 f9ee 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481c      	ldr	r0, [pc, #112]	; (8001024 <MX_TIM3_Init+0xe8>)
 8000fb2:	f004 fb4d 	bl	8005650 <HAL_TIM_ConfigClockSource>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000fbc:	f000 f9e0 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fc0:	4818      	ldr	r0, [pc, #96]	; (8001024 <MX_TIM3_Init+0xe8>)
 8000fc2:	f003 ffa9 	bl	8004f18 <HAL_TIM_PWM_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000fcc:	f000 f9d8 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_TIM3_Init+0xe8>)
 8000fe0:	f005 f858 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fea:	f000 f9c9 	bl	8001380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fee:	2360      	movs	r3, #96	; 0x60
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	2204      	movs	r2, #4
 8001002:	4619      	mov	r1, r3
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <MX_TIM3_Init+0xe8>)
 8001006:	f004 fa0f 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001010:	f000 f9b6 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <MX_TIM3_Init+0xe8>)
 8001016:	f000 fadd 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 800101a:	bf00      	nop
 800101c:	3738      	adds	r7, #56	; 0x38
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000170 	.word	0x20000170
 8001028:	40000400 	.word	0x40000400

0800102c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <MX_TIM4_Init+0xe8>)
 8001060:	4a2d      	ldr	r2, [pc, #180]	; (8001118 <MX_TIM4_Init+0xec>)
 8001062:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <MX_TIM4_Init+0xe8>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MX_TIM4_Init+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_TIM4_Init+0xe8>)
 8001072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001076:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MX_TIM4_Init+0xe8>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_TIM4_Init+0xe8>)
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001084:	4823      	ldr	r0, [pc, #140]	; (8001114 <MX_TIM4_Init+0xe8>)
 8001086:	f003 fe7f 	bl	8004d88 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001090:	f000 f976 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	4619      	mov	r1, r3
 80010a0:	481c      	ldr	r0, [pc, #112]	; (8001114 <MX_TIM4_Init+0xe8>)
 80010a2:	f004 fad5 	bl	8005650 <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80010ac:	f000 f968 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010b0:	4818      	ldr	r0, [pc, #96]	; (8001114 <MX_TIM4_Init+0xe8>)
 80010b2:	f003 ff31 	bl	8004f18 <HAL_TIM_PWM_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80010bc:	f000 f960 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <MX_TIM4_Init+0xe8>)
 80010d0:	f004 ffe0 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80010da:	f000 f951 	bl	8001380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010de:	2360      	movs	r3, #96	; 0x60
 80010e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	2208      	movs	r2, #8
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <MX_TIM4_Init+0xe8>)
 80010f6:	f004 f997 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001100:	f000 f93e 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <MX_TIM4_Init+0xe8>)
 8001106:	f000 fa65 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 800110a:	bf00      	nop
 800110c:	3738      	adds	r7, #56	; 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001bc 	.word	0x200001bc
 8001118:	40000800 	.word	0x40000800

0800111c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09a      	sub	sp, #104	; 0x68
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	222c      	movs	r2, #44	; 0x2c
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f008 fc54 	bl	8009a04 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800115c:	4b42      	ldr	r3, [pc, #264]	; (8001268 <MX_TIM8_Init+0x14c>)
 800115e:	4a43      	ldr	r2, [pc, #268]	; (800126c <MX_TIM8_Init+0x150>)
 8001160:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <MX_TIM8_Init+0x14c>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001174:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <MX_TIM8_Init+0x14c>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001188:	4837      	ldr	r0, [pc, #220]	; (8001268 <MX_TIM8_Init+0x14c>)
 800118a:	f003 fdfd 	bl	8004d88 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001194:	f000 f8f4 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800119e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011a2:	4619      	mov	r1, r3
 80011a4:	4830      	ldr	r0, [pc, #192]	; (8001268 <MX_TIM8_Init+0x14c>)
 80011a6:	f004 fa53 	bl	8005650 <HAL_TIM_ConfigClockSource>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80011b0:	f000 f8e6 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011b4:	482c      	ldr	r0, [pc, #176]	; (8001268 <MX_TIM8_Init+0x14c>)
 80011b6:	f003 feaf 	bl	8004f18 <HAL_TIM_PWM_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80011c0:	f000 f8de 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011d4:	4619      	mov	r1, r3
 80011d6:	4824      	ldr	r0, [pc, #144]	; (8001268 <MX_TIM8_Init+0x14c>)
 80011d8:	f004 ff5c 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80011e2:	f000 f8cd 	bl	8001380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	; 0x60
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001202:	220c      	movs	r2, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4818      	ldr	r0, [pc, #96]	; (8001268 <MX_TIM8_Init+0x14c>)
 8001208:	f004 f90e 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001212:	f000 f8b5 	bl	8001380 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_TIM8_Init+0x14c>)
 800124c:	f004 ffaa 	bl	80061a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001256:	f000 f893 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <MX_TIM8_Init+0x14c>)
 800125c:	f000 f9ba 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 8001260:	bf00      	nop
 8001262:	3768      	adds	r7, #104	; 0x68
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000208 	.word	0x20000208
 800126c:	40013400 	.word	0x40013400

08001270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <MX_USART2_UART_Init+0x5c>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 80012b4:	f005 f812 	bl	80062dc <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012be:	f000 f85f 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000254 	.word	0x20000254
 80012cc:	40004400 	.word	0x40004400

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_GPIO_Init+0x74>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <MX_GPIO_Init+0x74>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_GPIO_Init+0x74>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_GPIO_Init+0x74>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a14      	ldr	r2, [pc, #80]	; (8001344 <MX_GPIO_Init+0x74>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_GPIO_Init+0x74>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_GPIO_Init+0x74>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <MX_GPIO_Init+0x74>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_GPIO_Init+0x74>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_GPIO_Init+0x74>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <MX_GPIO_Init+0x74>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_GPIO_Init+0x74>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;) {
		osDelay(1000);
 8001350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001354:	f005 fe84 	bl	8007060 <osDelay>
 8001358:	e7fa      	b.n	8001350 <StartDefaultTask+0x8>
	...

0800135c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800136e:	f000 fb21 	bl	80019b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40012c00 	.word	0x40012c00

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>
	...

0800138c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_MspInit+0x4c>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_MspInit+0x4c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6613      	str	r3, [r2, #96]	; 0x60
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_MspInit+0x4c>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_MspInit+0x4c>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	210f      	movs	r1, #15
 80013c6:	f06f 0001 	mvn.w	r0, #1
 80013ca:	f000 fbcb 	bl	8001b64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0ae      	sub	sp, #184	; 0xb8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	2288      	movs	r2, #136	; 0x88
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f008 fb01 	bl	8009a04 <memset>
  if(hi2c->Instance==I2C2)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <HAL_I2C_MspInit+0x154>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d14c      	bne.n	80014a6 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001410:	2300      	movs	r3, #0
 8001412:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fff9 	bl	8004410 <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001424:	f7ff ffac 	bl	8001380 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	4b42      	ldr	r3, [pc, #264]	; (8001534 <HAL_I2C_MspInit+0x158>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	4a41      	ldr	r2, [pc, #260]	; (8001534 <HAL_I2C_MspInit+0x158>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001434:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <HAL_I2C_MspInit+0x158>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001440:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001448:	2312      	movs	r3, #18
 800144a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800145a:	2304      	movs	r3, #4
 800145c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001464:	4619      	mov	r1, r3
 8001466:	4834      	ldr	r0, [pc, #208]	; (8001538 <HAL_I2C_MspInit+0x15c>)
 8001468:	f000 fbf6 	bl	8001c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800146c:	4b31      	ldr	r3, [pc, #196]	; (8001534 <HAL_I2C_MspInit+0x158>)
 800146e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001470:	4a30      	ldr	r2, [pc, #192]	; (8001534 <HAL_I2C_MspInit+0x158>)
 8001472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001476:	6593      	str	r3, [r2, #88]	; 0x58
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <HAL_I2C_MspInit+0x158>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2105      	movs	r1, #5
 8001488:	2021      	movs	r0, #33	; 0x21
 800148a:	f000 fb6b 	bl	8001b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800148e:	2021      	movs	r0, #33	; 0x21
 8001490:	f000 fb84 	bl	8001b9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2105      	movs	r1, #5
 8001498:	2022      	movs	r0, #34	; 0x22
 800149a:	f000 fb63 	bl	8001b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800149e:	2022      	movs	r0, #34	; 0x22
 80014a0:	f000 fb7c 	bl	8001b9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014a4:	e040      	b.n	8001528 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C3)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a24      	ldr	r2, [pc, #144]	; (800153c <HAL_I2C_MspInit+0x160>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d13b      	bne.n	8001528 <HAL_I2C_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 ffa6 	bl	8004410 <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 80014ca:	f7ff ff59 	bl	8001380 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_I2C_MspInit+0x158>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <HAL_I2C_MspInit+0x158>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_I2C_MspInit+0x158>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014e6:	2303      	movs	r3, #3
 80014e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ec:	2312      	movs	r3, #18
 80014ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014fe:	2304      	movs	r3, #4
 8001500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <HAL_I2C_MspInit+0x164>)
 800150c:	f000 fba4 	bl	8001c58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_I2C_MspInit+0x158>)
 8001512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_I2C_MspInit+0x158>)
 8001516:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800151a:	6593      	str	r3, [r2, #88]	; 0x58
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_I2C_MspInit+0x158>)
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	bf00      	nop
 800152a:	37b8      	adds	r7, #184	; 0xb8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40005800 	.word	0x40005800
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400
 800153c:	40005c00 	.word	0x40005c00
 8001540:	48000800 	.word	0x48000800

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <HAL_TIM_Base_MspInit+0x80>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10c      	bne.n	8001570 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_TIM_Base_MspInit+0x84>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <HAL_TIM_Base_MspInit+0x84>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6593      	str	r3, [r2, #88]	; 0x58
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_TIM_Base_MspInit+0x84>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800156e:	e022      	b.n	80015b6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a15      	ldr	r2, [pc, #84]	; (80015cc <HAL_TIM_Base_MspInit+0x88>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10c      	bne.n	8001594 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_TIM_Base_MspInit+0x84>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_TIM_Base_MspInit+0x84>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6593      	str	r3, [r2, #88]	; 0x58
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_TIM_Base_MspInit+0x84>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
}
 8001592:	e010      	b.n	80015b6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <HAL_TIM_Base_MspInit+0x8c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d10b      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_TIM_Base_MspInit+0x84>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_TIM_Base_MspInit+0x84>)
 80015a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015a8:	6613      	str	r3, [r2, #96]	; 0x60
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <HAL_TIM_Base_MspInit+0x84>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
}
 80015b6:	bf00      	nop
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40000400 	.word	0x40000400
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40000800 	.word	0x40000800
 80015d0:	40013400 	.word	0x40013400

080015d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a34      	ldr	r2, [pc, #208]	; (80016c4 <HAL_TIM_MspPostInit+0xf0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d11d      	bne.n	8001632 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a33      	ldr	r2, [pc, #204]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800161e:	2302      	movs	r3, #2
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162c:	f000 fb14 	bl	8001c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001630:	e044      	b.n	80016bc <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a25      	ldr	r2, [pc, #148]	; (80016cc <HAL_TIM_MspPostInit+0xf8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d11d      	bne.n	8001678 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001666:	2302      	movs	r3, #2
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4817      	ldr	r0, [pc, #92]	; (80016d0 <HAL_TIM_MspPostInit+0xfc>)
 8001672:	f000 faf1 	bl	8001c58 <HAL_GPIO_Init>
}
 8001676:	e021      	b.n	80016bc <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM8)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <HAL_TIM_MspPostInit+0x100>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d11c      	bne.n	80016bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800169a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016ac:	2303      	movs	r3, #3
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <HAL_TIM_MspPostInit+0x104>)
 80016b8:	f000 face 	bl	8001c58 <HAL_GPIO_Init>
}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40000400 	.word	0x40000400
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40000800 	.word	0x40000800
 80016d0:	48000400 	.word	0x48000400
 80016d4:	40013400 	.word	0x40013400
 80016d8:	48000800 	.word	0x48000800

080016dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0ac      	sub	sp, #176	; 0xb0
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2288      	movs	r2, #136	; 0x88
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f008 f981 	bl	8009a04 <memset>
  if(huart->Instance==USART2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a21      	ldr	r2, [pc, #132]	; (800178c <HAL_UART_MspInit+0xb0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d13b      	bne.n	8001784 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001710:	2300      	movs	r3, #0
 8001712:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fe79 	bl	8004410 <HAL_RCCEx_PeriphCLKConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001724:	f7ff fe2c 	bl	8001380 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_UART_MspInit+0xb4>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	4a18      	ldr	r2, [pc, #96]	; (8001790 <HAL_UART_MspInit+0xb4>)
 800172e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001732:	6593      	str	r3, [r2, #88]	; 0x58
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_UART_MspInit+0xb4>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_UART_MspInit+0xb4>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_UART_MspInit+0xb4>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_UART_MspInit+0xb4>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001758:	230c      	movs	r3, #12
 800175a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001770:	2307      	movs	r3, #7
 8001772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f000 fa6a 	bl	8001c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	37b0      	adds	r7, #176	; 0xb0
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40004400 	.word	0x40004400
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_InitTick+0xc8>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	4a2d      	ldr	r2, [pc, #180]	; (800185c <HAL_InitTick+0xc8>)
 80017a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017ac:	6613      	str	r3, [r2, #96]	; 0x60
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_InitTick+0xc8>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017ba:	f107 020c 	add.w	r2, r7, #12
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fd91 	bl	80042ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017ca:	f002 fd79 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 80017ce:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	4a23      	ldr	r2, [pc, #140]	; (8001860 <HAL_InitTick+0xcc>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	0c9b      	lsrs	r3, r3, #18
 80017da:	3b01      	subs	r3, #1
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_InitTick+0xd0>)
 80017e0:	4a21      	ldr	r2, [pc, #132]	; (8001868 <HAL_InitTick+0xd4>)
 80017e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <HAL_InitTick+0xd0>)
 80017e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_InitTick+0xd0>)
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <HAL_InitTick+0xd0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_InitTick+0xd0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_InitTick+0xd0>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001804:	4817      	ldr	r0, [pc, #92]	; (8001864 <HAL_InitTick+0xd0>)
 8001806:	f003 fabf 	bl	8004d88 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001814:	2b00      	cmp	r3, #0
 8001816:	d11b      	bne.n	8001850 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001818:	4812      	ldr	r0, [pc, #72]	; (8001864 <HAL_InitTick+0xd0>)
 800181a:	f003 fb0d 	bl	8004e38 <HAL_TIM_Base_Start_IT>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001828:	2b00      	cmp	r3, #0
 800182a:	d111      	bne.n	8001850 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800182c:	2019      	movs	r0, #25
 800182e:	f000 f9b5 	bl	8001b9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d808      	bhi.n	800184a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	2019      	movs	r0, #25
 800183e:	f000 f991 	bl	8001b64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_InitTick+0xd8>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e002      	b.n	8001850 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001854:	4618      	mov	r0, r3
 8001856:	3730      	adds	r7, #48	; 0x30
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	431bde83 	.word	0x431bde83
 8001864:	200002e4 	.word	0x200002e4
 8001868:	40012c00 	.word	0x40012c00
 800186c:	20000004 	.word	0x20000004

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>
	...

08001878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	uint8_t buf[12];
	strcpy((char*) buf, "Hard Fault!\r\n");
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HardFault_Handler+0x34>)
 8001882:	461c      	mov	r4, r3
 8001884:	4613      	mov	r3, r2
 8001886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001888:	c407      	stmia	r4!, {r0, r1, r2}
 800188a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(get_huart2(), buf, strlen((char*)buf), HAL_MAX_DELAY);
 800188c:	f7ff fa1e 	bl	8000ccc <get_huart2>
 8001890:	4604      	mov	r4, r0
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fc9b 	bl	80001d0 <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	b29a      	uxth	r2, r3
 800189e:	1d39      	adds	r1, r7, #4
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	4620      	mov	r0, r4
 80018a6:	f004 fd67 	bl	8006378 <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x32>
 80018ac:	08009bf0 	.word	0x08009bf0

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018d6:	f003 fc87 	bl	80051e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200002e4 	.word	0x200002e4

080018e4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <I2C2_EV_IRQHandler+0x10>)
 80018ea:	f000 fd57 	bl	800239c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200000c8 	.word	0x200000c8

080018f8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <I2C2_ER_IRQHandler+0x10>)
 80018fe:	f000 fd67 	bl	80023d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200000c8 	.word	0x200000c8

0800190c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001968 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001934:	f7ff ffea 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <LoopForever+0x6>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <LoopForever+0xe>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	; (800197c <LoopForever+0x16>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f008 f81d 	bl	800999c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001962:	f7ff f9bd 	bl	8000ce0 <main>

08001966 <LoopForever>:

LoopForever:
    b LoopForever
 8001966:	e7fe      	b.n	8001966 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001968:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001974:	08009d3c 	.word	0x08009d3c
  ldr r2, =_sbss
 8001978:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800197c:	20001d04 	.word	0x20001d04

08001980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC1_2_IRQHandler>

08001982 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 f8de 	bl	8001b4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001992:	200f      	movs	r0, #15
 8001994:	f7ff fefe 	bl	8001794 <HAL_InitTick>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	e001      	b.n	80019a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019a4:	f7ff fcf2 	bl	800138c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008
 80019d8:	20000330 	.word	0x20000330

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000330 	.word	0x20000330

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ff4c 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b76:	f7ff ff61 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001b7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	6978      	ldr	r0, [r7, #20]
 8001b82:	f7ff ffb1 	bl	8001ae8 <NVIC_EncodePriority>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff80 	bl	8001a94 <__NVIC_SetPriority>
}
 8001b94:	bf00      	nop
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff54 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d005      	beq.n	8001bdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e029      	b.n	8001c30 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 020e 	bic.w	r2, r2, #14
 8001bea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f003 021c 	and.w	r2, r3, #28
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
    }
  }
  return status;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c48:	b2db      	uxtb	r3, r3
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c66:	e17f      	b.n	8001f68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8171 	beq.w	8001f62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d005      	beq.n	8001c98 <HAL_GPIO_Init+0x40>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d130      	bne.n	8001cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cce:	2201      	movs	r2, #1
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f003 0201 	and.w	r2, r3, #1
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d118      	bne.n	8001d38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	f003 0201 	and.w	r2, r3, #1
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d017      	beq.n	8001d74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d123      	bne.n	8001dc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	08da      	lsrs	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3208      	adds	r2, #8
 8001dc2:	6939      	ldr	r1, [r7, #16]
 8001dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0203 	and.w	r2, r3, #3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80ac 	beq.w	8001f62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0e:	4a5e      	ldr	r2, [pc, #376]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6613      	str	r3, [r2, #96]	; 0x60
 8001e16:	4b5c      	ldr	r3, [pc, #368]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e22:	4a5a      	ldr	r2, [pc, #360]	; (8001f8c <HAL_GPIO_Init+0x334>)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e4c:	d025      	beq.n	8001e9a <HAL_GPIO_Init+0x242>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <HAL_GPIO_Init+0x338>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d01f      	beq.n	8001e96 <HAL_GPIO_Init+0x23e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4e      	ldr	r2, [pc, #312]	; (8001f94 <HAL_GPIO_Init+0x33c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x23a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4d      	ldr	r2, [pc, #308]	; (8001f98 <HAL_GPIO_Init+0x340>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x236>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4c      	ldr	r2, [pc, #304]	; (8001f9c <HAL_GPIO_Init+0x344>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x232>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4b      	ldr	r2, [pc, #300]	; (8001fa0 <HAL_GPIO_Init+0x348>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x22e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4a      	ldr	r2, [pc, #296]	; (8001fa4 <HAL_GPIO_Init+0x34c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x22a>
 8001e7e:	2306      	movs	r3, #6
 8001e80:	e00c      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e82:	2307      	movs	r3, #7
 8001e84:	e00a      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eac:	4937      	ldr	r1, [pc, #220]	; (8001f8c <HAL_GPIO_Init+0x334>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <HAL_GPIO_Init+0x350>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ede:	4a32      	ldr	r2, [pc, #200]	; (8001fa8 <HAL_GPIO_Init+0x350>)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ee4:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_GPIO_Init+0x350>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f08:	4a27      	ldr	r2, [pc, #156]	; (8001fa8 <HAL_GPIO_Init+0x350>)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_GPIO_Init+0x350>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f32:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_GPIO_Init+0x350>)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_GPIO_Init+0x350>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f5c:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <HAL_GPIO_Init+0x350>)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f47f ae78 	bne.w	8001c68 <HAL_GPIO_Init+0x10>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	48000800 	.word	0x48000800
 8001f98:	48000c00 	.word	0x48000c00
 8001f9c:	48001000 	.word	0x48001000
 8001fa0:	48001400 	.word	0x48001400
 8001fa4:	48001800 	.word	0x48001800
 8001fa8:	40010400 	.word	0x40010400

08001fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e081      	b.n	80020c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fa02 	bl	80013dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2224      	movs	r2, #36	; 0x24
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ffc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800200c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e006      	b.n	8002034 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002032:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d104      	bne.n	8002046 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002044:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002058:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002068:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69d9      	ldr	r1, [r3, #28]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1a      	ldr	r2, [r3, #32]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020e8:	2b28      	cmp	r3, #40	; 0x28
 80020ea:	f040 808a 	bne.w	8002202 <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07e      	b.n	8002204 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002106:	f248 0101 	movw	r1, #32769	; 0x8001
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f001 f9f4 	bl	80034f8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 800211a:	2302      	movs	r3, #2
 800211c:	e072      	b.n	8002204 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b2a      	cmp	r3, #42	; 0x2a
 8002130:	d12a      	bne.n	8002188 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002132:	2102      	movs	r1, #2
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f001 f9df 	bl	80034f8 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002148:	d11e      	bne.n	8002188 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002158:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	2b00      	cmp	r3, #0
 8002160:	d012      	beq.n	8002188 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	4a29      	ldr	r2, [pc, #164]	; (800220c <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 8002168:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fd22 	bl	8001bb8 <HAL_DMA_Abort_IT>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002184:	4610      	mov	r0, r2
 8002186:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2229      	movs	r2, #41	; 0x29
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ac:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d103      	bne.n	80021ec <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2208      	movs	r2, #8
 80021ea:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80021f4:	f248 0101 	movw	r1, #32769	; 0x8001
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f001 f913 	bl	8003424 <I2C_Enable_IRQ>

    return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
  }
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	08003383 	.word	0x08003383
 8002210:	0800250f 	.word	0x0800250f

08002214 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002230:	2b28      	cmp	r3, #40	; 0x28
 8002232:	f040 808a 	bne.w	800234a <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002248:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e07e      	b.n	800234c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800224e:	f248 0102 	movw	r1, #32770	; 0x8002
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f001 f950 	bl	80034f8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8002262:	2302      	movs	r3, #2
 8002264:	e072      	b.n	800234c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b29      	cmp	r3, #41	; 0x29
 8002278:	d12a      	bne.n	80022d0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800227a:	2101      	movs	r1, #1
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f001 f93b 	bl	80034f8 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002290:	d11e      	bne.n	80022d0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022a0:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d012      	beq.n	80022d0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	4a29      	ldr	r2, [pc, #164]	; (8002354 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fc7e 	bl	8001bb8 <HAL_DMA_Abort_IT>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022cc:	4610      	mov	r0, r2
 80022ce:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	222a      	movs	r2, #42	; 0x2a
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	88fa      	ldrh	r2, [r7, #6]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a10      	ldr	r2, [pc, #64]	; (8002358 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 8002316:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	0c1b      	lsrs	r3, r3, #16
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2208      	movs	r2, #8
 8002332:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800233c:	f248 0102 	movw	r1, #32770	; 0x8002
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f001 f86f 	bl	8003424 <I2C_Enable_IRQ>

    return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
  }
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	08003383 	.word	0x08003383
 8002358:	0800250f 	.word	0x0800250f

0800235c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b20      	cmp	r3, #32
 800236e:	d10d      	bne.n	800238c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2228      	movs	r2, #40	; 0x28
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_I2C_EnableListen_IT+0x3c>)
 800237c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800237e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f001 f84e 	bl	8003424 <I2C_Enable_IRQ>

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	0800250f 	.word	0x0800250f

0800239c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	68f9      	ldr	r1, [r7, #12]
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4798      	blx	r3
  }
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d010      	beq.n	8002416 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	09db      	lsrs	r3, r3, #7
 80023f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002414:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	0a9b      	lsrs	r3, r3, #10
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d010      	beq.n	8002444 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	09db      	lsrs	r3, r3, #7
 8002426:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f043 0208 	orr.w	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002442:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	0a5b      	lsrs	r3, r3, #9
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d010      	beq.n	8002472 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	09db      	lsrs	r3, r3, #7
 8002454:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f043 0202 	orr.w	r2, r3, #2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002470:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 030b 	and.w	r3, r3, #11
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fe61 	bl	800314c <I2C_ITError>
  }
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <I2C_Slave_ISR_IT+0x24>
 800252e:	2302      	movs	r3, #2
 8002530:	e0ec      	b.n	800270c <I2C_Slave_ISR_IT+0x1fe>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002552:	6939      	ldr	r1, [r7, #16]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fc99 	bl	8002e8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d04d      	beq.n	8002602 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800256e:	2b00      	cmp	r3, #0
 8002570:	d047      	beq.n	8002602 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d128      	bne.n	80025ce <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b28      	cmp	r3, #40	; 0x28
 8002586:	d108      	bne.n	800259a <I2C_Slave_ISR_IT+0x8c>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800258e:	d104      	bne.n	800259a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002590:	6939      	ldr	r1, [r7, #16]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fd84 	bl	80030a0 <I2C_ITListenCplt>
 8002598:	e032      	b.n	8002600 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b29      	cmp	r3, #41	; 0x29
 80025a4:	d10e      	bne.n	80025c4 <I2C_Slave_ISR_IT+0xb6>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025ac:	d00a      	beq.n	80025c4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2210      	movs	r2, #16
 80025b4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 febf 	bl	800333a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fb3d 	bl	8002c3c <I2C_ITSlaveSeqCplt>
 80025c2:	e01d      	b.n	8002600 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2210      	movs	r2, #16
 80025ca:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80025cc:	e096      	b.n	80026fc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2210      	movs	r2, #16
 80025d4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f043 0204 	orr.w	r2, r3, #4
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <I2C_Slave_ISR_IT+0xe4>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ee:	f040 8085 	bne.w	80026fc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4619      	mov	r1, r3
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fda7 	bl	800314c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80025fe:	e07d      	b.n	80026fc <I2C_Slave_ISR_IT+0x1ee>
 8002600:	e07c      	b.n	80026fc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d030      	beq.n	8002670 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002616:	2b00      	cmp	r3, #0
 8002618:	d02a      	beq.n	8002670 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d018      	beq.n	8002656 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d14f      	bne.n	8002700 <I2C_Slave_ISR_IT+0x1f2>
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002666:	d04b      	beq.n	8002700 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fae7 	bl	8002c3c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800266e:	e047      	b.n	8002700 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	08db      	lsrs	r3, r3, #3
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002688:	6939      	ldr	r1, [r7, #16]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fa15 	bl	8002aba <I2C_ITAddrCplt>
 8002690:	e037      	b.n	8002702 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d031      	beq.n	8002702 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d02b      	beq.n	8002702 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d018      	beq.n	80026e6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
 80026e4:	e00d      	b.n	8002702 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ec:	d002      	beq.n	80026f4 <I2C_Slave_ISR_IT+0x1e6>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 faa1 	bl	8002c3c <I2C_ITSlaveSeqCplt>
 80026fa:	e002      	b.n	8002702 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80026fc:	bf00      	nop
 80026fe:	e000      	b.n	8002702 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002700:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <I2C_Master_ISR_DMA+0x1a>
 800272a:	2302      	movs	r3, #2
 800272c:	e0e1      	b.n	80028f2 <I2C_Master_ISR_DMA+0x1de>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d017      	beq.n	8002772 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800274a:	2b00      	cmp	r3, #0
 800274c:	d011      	beq.n	8002772 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2210      	movs	r2, #16
 8002754:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f043 0204 	orr.w	r2, r3, #4
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002762:	2120      	movs	r1, #32
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fe5d 	bl	8003424 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fde5 	bl	800333a <I2C_Flush_TXDR>
 8002770:	e0ba      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	09db      	lsrs	r3, r3, #7
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d072      	beq.n	8002864 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002786:	2b00      	cmp	r3, #0
 8002788:	d06c      	beq.n	8002864 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002798:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d04e      	beq.n	8002842 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2bff      	cmp	r3, #255	; 0xff
 80027ba:	d906      	bls.n	80027ca <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80027c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	e010      	b.n	80027ec <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027dc:	d003      	beq.n	80027e6 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	e002      	b.n	80027ec <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80027e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ea:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	8a79      	ldrh	r1, [r7, #18]
 80027f4:	2300      	movs	r3, #0
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fde0 	bl	80033c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b22      	cmp	r3, #34	; 0x22
 800281c:	d108      	bne.n	8002830 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800282e:	e05b      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002840:	e052      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002850:	d003      	beq.n	800285a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f9b5 	bl	8002bc2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002858:	e046      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800285a:	2140      	movs	r1, #64	; 0x40
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fc75 	bl	800314c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002862:	e041      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d029      	beq.n	80028c4 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	099b      	lsrs	r3, r3, #6
 8002874:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002878:	2b00      	cmp	r3, #0
 800287a:	d023      	beq.n	80028c4 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d119      	bne.n	80028ba <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002894:	d027      	beq.n	80028e6 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800289e:	d108      	bne.n	80028b2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ae:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80028b0:	e019      	b.n	80028e6 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f985 	bl	8002bc2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80028b8:	e015      	b.n	80028e6 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80028ba:	2140      	movs	r1, #64	; 0x40
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fc45 	bl	800314c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80028c2:	e010      	b.n	80028e6 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00b      	beq.n	80028e8 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fa0a 	bl	8002cf8 <I2C_ITMasterCplt>
 80028e4:	e000      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80028e6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b088      	sub	sp, #32
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <I2C_Slave_ISR_DMA+0x24>
 800291a:	2302      	movs	r3, #2
 800291c:	e0c9      	b.n	8002ab2 <I2C_Slave_ISR_DMA+0x1b8>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 faa3 	bl	8002e8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 809a 	beq.w	8002a88 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8093 	beq.w	8002a88 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0b9b      	lsrs	r3, r3, #14
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0bdb      	lsrs	r3, r3, #15
 8002972:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002976:	2b00      	cmp	r3, #0
 8002978:	d07f      	beq.n	8002a7a <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0bdb      	lsrs	r3, r3, #15
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800299a:	2301      	movs	r3, #1
 800299c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0b9b      	lsrs	r3, r3, #14
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80029be:	2301      	movs	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d128      	bne.n	8002a1a <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b28      	cmp	r3, #40	; 0x28
 80029d2:	d108      	bne.n	80029e6 <I2C_Slave_ISR_DMA+0xec>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029da:	d104      	bne.n	80029e6 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fb5e 	bl	80030a0 <I2C_ITListenCplt>
 80029e4:	e048      	b.n	8002a78 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b29      	cmp	r3, #41	; 0x29
 80029f0:	d10e      	bne.n	8002a10 <I2C_Slave_ISR_DMA+0x116>
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029f8:	d00a      	beq.n	8002a10 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2210      	movs	r2, #16
 8002a00:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fc99 	bl	800333a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f917 	bl	8002c3c <I2C_ITSlaveSeqCplt>
 8002a0e:	e033      	b.n	8002a78 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2210      	movs	r2, #16
 8002a16:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002a18:	e034      	b.n	8002a84 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2210      	movs	r2, #16
 8002a20:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f043 0204 	orr.w	r2, r3, #4
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a34:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <I2C_Slave_ISR_DMA+0x14a>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a42:	d11f      	bne.n	8002a84 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	2b21      	cmp	r3, #33	; 0x21
 8002a48:	d002      	beq.n	8002a50 <I2C_Slave_ISR_DMA+0x156>
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b29      	cmp	r3, #41	; 0x29
 8002a4e:	d103      	bne.n	8002a58 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2221      	movs	r2, #33	; 0x21
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
 8002a56:	e008      	b.n	8002a6a <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	2b22      	cmp	r3, #34	; 0x22
 8002a5c:	d002      	beq.n	8002a64 <I2C_Slave_ISR_DMA+0x16a>
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	2b2a      	cmp	r3, #42	; 0x2a
 8002a62:	d102      	bne.n	8002a6a <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2222      	movs	r2, #34	; 0x22
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	4619      	mov	r1, r3
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fb6b 	bl	800314c <I2C_ITError>
      if (treatdmanack == 1U)
 8002a76:	e005      	b.n	8002a84 <I2C_Slave_ISR_DMA+0x18a>
 8002a78:	e004      	b.n	8002a84 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2210      	movs	r2, #16
 8002a80:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a82:	e011      	b.n	8002aa8 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002a84:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a86:	e00f      	b.n	8002aa8 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	08db      	lsrs	r3, r3, #3
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	08db      	lsrs	r3, r3, #3
 8002a98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f809 	bl	8002aba <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ad0:	2b28      	cmp	r3, #40	; 0x28
 8002ad2:	d16a      	bne.n	8002baa <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	0c1b      	lsrs	r3, r3, #16
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002af2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b00:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b0e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d138      	bne.n	8002b8a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002b18:	897b      	ldrh	r3, [r7, #10]
 8002b1a:	09db      	lsrs	r3, r3, #7
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	89bb      	ldrh	r3, [r7, #12]
 8002b20:	4053      	eors	r3, r2
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f003 0306 	and.w	r3, r3, #6
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11c      	bne.n	8002b66 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002b2c:	897b      	ldrh	r3, [r7, #10]
 8002b2e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d13b      	bne.n	8002bba <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b58:	89ba      	ldrh	r2, [r7, #12]
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fd fed6 	bl	8000910 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002b64:	e029      	b.n	8002bba <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002b66:	893b      	ldrh	r3, [r7, #8]
 8002b68:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fcc2 	bl	80034f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b7c:	89ba      	ldrh	r2, [r7, #12]
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fd fec4 	bl	8000910 <HAL_I2C_AddrCallback>
}
 8002b88:	e017      	b.n	8002bba <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fcb2 	bl	80034f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b9c:	89ba      	ldrh	r2, [r7, #12]
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd feb4 	bl	8000910 <HAL_I2C_AddrCallback>
}
 8002ba8:	e007      	b.n	8002bba <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2208      	movs	r2, #8
 8002bb0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b21      	cmp	r3, #33	; 0x21
 8002bdc:	d115      	bne.n	8002c0a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2211      	movs	r2, #17
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fc7f 	bl	80034f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff fc45 	bl	8002492 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c08:	e014      	b.n	8002c34 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2212      	movs	r2, #18
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c1e:	2102      	movs	r1, #2
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fc69 	bl	80034f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fc39 	bl	80024a6 <HAL_I2C_MasterRxCpltCallback>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	0b9b      	lsrs	r3, r3, #14
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e00d      	b.n	8002c8e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	0bdb      	lsrs	r3, r3, #15
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b29      	cmp	r3, #41	; 0x29
 8002c98:	d112      	bne.n	8002cc0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2228      	movs	r2, #40	; 0x28
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2221      	movs	r2, #33	; 0x21
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ca8:	2101      	movs	r1, #1
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fc24 	bl	80034f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fd fe01 	bl	80008c0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002cbe:	e017      	b.n	8002cf0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8002cca:	d111      	bne.n	8002cf0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2228      	movs	r2, #40	; 0x28
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2222      	movs	r2, #34	; 0x22
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cda:	2102      	movs	r1, #2
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fc0b 	bl	80034f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fdf2 	bl	80008d4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b21      	cmp	r3, #33	; 0x21
 8002d18:	d107      	bne.n	8002d2a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fbeb 	bl	80034f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2211      	movs	r2, #17
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
 8002d28:	e00c      	b.n	8002d44 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b22      	cmp	r3, #34	; 0x22
 8002d34:	d106      	bne.n	8002d44 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d36:	2102      	movs	r1, #2
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fbdd 	bl	80034f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2212      	movs	r2, #18
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <I2C_ITMasterCplt+0x18c>)
 8002d50:	400b      	ands	r3, r1
 8002d52:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <I2C_ITMasterCplt+0x190>)
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2210      	movs	r2, #16
 8002d72:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f043 0204 	orr.w	r2, r3, #4
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b60      	cmp	r3, #96	; 0x60
 8002d8a:	d10b      	bne.n	8002da4 <I2C_ITMasterCplt+0xac>
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002da2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fac8 	bl	800333a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b60      	cmp	r3, #96	; 0x60
 8002dba:	d002      	beq.n	8002dc2 <I2C_ITMasterCplt+0xca>
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d006      	beq.n	8002dd0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f9bf 	bl	800314c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dce:	e054      	b.n	8002e7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b21      	cmp	r3, #33	; 0x21
 8002dda:	d124      	bne.n	8002e26 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d10b      	bne.n	8002e0e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff fb57 	bl	80024ba <HAL_I2C_MemTxCpltCallback>
}
 8002e0c:	e035      	b.n	8002e7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fb37 	bl	8002492 <HAL_I2C_MasterTxCpltCallback>
}
 8002e24:	e029      	b.n	8002e7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b22      	cmp	r3, #34	; 0x22
 8002e30:	d123      	bne.n	8002e7a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	d10b      	bne.n	8002e64 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fb36 	bl	80024ce <HAL_I2C_MemRxCpltCallback>
}
 8002e62:	e00a      	b.n	8002e7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff fb16 	bl	80024a6 <HAL_I2C_MasterRxCpltCallback>
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	fe00e800 	.word	0xfe00e800
 8002e88:	ffff0000 	.word	0xffff0000

08002e8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b21      	cmp	r3, #33	; 0x21
 8002eb6:	d002      	beq.n	8002ebe <I2C_ITSlaveCplt+0x32>
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b29      	cmp	r3, #41	; 0x29
 8002ebc:	d108      	bne.n	8002ed0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ebe:	f248 0101 	movw	r1, #32769	; 0x8001
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fb18 	bl	80034f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2221      	movs	r2, #33	; 0x21
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ece:	e00d      	b.n	8002eec <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b22      	cmp	r3, #34	; 0x22
 8002ed4:	d002      	beq.n	8002edc <I2C_ITSlaveCplt+0x50>
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eda:	d107      	bne.n	8002eec <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002edc:	f248 0102 	movw	r1, #32770	; 0x8002
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fb09 	bl	80034f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2222      	movs	r2, #34	; 0x22
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002efa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6859      	ldr	r1, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b64      	ldr	r3, [pc, #400]	; (8003098 <I2C_ITSlaveCplt+0x20c>)
 8002f08:	400b      	ands	r3, r1
 8002f0a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fa14 	bl	800333a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	0b9b      	lsrs	r3, r3, #14
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d013      	beq.n	8002f46 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f2c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d020      	beq.n	8002f78 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f44:	e018      	b.n	8002f78 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	0bdb      	lsrs	r3, r3, #15
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0304 	bic.w	r3, r3, #4
 8002f8a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00c      	beq.n	8002fc6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	f043 0204 	orr.w	r2, r3, #4
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8a7 	bl	800314c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b28      	cmp	r3, #40	; 0x28
 8003008:	d141      	bne.n	800308e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800300a:	6979      	ldr	r1, [r7, #20]
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f847 	bl	80030a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003012:	e03c      	b.n	800308e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800301c:	d014      	beq.n	8003048 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff fe0c 	bl	8002c3c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a1d      	ldr	r2, [pc, #116]	; (800309c <I2C_ITSlaveCplt+0x210>)
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fd fc93 	bl	800096c <HAL_I2C_ListenCpltCallback>
}
 8003046:	e022      	b.n	800308e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b22      	cmp	r3, #34	; 0x22
 8003052:	d10e      	bne.n	8003072 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd fc32 	bl	80008d4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003070:	e00d      	b.n	800308e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fd fc19 	bl	80008c0 <HAL_I2C_SlaveTxCpltCallback>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	fe00e800 	.word	0xfe00e800
 800309c:	ffff0000 	.word	0xffff0000

080030a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a26      	ldr	r2, [pc, #152]	; (8003148 <I2C_ITListenCplt+0xa8>)
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d022      	beq.n	800311e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d012      	beq.n	800311e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f043 0204 	orr.w	r2, r3, #4
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800311e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f9e8 	bl	80034f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2210      	movs	r2, #16
 800312e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7fd fc17 	bl	800096c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	ffff0000 	.word	0xffff0000

0800314c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a5d      	ldr	r2, [pc, #372]	; (80032e0 <I2C_ITError+0x194>)
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b28      	cmp	r3, #40	; 0x28
 8003182:	d005      	beq.n	8003190 <I2C_ITError+0x44>
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b29      	cmp	r3, #41	; 0x29
 8003188:	d002      	beq.n	8003190 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b2a      	cmp	r3, #42	; 0x2a
 800318e:	d10b      	bne.n	80031a8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003190:	2103      	movs	r1, #3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f9b0 	bl	80034f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2228      	movs	r2, #40	; 0x28
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a50      	ldr	r2, [pc, #320]	; (80032e4 <I2C_ITError+0x198>)
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
 80031a6:	e011      	b.n	80031cc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031a8:	f248 0103 	movw	r1, #32771	; 0x8003
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f9a3 	bl	80034f8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b60      	cmp	r3, #96	; 0x60
 80031bc:	d003      	beq.n	80031c6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d039      	beq.n	800324e <I2C_ITError+0x102>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b11      	cmp	r3, #17
 80031de:	d002      	beq.n	80031e6 <I2C_ITError+0x9a>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b21      	cmp	r3, #33	; 0x21
 80031e4:	d133      	bne.n	800324e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f4:	d107      	bne.n	8003206 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003204:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fd15 	bl	8001c3a <HAL_DMA_GetState>
 8003210:	4603      	mov	r3, r0
 8003212:	2b01      	cmp	r3, #1
 8003214:	d017      	beq.n	8003246 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	4a33      	ldr	r2, [pc, #204]	; (80032e8 <I2C_ITError+0x19c>)
 800321c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fcc4 	bl	8001bb8 <HAL_DMA_Abort_IT>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d04d      	beq.n	80032d2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003240:	4610      	mov	r0, r2
 8003242:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003244:	e045      	b.n	80032d2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f850 	bl	80032ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800324c:	e041      	b.n	80032d2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d039      	beq.n	80032ca <I2C_ITError+0x17e>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b12      	cmp	r3, #18
 800325a:	d002      	beq.n	8003262 <I2C_ITError+0x116>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b22      	cmp	r3, #34	; 0x22
 8003260:	d133      	bne.n	80032ca <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003270:	d107      	bne.n	8003282 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003280:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe fcd7 	bl	8001c3a <HAL_DMA_GetState>
 800328c:	4603      	mov	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d017      	beq.n	80032c2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <I2C_ITError+0x19c>)
 8003298:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fc86 	bl	8001bb8 <HAL_DMA_Abort_IT>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d011      	beq.n	80032d6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032bc:	4610      	mov	r0, r2
 80032be:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032c0:	e009      	b.n	80032d6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f812 	bl	80032ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032c8:	e005      	b.n	80032d6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f80e 	bl	80032ec <I2C_TreatErrorCallback>
  }
}
 80032d0:	e002      	b.n	80032d8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032d6:	bf00      	nop
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	ffff0000 	.word	0xffff0000
 80032e4:	0800250f 	.word	0x0800250f
 80032e8:	08003383 	.word	0x08003383

080032ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b60      	cmp	r3, #96	; 0x60
 80032fe:	d10e      	bne.n	800331e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff f8e3 	bl	80024e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800331c:	e009      	b.n	8003332 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fd fb31 	bl	8000994 <HAL_I2C_ErrorCallback>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b02      	cmp	r3, #2
 800334e:	d103      	bne.n	8003358 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2200      	movs	r2, #0
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d007      	beq.n	8003376 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	619a      	str	r2, [r3, #24]
  }
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	2200      	movs	r2, #0
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	2200      	movs	r2, #0
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff ff9b 	bl	80032ec <I2C_TreatErrorCallback>
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	817b      	strh	r3, [r7, #10]
 80033ce:	4613      	mov	r3, r2
 80033d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033d8:	7a7b      	ldrb	r3, [r7, #9]
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	0d5b      	lsrs	r3, r3, #21
 80033fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <I2C_TransferConfig+0x60>)
 8003400:	430b      	orrs	r3, r1
 8003402:	43db      	mvns	r3, r3
 8003404:	ea02 0103 	and.w	r1, r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	03ff63ff 	.word	0x03ff63ff

08003424 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	4a2d      	ldr	r2, [pc, #180]	; (80034f0 <I2C_Enable_IRQ+0xcc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003442:	4a2c      	ldr	r2, [pc, #176]	; (80034f4 <I2C_Enable_IRQ+0xd0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d11d      	bne.n	8003484 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003448:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800344c:	2b00      	cmp	r3, #0
 800344e:	da03      	bge.n	8003458 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003456:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003458:	887b      	ldrh	r3, [r7, #2]
 800345a:	2b10      	cmp	r3, #16
 800345c:	d103      	bne.n	8003466 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003464:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	2b20      	cmp	r3, #32
 800346a:	d103      	bne.n	8003474 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003472:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d12c      	bne.n	80034d4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003480:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003482:	e027      	b.n	80034d4 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003484:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003488:	2b00      	cmp	r3, #0
 800348a:	da03      	bge.n	8003494 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003492:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003494:	887b      	ldrh	r3, [r7, #2]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80034a4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80034b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d103      	bne.n	80034c6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80034c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d103      	bne.n	80034d4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f043 0320 	orr.w	r3, r3, #32
 80034d2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	08002715 	.word	0x08002715
 80034f4:	080028fb 	.word	0x080028fb

080034f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003508:	887b      	ldrh	r3, [r7, #2]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00f      	beq.n	8003532 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003518:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003526:	2b28      	cmp	r3, #40	; 0x28
 8003528:	d003      	beq.n	8003532 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003530:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00f      	beq.n	800355c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003542:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003550:	2b28      	cmp	r3, #40	; 0x28
 8003552:	d003      	beq.n	800355c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800355a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800355c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003560:	2b00      	cmp	r3, #0
 8003562:	da03      	bge.n	800356c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800356a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	2b10      	cmp	r3, #16
 8003570:	d103      	bne.n	800357a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003578:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	2b20      	cmp	r3, #32
 800357e:	d103      	bne.n	8003588 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f043 0320 	orr.w	r3, r3, #32
 8003586:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d103      	bne.n	8003596 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003594:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6819      	ldr	r1, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43da      	mvns	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	400a      	ands	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d138      	bne.n	800363c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e032      	b.n	800363e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003606:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e000      	b.n	800363e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b20      	cmp	r3, #32
 800365e:	d139      	bne.n	80036d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800366a:	2302      	movs	r3, #2
 800366c:	e033      	b.n	80036d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2224      	movs	r2, #36	; 0x24
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800369c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_PWREx_GetVoltageRange+0x18>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40007000 	.word	0x40007000

08003700 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370e:	d130      	bne.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003710:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371c:	d038      	beq.n	8003790 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003726:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003728:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800372c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2232      	movs	r2, #50	; 0x32
 8003734:	fb02 f303 	mul.w	r3, r2, r3
 8003738:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	0c9b      	lsrs	r3, r3, #18
 8003740:	3301      	adds	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003744:	e002      	b.n	800374c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3b01      	subs	r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003758:	d102      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x60>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f2      	bne.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376c:	d110      	bne.n	8003790 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e00f      	b.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377e:	d007      	beq.n	8003790 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003788:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800378e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40007000 	.word	0x40007000
 80037a4:	20000000 	.word	0x20000000
 80037a8:	431bde83 	.word	0x431bde83

080037ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e3ca      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037be:	4b97      	ldr	r3, [pc, #604]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037c8:	4b94      	ldr	r3, [pc, #592]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80e4 	beq.w	80039a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <HAL_RCC_OscConfig+0x4a>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b0c      	cmp	r3, #12
 80037ea:	f040 808b 	bne.w	8003904 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	f040 8087 	bne.w	8003904 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037f6:	4b89      	ldr	r3, [pc, #548]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_RCC_OscConfig+0x62>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e3a2      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1a      	ldr	r2, [r3, #32]
 8003812:	4b82      	ldr	r3, [pc, #520]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <HAL_RCC_OscConfig+0x7c>
 800381e:	4b7f      	ldr	r3, [pc, #508]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003826:	e005      	b.n	8003834 <HAL_RCC_OscConfig+0x88>
 8003828:	4b7c      	ldr	r3, [pc, #496]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800382a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003834:	4293      	cmp	r3, r2
 8003836:	d223      	bcs.n	8003880 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fd87 	bl	8004350 <RCC_SetFlashLatencyFromMSIRange>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e383      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800384c:	4b73      	ldr	r3, [pc, #460]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a72      	ldr	r2, [pc, #456]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003852:	f043 0308 	orr.w	r3, r3, #8
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4b70      	ldr	r3, [pc, #448]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	496d      	ldr	r1, [pc, #436]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800386a:	4b6c      	ldr	r3, [pc, #432]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	4968      	ldr	r1, [pc, #416]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
 800387e:	e025      	b.n	80038cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003880:	4b66      	ldr	r3, [pc, #408]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a65      	ldr	r2, [pc, #404]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003886:	f043 0308 	orr.w	r3, r3, #8
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b63      	ldr	r3, [pc, #396]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4960      	ldr	r1, [pc, #384]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800389e:	4b5f      	ldr	r3, [pc, #380]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	495b      	ldr	r1, [pc, #364]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fd47 	bl	8004350 <RCC_SetFlashLatencyFromMSIRange>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e343      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038cc:	f000 fc4a 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b52      	ldr	r3, [pc, #328]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	4950      	ldr	r1, [pc, #320]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	4a4e      	ldr	r2, [pc, #312]	; (8003a24 <HAL_RCC_OscConfig+0x278>)
 80038ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038ec:	4b4e      	ldr	r3, [pc, #312]	; (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fd ff4f 	bl	8001794 <HAL_InitTick>
 80038f6:	4603      	mov	r3, r0
 80038f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d052      	beq.n	80039a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	e327      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d032      	beq.n	8003972 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800390c:	4b43      	ldr	r3, [pc, #268]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a42      	ldr	r2, [pc, #264]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003918:	f7fe f860 	bl	80019dc <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003920:	f7fe f85c 	bl	80019dc <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e310      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003932:	4b3a      	ldr	r3, [pc, #232]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800393e:	4b37      	ldr	r3, [pc, #220]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a36      	ldr	r2, [pc, #216]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003944:	f043 0308 	orr.w	r3, r3, #8
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	4931      	ldr	r1, [pc, #196]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800395c:	4b2f      	ldr	r3, [pc, #188]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	492c      	ldr	r1, [pc, #176]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
 8003970:	e01a      	b.n	80039a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003972:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a29      	ldr	r2, [pc, #164]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800397e:	f7fe f82d 	bl	80019dc <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003986:	f7fe f829 	bl	80019dc <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e2dd      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003998:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f0      	bne.n	8003986 <HAL_RCC_OscConfig+0x1da>
 80039a4:	e000      	b.n	80039a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d074      	beq.n	8003a9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x21a>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d10e      	bne.n	80039de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d10b      	bne.n	80039de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d064      	beq.n	8003a9c <HAL_RCC_OscConfig+0x2f0>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d160      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e2ba      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x24a>
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 80039ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	e026      	b.n	8003a44 <HAL_RCC_OscConfig+0x298>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039fe:	d115      	bne.n	8003a2c <HAL_RCC_OscConfig+0x280>
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a02      	ldr	r2, [pc, #8]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	e014      	b.n	8003a44 <HAL_RCC_OscConfig+0x298>
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	08009c84 	.word	0x08009c84
 8003a24:	20000000 	.word	0x20000000
 8003a28:	20000004 	.word	0x20000004
 8003a2c:	4ba0      	ldr	r3, [pc, #640]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a9f      	ldr	r2, [pc, #636]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b9d      	ldr	r3, [pc, #628]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a9c      	ldr	r2, [pc, #624]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d013      	beq.n	8003a74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fd ffc6 	bl	80019dc <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd ffc2 	bl	80019dc <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e276      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a66:	4b92      	ldr	r3, [pc, #584]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x2a8>
 8003a72:	e014      	b.n	8003a9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd ffb2 	bl	80019dc <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fd ffae 	bl	80019dc <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e262      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a8e:	4b88      	ldr	r3, [pc, #544]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2d0>
 8003a9a:	e000      	b.n	8003a9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d060      	beq.n	8003b6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_OscConfig+0x310>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d119      	bne.n	8003aea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d116      	bne.n	8003aea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003abc:	4b7c      	ldr	r3, [pc, #496]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x328>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e23f      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad4:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	4973      	ldr	r1, [pc, #460]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae8:	e040      	b.n	8003b6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d023      	beq.n	8003b3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af2:	4b6f      	ldr	r3, [pc, #444]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6e      	ldr	r2, [pc, #440]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd ff6d 	bl	80019dc <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b06:	f7fd ff69 	bl	80019dc <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e21d      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b18:	4b65      	ldr	r3, [pc, #404]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b24:	4b62      	ldr	r3, [pc, #392]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	061b      	lsls	r3, r3, #24
 8003b32:	495f      	ldr	r1, [pc, #380]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	604b      	str	r3, [r1, #4]
 8003b38:	e018      	b.n	8003b6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a5c      	ldr	r2, [pc, #368]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b46:	f7fd ff49 	bl	80019dc <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b4e:	f7fd ff45 	bl	80019dc <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e1f9      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d03c      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01c      	beq.n	8003bba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b80:	4b4b      	ldr	r3, [pc, #300]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b86:	4a4a      	ldr	r2, [pc, #296]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fd ff24 	bl	80019dc <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fd ff20 	bl	80019dc <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1d4      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ef      	beq.n	8003b98 <HAL_RCC_OscConfig+0x3ec>
 8003bb8:	e01b      	b.n	8003bf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc0:	4a3b      	ldr	r2, [pc, #236]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bca:	f7fd ff07 	bl	80019dc <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd2:	f7fd ff03 	bl	80019dc <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e1b7      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be4:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1ef      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80a6 	beq.w	8003d4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c00:	2300      	movs	r3, #0
 8003c02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c04:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <HAL_RCC_OscConfig+0x508>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d118      	bne.n	8003c6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <HAL_RCC_OscConfig+0x508>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <HAL_RCC_OscConfig+0x508>)
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c44:	f7fd feca 	bl	80019dc <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4c:	f7fd fec6 	bl	80019dc <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e17a      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <HAL_RCC_OscConfig+0x508>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d108      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4d8>
 8003c72:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c82:	e029      	b.n	8003cd8 <HAL_RCC_OscConfig+0x52c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d115      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x50c>
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	4a03      	ldr	r2, [pc, #12]	; (8003cb0 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cac:	e014      	b.n	8003cd8 <HAL_RCC_OscConfig+0x52c>
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	4b9c      	ldr	r3, [pc, #624]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	4a9b      	ldr	r2, [pc, #620]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc8:	4b98      	ldr	r3, [pc, #608]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	4a97      	ldr	r2, [pc, #604]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003cd0:	f023 0304 	bic.w	r3, r3, #4
 8003cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d016      	beq.n	8003d0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fd fe7c 	bl	80019dc <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fe78 	bl	80019dc <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e12a      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfe:	4b8b      	ldr	r3, [pc, #556]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ed      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x53c>
 8003d0c:	e015      	b.n	8003d3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd fe65 	bl	80019dc <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fd fe61 	bl	80019dc <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e113      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d2c:	4b7f      	ldr	r3, [pc, #508]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ed      	bne.n	8003d16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d3a:	7ffb      	ldrb	r3, [r7, #31]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d40:	4b7a      	ldr	r3, [pc, #488]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	4a79      	ldr	r2, [pc, #484]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80fe 	beq.w	8003f52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	f040 80d0 	bne.w	8003f00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d60:	4b72      	ldr	r3, [pc, #456]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0203 	and.w	r2, r3, #3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d130      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d127      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d11f      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003da0:	2a07      	cmp	r2, #7
 8003da2:	bf14      	ite	ne
 8003da4:	2201      	movne	r2, #1
 8003da6:	2200      	moveq	r2, #0
 8003da8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d113      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d109      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d06e      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d069      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ddc:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003de8:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0ad      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003df8:	4b4c      	ldr	r3, [pc, #304]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a4b      	ldr	r2, [pc, #300]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e04:	f7fd fdea 	bl	80019dc <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fd fde6 	bl	80019dc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e09a      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1e:	4b43      	ldr	r3, [pc, #268]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2a:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	4b40      	ldr	r3, [pc, #256]	; (8003f30 <HAL_RCC_OscConfig+0x784>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	0112      	lsls	r2, r2, #4
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e44:	0212      	lsls	r2, r2, #8
 8003e46:	4311      	orrs	r1, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e4c:	0852      	lsrs	r2, r2, #1
 8003e4e:	3a01      	subs	r2, #1
 8003e50:	0552      	lsls	r2, r2, #21
 8003e52:	4311      	orrs	r1, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e58:	0852      	lsrs	r2, r2, #1
 8003e5a:	3a01      	subs	r2, #1
 8003e5c:	0652      	lsls	r2, r2, #25
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e64:	0912      	lsrs	r2, r2, #4
 8003e66:	0452      	lsls	r2, r2, #17
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	4930      	ldr	r1, [pc, #192]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e70:	4b2e      	ldr	r3, [pc, #184]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2d      	ldr	r2, [pc, #180]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e88:	f7fd fda8 	bl	80019dc <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd fda4 	bl	80019dc <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e058      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea2:	4b22      	ldr	r3, [pc, #136]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eae:	e050      	b.n	8003f52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e04f      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d148      	bne.n	8003f52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ecc:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ed8:	f7fd fd80 	bl	80019dc <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fd fd7c 	bl	80019dc <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e030      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x734>
 8003efe:	e028      	b.n	8003f52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d023      	beq.n	8003f4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_RCC_OscConfig+0x780>)
 8003f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fd fd63 	bl	80019dc <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f18:	e00c      	b.n	8003f34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7fd fd5f 	bl	80019dc <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d905      	bls.n	8003f34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e013      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f34:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCC_OscConfig+0x7b0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ec      	bne.n	8003f1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f40:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_RCC_OscConfig+0x7b0>)
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	4905      	ldr	r1, [pc, #20]	; (8003f5c <HAL_RCC_OscConfig+0x7b0>)
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_RCC_OscConfig+0x7b4>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60cb      	str	r3, [r1, #12]
 8003f4c:	e001      	b.n	8003f52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	feeefffc 	.word	0xfeeefffc

08003f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0e7      	b.n	8004148 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f78:	4b75      	ldr	r3, [pc, #468]	; (8004150 <HAL_RCC_ClockConfig+0x1ec>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d910      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b72      	ldr	r3, [pc, #456]	; (8004150 <HAL_RCC_ClockConfig+0x1ec>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 0207 	bic.w	r2, r3, #7
 8003f8e:	4970      	ldr	r1, [pc, #448]	; (8004150 <HAL_RCC_ClockConfig+0x1ec>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b6e      	ldr	r3, [pc, #440]	; (8004150 <HAL_RCC_ClockConfig+0x1ec>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0cf      	b.n	8004148 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d010      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	4b66      	ldr	r3, [pc, #408]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d908      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc4:	4b63      	ldr	r3, [pc, #396]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4960      	ldr	r1, [pc, #384]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d04c      	beq.n	800407c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fea:	4b5a      	ldr	r3, [pc, #360]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d121      	bne.n	800403a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e0a6      	b.n	8004148 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d107      	bne.n	8004012 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004002:	4b54      	ldr	r3, [pc, #336]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d115      	bne.n	800403a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e09a      	b.n	8004148 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800401a:	4b4e      	ldr	r3, [pc, #312]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e08e      	b.n	8004148 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800402a:	4b4a      	ldr	r3, [pc, #296]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e086      	b.n	8004148 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800403a:	4b46      	ldr	r3, [pc, #280]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f023 0203 	bic.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4943      	ldr	r1, [pc, #268]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	4313      	orrs	r3, r2
 800404a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404c:	f7fd fcc6 	bl	80019dc <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	e00a      	b.n	800406a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004054:	f7fd fcc2 	bl	80019dc <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e06e      	b.n	8004148 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	4b3a      	ldr	r3, [pc, #232]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 020c 	and.w	r2, r3, #12
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	429a      	cmp	r2, r3
 800407a:	d1eb      	bne.n	8004054 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004094:	429a      	cmp	r2, r3
 8004096:	d208      	bcs.n	80040aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004098:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	492b      	ldr	r1, [pc, #172]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040aa:	4b29      	ldr	r3, [pc, #164]	; (8004150 <HAL_RCC_ClockConfig+0x1ec>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d210      	bcs.n	80040da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b8:	4b25      	ldr	r3, [pc, #148]	; (8004150 <HAL_RCC_ClockConfig+0x1ec>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f023 0207 	bic.w	r2, r3, #7
 80040c0:	4923      	ldr	r1, [pc, #140]	; (8004150 <HAL_RCC_ClockConfig+0x1ec>)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c8:	4b21      	ldr	r3, [pc, #132]	; (8004150 <HAL_RCC_ClockConfig+0x1ec>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d001      	beq.n	80040da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e036      	b.n	8004148 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	4918      	ldr	r1, [pc, #96]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d009      	beq.n	8004118 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004104:	4b13      	ldr	r3, [pc, #76]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4910      	ldr	r1, [pc, #64]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	4313      	orrs	r3, r2
 8004116:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004118:	f000 f824 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <HAL_RCC_ClockConfig+0x1f0>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	490b      	ldr	r1, [pc, #44]	; (8004158 <HAL_RCC_ClockConfig+0x1f4>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
 8004134:	4a09      	ldr	r2, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1f8>)
 8004136:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_ClockConfig+0x1fc>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f7fd fb29 	bl	8001794 <HAL_InitTick>
 8004142:	4603      	mov	r3, r0
 8004144:	72fb      	strb	r3, [r7, #11]

  return status;
 8004146:	7afb      	ldrb	r3, [r7, #11]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40022000 	.word	0x40022000
 8004154:	40021000 	.word	0x40021000
 8004158:	08009c84 	.word	0x08009c84
 800415c:	20000000 	.word	0x20000000
 8004160:	20000004 	.word	0x20000004

08004164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004172:	4b3e      	ldr	r3, [pc, #248]	; (800426c <HAL_RCC_GetSysClockFreq+0x108>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800417c:	4b3b      	ldr	r3, [pc, #236]	; (800426c <HAL_RCC_GetSysClockFreq+0x108>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x34>
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b0c      	cmp	r3, #12
 8004190:	d121      	bne.n	80041d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d11e      	bne.n	80041d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004198:	4b34      	ldr	r3, [pc, #208]	; (800426c <HAL_RCC_GetSysClockFreq+0x108>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041a4:	4b31      	ldr	r3, [pc, #196]	; (800426c <HAL_RCC_GetSysClockFreq+0x108>)
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e005      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041b4:	4b2d      	ldr	r3, [pc, #180]	; (800426c <HAL_RCC_GetSysClockFreq+0x108>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041c0:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10d      	bne.n	80041ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041d4:	e00a      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d102      	bne.n	80041e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <HAL_RCC_GetSysClockFreq+0x110>)
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e004      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041e8:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_RCC_GetSysClockFreq+0x114>)
 80041ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	d134      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041f2:	4b1e      	ldr	r3, [pc, #120]	; (800426c <HAL_RCC_GetSysClockFreq+0x108>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d003      	beq.n	800420a <HAL_RCC_GetSysClockFreq+0xa6>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d003      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0xac>
 8004208:	e005      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800420a:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_RCC_GetSysClockFreq+0x110>)
 800420c:	617b      	str	r3, [r7, #20]
      break;
 800420e:	e005      	b.n	800421c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004210:	4b19      	ldr	r3, [pc, #100]	; (8004278 <HAL_RCC_GetSysClockFreq+0x114>)
 8004212:	617b      	str	r3, [r7, #20]
      break;
 8004214:	e002      	b.n	800421c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	617b      	str	r3, [r7, #20]
      break;
 800421a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800421c:	4b13      	ldr	r3, [pc, #76]	; (800426c <HAL_RCC_GetSysClockFreq+0x108>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	3301      	adds	r3, #1
 8004228:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800422a:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_RCC_GetSysClockFreq+0x108>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	fb03 f202 	mul.w	r2, r3, r2
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <HAL_RCC_GetSysClockFreq+0x108>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	0e5b      	lsrs	r3, r3, #25
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	3301      	adds	r3, #1
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800425c:	69bb      	ldr	r3, [r7, #24]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3724      	adds	r7, #36	; 0x24
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	08009c9c 	.word	0x08009c9c
 8004274:	00f42400 	.word	0x00f42400
 8004278:	007a1200 	.word	0x007a1200

0800427c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <HAL_RCC_GetHCLKFreq+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000000 	.word	0x20000000

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004298:	f7ff fff0 	bl	800427c <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4904      	ldr	r1, [pc, #16]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000
 80042bc:	08009c94 	.word	0x08009c94

080042c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042c4:	f7ff ffda 	bl	800427c <HAL_RCC_GetHCLKFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0adb      	lsrs	r3, r3, #11
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4904      	ldr	r1, [pc, #16]	; (80042e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000
 80042e8:	08009c94 	.word	0x08009c94

080042ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	220f      	movs	r2, #15
 80042fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80042fc:	4b12      	ldr	r3, [pc, #72]	; (8004348 <HAL_RCC_GetClockConfig+0x5c>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0203 	and.w	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004308:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <HAL_RCC_GetClockConfig+0x5c>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004314:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <HAL_RCC_GetClockConfig+0x5c>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <HAL_RCC_GetClockConfig+0x5c>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	08db      	lsrs	r3, r3, #3
 8004326:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <HAL_RCC_GetClockConfig+0x60>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0207 	and.w	r2, r3, #7
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	601a      	str	r2, [r3, #0]
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	40022000 	.word	0x40022000

08004350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004368:	f7ff f9bc 	bl	80036e4 <HAL_PWREx_GetVoltageRange>
 800436c:	6178      	str	r0, [r7, #20]
 800436e:	e014      	b.n	800439a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004370:	4b25      	ldr	r3, [pc, #148]	; (8004408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	4a24      	ldr	r2, [pc, #144]	; (8004408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437a:	6593      	str	r3, [r2, #88]	; 0x58
 800437c:	4b22      	ldr	r3, [pc, #136]	; (8004408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004388:	f7ff f9ac 	bl	80036e4 <HAL_PWREx_GetVoltageRange>
 800438c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800438e:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004398:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a0:	d10b      	bne.n	80043ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b80      	cmp	r3, #128	; 0x80
 80043a6:	d919      	bls.n	80043dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2ba0      	cmp	r3, #160	; 0xa0
 80043ac:	d902      	bls.n	80043b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043ae:	2302      	movs	r3, #2
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	e013      	b.n	80043dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043b4:	2301      	movs	r3, #1
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	e010      	b.n	80043dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b80      	cmp	r3, #128	; 0x80
 80043be:	d902      	bls.n	80043c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043c0:	2303      	movs	r3, #3
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	e00a      	b.n	80043dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b80      	cmp	r3, #128	; 0x80
 80043ca:	d102      	bne.n	80043d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043cc:	2302      	movs	r3, #2
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	e004      	b.n	80043dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b70      	cmp	r3, #112	; 0x70
 80043d6:	d101      	bne.n	80043dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043d8:	2301      	movs	r3, #1
 80043da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 0207 	bic.w	r2, r3, #7
 80043e4:	4909      	ldr	r1, [pc, #36]	; (800440c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043ec:	4b07      	ldr	r3, [pc, #28]	; (800440c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d001      	beq.n	80043fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	40022000 	.word	0x40022000

08004410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004418:	2300      	movs	r3, #0
 800441a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800441c:	2300      	movs	r3, #0
 800441e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004428:	2b00      	cmp	r3, #0
 800442a:	d041      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004434:	d02a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004436:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800443a:	d824      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800443c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004440:	d008      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004446:	d81e      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800444c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004450:	d010      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004452:	e018      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004454:	4b86      	ldr	r3, [pc, #536]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4a85      	ldr	r2, [pc, #532]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004460:	e015      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fabb 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 800446e:	4603      	mov	r3, r0
 8004470:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004472:	e00c      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3320      	adds	r3, #32
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fba6 	bl	8004bcc <RCCEx_PLLSAI2_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004484:	e003      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	74fb      	strb	r3, [r7, #19]
      break;
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800448c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10b      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004494:	4b76      	ldr	r3, [pc, #472]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a2:	4973      	ldr	r1, [pc, #460]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044aa:	e001      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d041      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044c4:	d02a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044ca:	d824      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044d0:	d008      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044d6:	d81e      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044e0:	d010      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044e2:	e018      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044e4:	4b62      	ldr	r3, [pc, #392]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4a61      	ldr	r2, [pc, #388]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044f0:	e015      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3304      	adds	r3, #4
 80044f6:	2100      	movs	r1, #0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fa73 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004502:	e00c      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3320      	adds	r3, #32
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fb5e 	bl	8004bcc <RCCEx_PLLSAI2_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	74fb      	strb	r3, [r7, #19]
      break;
 800451a:	e000      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800451c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800451e:	7cfb      	ldrb	r3, [r7, #19]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004524:	4b52      	ldr	r3, [pc, #328]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004532:	494f      	ldr	r1, [pc, #316]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800453a:	e001      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453c:	7cfb      	ldrb	r3, [r7, #19]
 800453e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80a0 	beq.w	800468e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004552:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00d      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004568:	4b41      	ldr	r3, [pc, #260]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	4a40      	ldr	r2, [pc, #256]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004572:	6593      	str	r3, [r2, #88]	; 0x58
 8004574:	4b3e      	ldr	r3, [pc, #248]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004580:	2301      	movs	r3, #1
 8004582:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004584:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a3a      	ldr	r2, [pc, #232]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800458a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004590:	f7fd fa24 	bl	80019dc <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004596:	e009      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004598:	f7fd fa20 	bl	80019dc <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d902      	bls.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	74fb      	strb	r3, [r7, #19]
        break;
 80045aa:	e005      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045ac:	4b31      	ldr	r3, [pc, #196]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0ef      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d15c      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045be:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01f      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d019      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045dc:	4b24      	ldr	r3, [pc, #144]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045e8:	4b21      	ldr	r3, [pc, #132]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	4a20      	ldr	r2, [pc, #128]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045f8:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004608:	4a19      	ldr	r2, [pc, #100]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d016      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fd f9df 	bl	80019dc <HAL_GetTick>
 800461e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004620:	e00b      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004622:	f7fd f9db 	bl	80019dc <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004630:	4293      	cmp	r3, r2
 8004632:	d902      	bls.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	74fb      	strb	r3, [r7, #19]
            break;
 8004638:	e006      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0ec      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10c      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465e:	4904      	ldr	r1, [pc, #16]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004666:	e009      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	74bb      	strb	r3, [r7, #18]
 800466c:	e006      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800467c:	7c7b      	ldrb	r3, [r7, #17]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d105      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004682:	4b9e      	ldr	r3, [pc, #632]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	4a9d      	ldr	r2, [pc, #628]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800469a:	4b98      	ldr	r3, [pc, #608]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f023 0203 	bic.w	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	4994      	ldr	r1, [pc, #592]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046bc:	4b8f      	ldr	r3, [pc, #572]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f023 020c 	bic.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	498c      	ldr	r1, [pc, #560]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046de:	4b87      	ldr	r3, [pc, #540]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	4983      	ldr	r1, [pc, #524]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004700:	4b7e      	ldr	r3, [pc, #504]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	497b      	ldr	r1, [pc, #492]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004722:	4b76      	ldr	r3, [pc, #472]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004730:	4972      	ldr	r1, [pc, #456]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004744:	4b6d      	ldr	r3, [pc, #436]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004752:	496a      	ldr	r1, [pc, #424]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004766:	4b65      	ldr	r3, [pc, #404]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004774:	4961      	ldr	r1, [pc, #388]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004788:	4b5c      	ldr	r3, [pc, #368]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004796:	4959      	ldr	r1, [pc, #356]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047aa:	4b54      	ldr	r3, [pc, #336]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b8:	4950      	ldr	r1, [pc, #320]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047cc:	4b4b      	ldr	r3, [pc, #300]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	4948      	ldr	r1, [pc, #288]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ee:	4b43      	ldr	r3, [pc, #268]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fc:	493f      	ldr	r1, [pc, #252]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d028      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004810:	4b3a      	ldr	r3, [pc, #232]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481e:	4937      	ldr	r1, [pc, #220]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800482a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800482e:	d106      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004830:	4b32      	ldr	r3, [pc, #200]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4a31      	ldr	r2, [pc, #196]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800483a:	60d3      	str	r3, [r2, #12]
 800483c:	e011      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004846:	d10c      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	2101      	movs	r1, #1
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f8c8 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004858:	7cfb      	ldrb	r3, [r7, #19]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d028      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800486e:	4b23      	ldr	r3, [pc, #140]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	491f      	ldr	r1, [pc, #124]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800488c:	d106      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004898:	60d3      	str	r3, [r2, #12]
 800489a:	e011      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 f899 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048b6:	7cfb      	ldrb	r3, [r7, #19]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d02b      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048da:	4908      	ldr	r1, [pc, #32]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ea:	d109      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4a02      	ldr	r2, [pc, #8]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048f6:	60d3      	str	r3, [r2, #12]
 80048f8:	e014      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004908:	d10c      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3304      	adds	r3, #4
 800490e:	2101      	movs	r1, #1
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f867 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800491a:	7cfb      	ldrb	r3, [r7, #19]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d02f      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004930:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800493e:	4928      	ldr	r1, [pc, #160]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800494a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800494e:	d10d      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	2102      	movs	r1, #2
 8004956:	4618      	mov	r0, r3
 8004958:	f000 f844 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004960:	7cfb      	ldrb	r3, [r7, #19]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d014      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	74bb      	strb	r3, [r7, #18]
 800496a:	e011      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004974:	d10c      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3320      	adds	r3, #32
 800497a:	2102      	movs	r1, #2
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f925 	bl	8004bcc <RCCEx_PLLSAI2_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800499c:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049aa:	490d      	ldr	r1, [pc, #52]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049be:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ce:	4904      	ldr	r1, [pc, #16]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000

080049e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049f2:	4b75      	ldr	r3, [pc, #468]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049fe:	4b72      	ldr	r3, [pc, #456]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0203 	and.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d10d      	bne.n	8004a2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
       ||
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a16:	4b6c      	ldr	r3, [pc, #432]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
       ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d047      	beq.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
 8004a2e:	e044      	b.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d018      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0x86>
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d825      	bhi.n	8004a88 <RCCEx_PLLSAI1_Config+0xa4>
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d002      	beq.n	8004a46 <RCCEx_PLLSAI1_Config+0x62>
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d009      	beq.n	8004a58 <RCCEx_PLLSAI1_Config+0x74>
 8004a44:	e020      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a46:	4b60      	ldr	r3, [pc, #384]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11d      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a56:	e01a      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a58:	4b5b      	ldr	r3, [pc, #364]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d116      	bne.n	8004a92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a68:	e013      	b.n	8004a92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a6a:	4b57      	ldr	r3, [pc, #348]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a76:	4b54      	ldr	r3, [pc, #336]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a86:	e006      	b.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8c:	e004      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e002      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10d      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	4944      	ldr	r1, [pc, #272]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d17d      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ac0:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a40      	ldr	r2, [pc, #256]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004acc:	f7fc ff86 	bl	80019dc <HAL_GetTick>
 8004ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ad2:	e009      	b.n	8004ae8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ad4:	f7fc ff82 	bl	80019dc <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d902      	bls.n	8004ae8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ae6:	e005      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae8:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ef      	bne.n	8004ad4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d160      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d111      	bne.n	8004b24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b00:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6892      	ldr	r2, [r2, #8]
 8004b10:	0211      	lsls	r1, r2, #8
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68d2      	ldr	r2, [r2, #12]
 8004b16:	0912      	lsrs	r2, r2, #4
 8004b18:	0452      	lsls	r2, r2, #17
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	492a      	ldr	r1, [pc, #168]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	610b      	str	r3, [r1, #16]
 8004b22:	e027      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d112      	bne.n	8004b50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b2a:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6892      	ldr	r2, [r2, #8]
 8004b3a:	0211      	lsls	r1, r2, #8
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6912      	ldr	r2, [r2, #16]
 8004b40:	0852      	lsrs	r2, r2, #1
 8004b42:	3a01      	subs	r2, #1
 8004b44:	0552      	lsls	r2, r2, #21
 8004b46:	430a      	orrs	r2, r1
 8004b48:	491f      	ldr	r1, [pc, #124]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]
 8004b4e:	e011      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6892      	ldr	r2, [r2, #8]
 8004b60:	0211      	lsls	r1, r2, #8
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6952      	ldr	r2, [r2, #20]
 8004b66:	0852      	lsrs	r2, r2, #1
 8004b68:	3a01      	subs	r2, #1
 8004b6a:	0652      	lsls	r2, r2, #25
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	4916      	ldr	r1, [pc, #88]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b74:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fc ff2c 	bl	80019dc <HAL_GetTick>
 8004b84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b86:	e009      	b.n	8004b9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b88:	f7fc ff28 	bl	80019dc <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d902      	bls.n	8004b9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	73fb      	strb	r3, [r7, #15]
          break;
 8004b9a:	e005      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ef      	beq.n	8004b88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	4904      	ldr	r1, [pc, #16]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000

08004bcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bda:	4b6a      	ldr	r3, [pc, #424]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004be6:	4b67      	ldr	r3, [pc, #412]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0203 	and.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d10d      	bne.n	8004c12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bfe:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d047      	beq.n	8004ca2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	e044      	b.n	8004ca2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d018      	beq.n	8004c52 <RCCEx_PLLSAI2_Config+0x86>
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d825      	bhi.n	8004c70 <RCCEx_PLLSAI2_Config+0xa4>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d002      	beq.n	8004c2e <RCCEx_PLLSAI2_Config+0x62>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d009      	beq.n	8004c40 <RCCEx_PLLSAI2_Config+0x74>
 8004c2c:	e020      	b.n	8004c70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c2e:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11d      	bne.n	8004c76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3e:	e01a      	b.n	8004c76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c40:	4b50      	ldr	r3, [pc, #320]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d116      	bne.n	8004c7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e013      	b.n	8004c7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c52:	4b4c      	ldr	r3, [pc, #304]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c5e:	4b49      	ldr	r3, [pc, #292]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c6e:	e006      	b.n	8004c7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      break;
 8004c74:	e004      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c76:	bf00      	nop
 8004c78:	e002      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e000      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c86:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	4939      	ldr	r1, [pc, #228]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d167      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ca8:	4b36      	ldr	r3, [pc, #216]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a35      	ldr	r2, [pc, #212]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb4:	f7fc fe92 	bl	80019dc <HAL_GetTick>
 8004cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cba:	e009      	b.n	8004cd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cbc:	f7fc fe8e 	bl	80019dc <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d902      	bls.n	8004cd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cce:	e005      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cd0:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ef      	bne.n	8004cbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d14a      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d111      	bne.n	8004d0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ce8:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6892      	ldr	r2, [r2, #8]
 8004cf8:	0211      	lsls	r1, r2, #8
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68d2      	ldr	r2, [r2, #12]
 8004cfe:	0912      	lsrs	r2, r2, #4
 8004d00:	0452      	lsls	r2, r2, #17
 8004d02:	430a      	orrs	r2, r1
 8004d04:	491f      	ldr	r1, [pc, #124]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	614b      	str	r3, [r1, #20]
 8004d0a:	e011      	b.n	8004d30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d0c:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	0211      	lsls	r1, r2, #8
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6912      	ldr	r2, [r2, #16]
 8004d22:	0852      	lsrs	r2, r2, #1
 8004d24:	3a01      	subs	r2, #1
 8004d26:	0652      	lsls	r2, r2, #25
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	4916      	ldr	r1, [pc, #88]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d30:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fc fe4e 	bl	80019dc <HAL_GetTick>
 8004d40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d42:	e009      	b.n	8004d58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d44:	f7fc fe4a 	bl	80019dc <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d902      	bls.n	8004d58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	73fb      	strb	r3, [r7, #15]
          break;
 8004d56:	e005      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ef      	beq.n	8004d44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4904      	ldr	r1, [pc, #16]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000

08004d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e049      	b.n	8004e2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc fbc8 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fd34 	bl	8005834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d001      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e04f      	b.n	8004ef0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a23      	ldr	r2, [pc, #140]	; (8004efc <HAL_TIM_Base_Start_IT+0xc4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01d      	beq.n	8004eae <HAL_TIM_Base_Start_IT+0x76>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7a:	d018      	beq.n	8004eae <HAL_TIM_Base_Start_IT+0x76>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1f      	ldr	r2, [pc, #124]	; (8004f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <HAL_TIM_Base_Start_IT+0x76>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_TIM_Base_Start_IT+0x76>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_TIM_Base_Start_IT+0x76>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_TIM_Base_Start_IT+0x76>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a19      	ldr	r2, [pc, #100]	; (8004f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d115      	bne.n	8004eda <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	4b17      	ldr	r3, [pc, #92]	; (8004f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d015      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0xb4>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec6:	d011      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed8:	e008      	b.n	8004eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e000      	b.n	8004eee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40013400 	.word	0x40013400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	00010007 	.word	0x00010007

08004f18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e049      	b.n	8004fbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f841 	bl	8004fc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f000 fc6c 	bl	8005834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d109      	bne.n	8005000 <HAL_TIM_PWM_Start+0x24>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	e03c      	b.n	800507a <HAL_TIM_PWM_Start+0x9e>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b04      	cmp	r3, #4
 8005004:	d109      	bne.n	800501a <HAL_TIM_PWM_Start+0x3e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b01      	cmp	r3, #1
 8005010:	bf14      	ite	ne
 8005012:	2301      	movne	r3, #1
 8005014:	2300      	moveq	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	e02f      	b.n	800507a <HAL_TIM_PWM_Start+0x9e>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d109      	bne.n	8005034 <HAL_TIM_PWM_Start+0x58>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	bf14      	ite	ne
 800502c:	2301      	movne	r3, #1
 800502e:	2300      	moveq	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	e022      	b.n	800507a <HAL_TIM_PWM_Start+0x9e>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b0c      	cmp	r3, #12
 8005038:	d109      	bne.n	800504e <HAL_TIM_PWM_Start+0x72>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	e015      	b.n	800507a <HAL_TIM_PWM_Start+0x9e>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b10      	cmp	r3, #16
 8005052:	d109      	bne.n	8005068 <HAL_TIM_PWM_Start+0x8c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e008      	b.n	800507a <HAL_TIM_PWM_Start+0x9e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e09c      	b.n	80051bc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0xb6>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	e023      	b.n	80050da <HAL_TIM_PWM_Start+0xfe>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_PWM_Start+0xc6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a0:	e01b      	b.n	80050da <HAL_TIM_PWM_Start+0xfe>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_PWM_Start+0xd6>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b0:	e013      	b.n	80050da <HAL_TIM_PWM_Start+0xfe>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_PWM_Start+0xe6>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c0:	e00b      	b.n	80050da <HAL_TIM_PWM_Start+0xfe>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_PWM_Start+0xf6>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d0:	e003      	b.n	80050da <HAL_TIM_PWM_Start+0xfe>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 ffb0 	bl	8006048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a35      	ldr	r2, [pc, #212]	; (80051c4 <HAL_TIM_PWM_Start+0x1e8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_TIM_PWM_Start+0x13e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a34      	ldr	r2, [pc, #208]	; (80051c8 <HAL_TIM_PWM_Start+0x1ec>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_TIM_PWM_Start+0x13e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a32      	ldr	r2, [pc, #200]	; (80051cc <HAL_TIM_PWM_Start+0x1f0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_TIM_PWM_Start+0x13e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a31      	ldr	r2, [pc, #196]	; (80051d0 <HAL_TIM_PWM_Start+0x1f4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_TIM_PWM_Start+0x13e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2f      	ldr	r2, [pc, #188]	; (80051d4 <HAL_TIM_PWM_Start+0x1f8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d101      	bne.n	800511e <HAL_TIM_PWM_Start+0x142>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <HAL_TIM_PWM_Start+0x144>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005132:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <HAL_TIM_PWM_Start+0x1e8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01d      	beq.n	800517a <HAL_TIM_PWM_Start+0x19e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005146:	d018      	beq.n	800517a <HAL_TIM_PWM_Start+0x19e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a22      	ldr	r2, [pc, #136]	; (80051d8 <HAL_TIM_PWM_Start+0x1fc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <HAL_TIM_PWM_Start+0x19e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a21      	ldr	r2, [pc, #132]	; (80051dc <HAL_TIM_PWM_Start+0x200>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_TIM_PWM_Start+0x19e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <HAL_TIM_PWM_Start+0x204>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d009      	beq.n	800517a <HAL_TIM_PWM_Start+0x19e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <HAL_TIM_PWM_Start+0x1ec>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_TIM_PWM_Start+0x19e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a15      	ldr	r2, [pc, #84]	; (80051cc <HAL_TIM_PWM_Start+0x1f0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d115      	bne.n	80051a6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <HAL_TIM_PWM_Start+0x208>)
 8005182:	4013      	ands	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b06      	cmp	r3, #6
 800518a:	d015      	beq.n	80051b8 <HAL_TIM_PWM_Start+0x1dc>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005192:	d011      	beq.n	80051b8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	e008      	b.n	80051b8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e000      	b.n	80051ba <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40013400 	.word	0x40013400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800
 80051d8:	40000400 	.word	0x40000400
 80051dc:	40000800 	.word	0x40000800
 80051e0:	40000c00 	.word	0x40000c00
 80051e4:	00010007 	.word	0x00010007

080051e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d122      	bne.n	8005244 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b02      	cmp	r3, #2
 800520a:	d11b      	bne.n	8005244 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0202 	mvn.w	r2, #2
 8005214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fae3 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fad5 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fae6 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b04      	cmp	r3, #4
 8005250:	d122      	bne.n	8005298 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b04      	cmp	r3, #4
 800525e:	d11b      	bne.n	8005298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0204 	mvn.w	r2, #4
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fab9 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 faab 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fabc 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d122      	bne.n	80052ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d11b      	bne.n	80052ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0208 	mvn.w	r2, #8
 80052bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2204      	movs	r2, #4
 80052c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa8f 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fa81 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fa92 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d122      	bne.n	8005340 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b10      	cmp	r3, #16
 8005306:	d11b      	bne.n	8005340 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0210 	mvn.w	r2, #16
 8005310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2208      	movs	r2, #8
 8005316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa65 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa57 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fa68 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10e      	bne.n	800536c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b01      	cmp	r3, #1
 800535a:	d107      	bne.n	800536c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0201 	mvn.w	r2, #1
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fb fff8 	bl	800135c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b80      	cmp	r3, #128	; 0x80
 8005378:	d10e      	bne.n	8005398 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005384:	2b80      	cmp	r3, #128	; 0x80
 8005386:	d107      	bne.n	8005398 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 ff8e 	bl	80062b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a6:	d10e      	bne.n	80053c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b80      	cmp	r3, #128	; 0x80
 80053b4:	d107      	bne.n	80053c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 ff81 	bl	80062c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d10e      	bne.n	80053f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d107      	bne.n	80053f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fa16 	bl	800581e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d10e      	bne.n	800541e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b20      	cmp	r3, #32
 800540c:	d107      	bne.n	800541e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f06f 0220 	mvn.w	r2, #32
 8005416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 ff41 	bl	80062a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005442:	2302      	movs	r3, #2
 8005444:	e0ff      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b14      	cmp	r3, #20
 8005452:	f200 80f0 	bhi.w	8005636 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	080054b1 	.word	0x080054b1
 8005460:	08005637 	.word	0x08005637
 8005464:	08005637 	.word	0x08005637
 8005468:	08005637 	.word	0x08005637
 800546c:	080054f1 	.word	0x080054f1
 8005470:	08005637 	.word	0x08005637
 8005474:	08005637 	.word	0x08005637
 8005478:	08005637 	.word	0x08005637
 800547c:	08005533 	.word	0x08005533
 8005480:	08005637 	.word	0x08005637
 8005484:	08005637 	.word	0x08005637
 8005488:	08005637 	.word	0x08005637
 800548c:	08005573 	.word	0x08005573
 8005490:	08005637 	.word	0x08005637
 8005494:	08005637 	.word	0x08005637
 8005498:	08005637 	.word	0x08005637
 800549c:	080055b5 	.word	0x080055b5
 80054a0:	08005637 	.word	0x08005637
 80054a4:	08005637 	.word	0x08005637
 80054a8:	08005637 	.word	0x08005637
 80054ac:	080055f5 	.word	0x080055f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fa56 	bl	8005968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0208 	orr.w	r2, r2, #8
 80054ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0204 	bic.w	r2, r2, #4
 80054da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6999      	ldr	r1, [r3, #24]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	619a      	str	r2, [r3, #24]
      break;
 80054ee:	e0a5      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fac6 	bl	8005a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6999      	ldr	r1, [r3, #24]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	021a      	lsls	r2, r3, #8
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	619a      	str	r2, [r3, #24]
      break;
 8005530:	e084      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fb2f 	bl	8005b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0208 	orr.w	r2, r2, #8
 800554c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0204 	bic.w	r2, r2, #4
 800555c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69d9      	ldr	r1, [r3, #28]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	61da      	str	r2, [r3, #28]
      break;
 8005570:	e064      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fb97 	bl	8005cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800558c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69d9      	ldr	r1, [r3, #28]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	021a      	lsls	r2, r3, #8
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	61da      	str	r2, [r3, #28]
      break;
 80055b2:	e043      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fbe0 	bl	8005d80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0208 	orr.w	r2, r2, #8
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0204 	bic.w	r2, r2, #4
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055f2:	e023      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fc24 	bl	8005e48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005634:	e002      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
      break;
 800563a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop

08005650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIM_ConfigClockSource+0x1c>
 8005668:	2302      	movs	r3, #2
 800566a:	e0b6      	b.n	80057da <HAL_TIM_ConfigClockSource+0x18a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800568e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a8:	d03e      	beq.n	8005728 <HAL_TIM_ConfigClockSource+0xd8>
 80056aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ae:	f200 8087 	bhi.w	80057c0 <HAL_TIM_ConfigClockSource+0x170>
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	f000 8086 	beq.w	80057c6 <HAL_TIM_ConfigClockSource+0x176>
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056be:	d87f      	bhi.n	80057c0 <HAL_TIM_ConfigClockSource+0x170>
 80056c0:	2b70      	cmp	r3, #112	; 0x70
 80056c2:	d01a      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0xaa>
 80056c4:	2b70      	cmp	r3, #112	; 0x70
 80056c6:	d87b      	bhi.n	80057c0 <HAL_TIM_ConfigClockSource+0x170>
 80056c8:	2b60      	cmp	r3, #96	; 0x60
 80056ca:	d050      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x11e>
 80056cc:	2b60      	cmp	r3, #96	; 0x60
 80056ce:	d877      	bhi.n	80057c0 <HAL_TIM_ConfigClockSource+0x170>
 80056d0:	2b50      	cmp	r3, #80	; 0x50
 80056d2:	d03c      	beq.n	800574e <HAL_TIM_ConfigClockSource+0xfe>
 80056d4:	2b50      	cmp	r3, #80	; 0x50
 80056d6:	d873      	bhi.n	80057c0 <HAL_TIM_ConfigClockSource+0x170>
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d058      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x13e>
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	d86f      	bhi.n	80057c0 <HAL_TIM_ConfigClockSource+0x170>
 80056e0:	2b30      	cmp	r3, #48	; 0x30
 80056e2:	d064      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0x15e>
 80056e4:	2b30      	cmp	r3, #48	; 0x30
 80056e6:	d86b      	bhi.n	80057c0 <HAL_TIM_ConfigClockSource+0x170>
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d060      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0x15e>
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d867      	bhi.n	80057c0 <HAL_TIM_ConfigClockSource+0x170>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d05c      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0x15e>
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d05a      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0x15e>
 80056f8:	e062      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6899      	ldr	r1, [r3, #8]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f000 fc7d 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800571c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	609a      	str	r2, [r3, #8]
      break;
 8005726:	e04f      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6818      	ldr	r0, [r3, #0]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	6899      	ldr	r1, [r3, #8]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f000 fc66 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800574a:	609a      	str	r2, [r3, #8]
      break;
 800574c:	e03c      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6859      	ldr	r1, [r3, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	461a      	mov	r2, r3
 800575c:	f000 fbda 	bl	8005f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2150      	movs	r1, #80	; 0x50
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fc33 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 800576c:	e02c      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	6859      	ldr	r1, [r3, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	461a      	mov	r2, r3
 800577c:	f000 fbf9 	bl	8005f72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2160      	movs	r1, #96	; 0x60
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fc23 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 800578c:	e01c      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6859      	ldr	r1, [r3, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	461a      	mov	r2, r3
 800579c:	f000 fbba 	bl	8005f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2140      	movs	r1, #64	; 0x40
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fc13 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 80057ac:	e00c      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f000 fc0a 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 80057be:	e003      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
      break;
 80057c4:	e000      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80057c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a40      	ldr	r2, [pc, #256]	; (8005948 <TIM_Base_SetConfig+0x114>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005852:	d00f      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a3d      	ldr	r2, [pc, #244]	; (800594c <TIM_Base_SetConfig+0x118>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00b      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a3c      	ldr	r2, [pc, #240]	; (8005950 <TIM_Base_SetConfig+0x11c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d007      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a3b      	ldr	r2, [pc, #236]	; (8005954 <TIM_Base_SetConfig+0x120>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a3a      	ldr	r2, [pc, #232]	; (8005958 <TIM_Base_SetConfig+0x124>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d108      	bne.n	8005886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2f      	ldr	r2, [pc, #188]	; (8005948 <TIM_Base_SetConfig+0x114>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01f      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005894:	d01b      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2c      	ldr	r2, [pc, #176]	; (800594c <TIM_Base_SetConfig+0x118>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d017      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <TIM_Base_SetConfig+0x11c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2a      	ldr	r2, [pc, #168]	; (8005954 <TIM_Base_SetConfig+0x120>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00f      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a29      	ldr	r2, [pc, #164]	; (8005958 <TIM_Base_SetConfig+0x124>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <TIM_Base_SetConfig+0x128>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a27      	ldr	r2, [pc, #156]	; (8005960 <TIM_Base_SetConfig+0x12c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <TIM_Base_SetConfig+0x130>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d108      	bne.n	80058e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a10      	ldr	r2, [pc, #64]	; (8005948 <TIM_Base_SetConfig+0x114>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00f      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a12      	ldr	r2, [pc, #72]	; (8005958 <TIM_Base_SetConfig+0x124>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00b      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a11      	ldr	r2, [pc, #68]	; (800595c <TIM_Base_SetConfig+0x128>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a10      	ldr	r2, [pc, #64]	; (8005960 <TIM_Base_SetConfig+0x12c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a0f      	ldr	r2, [pc, #60]	; (8005964 <TIM_Base_SetConfig+0x130>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d103      	bne.n	8005934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	615a      	str	r2, [r3, #20]
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40012c00 	.word	0x40012c00
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	40000c00 	.word	0x40000c00
 8005958:	40013400 	.word	0x40013400
 800595c:	40014000 	.word	0x40014000
 8005960:	40014400 	.word	0x40014400
 8005964:	40014800 	.word	0x40014800

08005968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0201 	bic.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f023 0302 	bic.w	r3, r3, #2
 80059b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a2c      	ldr	r2, [pc, #176]	; (8005a74 <TIM_OC1_SetConfig+0x10c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00f      	beq.n	80059e8 <TIM_OC1_SetConfig+0x80>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a2b      	ldr	r2, [pc, #172]	; (8005a78 <TIM_OC1_SetConfig+0x110>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00b      	beq.n	80059e8 <TIM_OC1_SetConfig+0x80>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <TIM_OC1_SetConfig+0x114>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d007      	beq.n	80059e8 <TIM_OC1_SetConfig+0x80>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a29      	ldr	r2, [pc, #164]	; (8005a80 <TIM_OC1_SetConfig+0x118>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC1_SetConfig+0x80>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a28      	ldr	r2, [pc, #160]	; (8005a84 <TIM_OC1_SetConfig+0x11c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d10c      	bne.n	8005a02 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0308 	bic.w	r3, r3, #8
 80059ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f023 0304 	bic.w	r3, r3, #4
 8005a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <TIM_OC1_SetConfig+0x10c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_OC1_SetConfig+0xc2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	; (8005a78 <TIM_OC1_SetConfig+0x110>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_OC1_SetConfig+0xc2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <TIM_OC1_SetConfig+0x114>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_OC1_SetConfig+0xc2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a18      	ldr	r2, [pc, #96]	; (8005a80 <TIM_OC1_SetConfig+0x118>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_OC1_SetConfig+0xc2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <TIM_OC1_SetConfig+0x11c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d111      	bne.n	8005a4e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	621a      	str	r2, [r3, #32]
}
 8005a68:	bf00      	nop
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40013400 	.word	0x40013400
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	40014400 	.word	0x40014400
 8005a84:	40014800 	.word	0x40014800

08005a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f023 0210 	bic.w	r2, r3, #16
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0320 	bic.w	r3, r3, #32
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <TIM_OC2_SetConfig+0x100>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC2_SetConfig+0x6c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a27      	ldr	r2, [pc, #156]	; (8005b8c <TIM_OC2_SetConfig+0x104>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10d      	bne.n	8005b10 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <TIM_OC2_SetConfig+0x100>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00f      	beq.n	8005b38 <TIM_OC2_SetConfig+0xb0>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <TIM_OC2_SetConfig+0x104>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <TIM_OC2_SetConfig+0xb0>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <TIM_OC2_SetConfig+0x108>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <TIM_OC2_SetConfig+0xb0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a1a      	ldr	r2, [pc, #104]	; (8005b94 <TIM_OC2_SetConfig+0x10c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_OC2_SetConfig+0xb0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a19      	ldr	r2, [pc, #100]	; (8005b98 <TIM_OC2_SetConfig+0x110>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d113      	bne.n	8005b60 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a27      	ldr	r2, [pc, #156]	; (8005c98 <TIM_OC3_SetConfig+0xfc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC3_SetConfig+0x6a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a26      	ldr	r2, [pc, #152]	; (8005c9c <TIM_OC3_SetConfig+0x100>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d10d      	bne.n	8005c22 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1c      	ldr	r2, [pc, #112]	; (8005c98 <TIM_OC3_SetConfig+0xfc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00f      	beq.n	8005c4a <TIM_OC3_SetConfig+0xae>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <TIM_OC3_SetConfig+0x100>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00b      	beq.n	8005c4a <TIM_OC3_SetConfig+0xae>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1a      	ldr	r2, [pc, #104]	; (8005ca0 <TIM_OC3_SetConfig+0x104>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d007      	beq.n	8005c4a <TIM_OC3_SetConfig+0xae>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <TIM_OC3_SetConfig+0x108>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_OC3_SetConfig+0xae>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <TIM_OC3_SetConfig+0x10c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d113      	bne.n	8005c72 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40013400 	.word	0x40013400
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	40014800 	.word	0x40014800

08005cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	031b      	lsls	r3, r3, #12
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a18      	ldr	r2, [pc, #96]	; (8005d6c <TIM_OC4_SetConfig+0xc0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00f      	beq.n	8005d30 <TIM_OC4_SetConfig+0x84>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <TIM_OC4_SetConfig+0xc4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00b      	beq.n	8005d30 <TIM_OC4_SetConfig+0x84>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a16      	ldr	r2, [pc, #88]	; (8005d74 <TIM_OC4_SetConfig+0xc8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d007      	beq.n	8005d30 <TIM_OC4_SetConfig+0x84>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <TIM_OC4_SetConfig+0xcc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <TIM_OC4_SetConfig+0x84>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a14      	ldr	r2, [pc, #80]	; (8005d7c <TIM_OC4_SetConfig+0xd0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d109      	bne.n	8005d44 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	019b      	lsls	r3, r3, #6
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40013400 	.word	0x40013400
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40014400 	.word	0x40014400
 8005d7c:	40014800 	.word	0x40014800

08005d80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005dc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	041b      	lsls	r3, r3, #16
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a17      	ldr	r2, [pc, #92]	; (8005e34 <TIM_OC5_SetConfig+0xb4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00f      	beq.n	8005dfa <TIM_OC5_SetConfig+0x7a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a16      	ldr	r2, [pc, #88]	; (8005e38 <TIM_OC5_SetConfig+0xb8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00b      	beq.n	8005dfa <TIM_OC5_SetConfig+0x7a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <TIM_OC5_SetConfig+0xbc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_OC5_SetConfig+0x7a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a14      	ldr	r2, [pc, #80]	; (8005e40 <TIM_OC5_SetConfig+0xc0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_OC5_SetConfig+0x7a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <TIM_OC5_SetConfig+0xc4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d109      	bne.n	8005e0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40013400 	.word	0x40013400
 8005e3c:	40014000 	.word	0x40014000
 8005e40:	40014400 	.word	0x40014400
 8005e44:	40014800 	.word	0x40014800

08005e48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	051b      	lsls	r3, r3, #20
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a18      	ldr	r2, [pc, #96]	; (8005f00 <TIM_OC6_SetConfig+0xb8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_OC6_SetConfig+0x7c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <TIM_OC6_SetConfig+0xbc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_OC6_SetConfig+0x7c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <TIM_OC6_SetConfig+0xc0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_OC6_SetConfig+0x7c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <TIM_OC6_SetConfig+0xc4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC6_SetConfig+0x7c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a14      	ldr	r2, [pc, #80]	; (8005f10 <TIM_OC6_SetConfig+0xc8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d109      	bne.n	8005ed8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	029b      	lsls	r3, r3, #10
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40012c00 	.word	0x40012c00
 8005f04:	40013400 	.word	0x40013400
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800

08005f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0201 	bic.w	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 030a 	bic.w	r3, r3, #10
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b087      	sub	sp, #28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0210 	bic.w	r2, r3, #16
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f043 0307 	orr.w	r3, r3, #7
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	021a      	lsls	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	431a      	orrs	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	609a      	str	r2, [r3, #8]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2201      	movs	r2, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	43db      	mvns	r3, r3
 800606a:	401a      	ands	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	431a      	orrs	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e068      	b.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2e      	ldr	r2, [pc, #184]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d004      	beq.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a2d      	ldr	r2, [pc, #180]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d108      	bne.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1e      	ldr	r2, [pc, #120]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d01d      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611e:	d018      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00e      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a18      	ldr	r2, [pc, #96]	; (800619c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a13      	ldr	r2, [pc, #76]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d10c      	bne.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	4313      	orrs	r3, r2
 8006162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40013400 	.word	0x40013400
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	40000c00 	.word	0x40000c00
 80061a0:	40014000 	.word	0x40014000

080061a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061bc:	2302      	movs	r3, #2
 80061be:	e065      	b.n	800628c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	041b      	lsls	r3, r3, #16
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a16      	ldr	r2, [pc, #88]	; (8006298 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a14      	ldr	r2, [pc, #80]	; (800629c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d115      	bne.n	800627a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	051b      	lsls	r3, r3, #20
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40013400 	.word	0x40013400

080062a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e040      	b.n	8006370 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fb f9ec 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2224      	movs	r2, #36	; 0x24
 8006308:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f8c0 	bl	80064a0 <UART_SetConfig>
 8006320:	4603      	mov	r3, r0
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e022      	b.n	8006370 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fb6c 	bl	8006a10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006346:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006356:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fbf3 	bl	8006b54 <UART_CheckIdleState>
 800636e:	4603      	mov	r3, r0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800638c:	2b20      	cmp	r3, #32
 800638e:	f040 8082 	bne.w	8006496 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_UART_Transmit+0x26>
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e07a      	b.n	8006498 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_UART_Transmit+0x38>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e073      	b.n	8006498 <HAL_UART_Transmit+0x120>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2221      	movs	r2, #33	; 0x21
 80063c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063c6:	f7fb fb09 	bl	80019dc <HAL_GetTick>
 80063ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e4:	d108      	bne.n	80063f8 <HAL_UART_Transmit+0x80>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	e003      	b.n	8006400 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006408:	e02d      	b.n	8006466 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2200      	movs	r2, #0
 8006412:	2180      	movs	r1, #128	; 0x80
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fbe6 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e039      	b.n	8006498 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	881a      	ldrh	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006436:	b292      	uxth	r2, r2
 8006438:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	3302      	adds	r3, #2
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	e008      	b.n	8006454 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	781a      	ldrb	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	b292      	uxth	r2, r2
 800644c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3301      	adds	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1cb      	bne.n	800640a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2200      	movs	r2, #0
 800647a:	2140      	movs	r1, #64	; 0x40
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fbb2 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e005      	b.n	8006498 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	e000      	b.n	8006498 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006496:	2302      	movs	r3, #2
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3720      	adds	r7, #32
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a4:	b08a      	sub	sp, #40	; 0x28
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	431a      	orrs	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	431a      	orrs	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4ba4      	ldr	r3, [pc, #656]	; (8006760 <UART_SetConfig+0x2c0>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064d8:	430b      	orrs	r3, r1
 80064da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a99      	ldr	r2, [pc, #612]	; (8006764 <UART_SetConfig+0x2c4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d004      	beq.n	800650c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006508:	4313      	orrs	r3, r2
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651c:	430a      	orrs	r2, r1
 800651e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a90      	ldr	r2, [pc, #576]	; (8006768 <UART_SetConfig+0x2c8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d126      	bne.n	8006578 <UART_SetConfig+0xd8>
 800652a:	4b90      	ldr	r3, [pc, #576]	; (800676c <UART_SetConfig+0x2cc>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	2b03      	cmp	r3, #3
 8006536:	d81b      	bhi.n	8006570 <UART_SetConfig+0xd0>
 8006538:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <UART_SetConfig+0xa0>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006551 	.word	0x08006551
 8006544:	08006561 	.word	0x08006561
 8006548:	08006559 	.word	0x08006559
 800654c:	08006569 	.word	0x08006569
 8006550:	2301      	movs	r3, #1
 8006552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006556:	e116      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006558:	2302      	movs	r3, #2
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800655e:	e112      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006566:	e10e      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800656e:	e10a      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006576:	e106      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a7c      	ldr	r2, [pc, #496]	; (8006770 <UART_SetConfig+0x2d0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d138      	bne.n	80065f4 <UART_SetConfig+0x154>
 8006582:	4b7a      	ldr	r3, [pc, #488]	; (800676c <UART_SetConfig+0x2cc>)
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006588:	f003 030c 	and.w	r3, r3, #12
 800658c:	2b0c      	cmp	r3, #12
 800658e:	d82d      	bhi.n	80065ec <UART_SetConfig+0x14c>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <UART_SetConfig+0xf8>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065cd 	.word	0x080065cd
 800659c:	080065ed 	.word	0x080065ed
 80065a0:	080065ed 	.word	0x080065ed
 80065a4:	080065ed 	.word	0x080065ed
 80065a8:	080065dd 	.word	0x080065dd
 80065ac:	080065ed 	.word	0x080065ed
 80065b0:	080065ed 	.word	0x080065ed
 80065b4:	080065ed 	.word	0x080065ed
 80065b8:	080065d5 	.word	0x080065d5
 80065bc:	080065ed 	.word	0x080065ed
 80065c0:	080065ed 	.word	0x080065ed
 80065c4:	080065ed 	.word	0x080065ed
 80065c8:	080065e5 	.word	0x080065e5
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065d2:	e0d8      	b.n	8006786 <UART_SetConfig+0x2e6>
 80065d4:	2302      	movs	r3, #2
 80065d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065da:	e0d4      	b.n	8006786 <UART_SetConfig+0x2e6>
 80065dc:	2304      	movs	r3, #4
 80065de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065e2:	e0d0      	b.n	8006786 <UART_SetConfig+0x2e6>
 80065e4:	2308      	movs	r3, #8
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ea:	e0cc      	b.n	8006786 <UART_SetConfig+0x2e6>
 80065ec:	2310      	movs	r3, #16
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f2:	e0c8      	b.n	8006786 <UART_SetConfig+0x2e6>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a5e      	ldr	r2, [pc, #376]	; (8006774 <UART_SetConfig+0x2d4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d125      	bne.n	800664a <UART_SetConfig+0x1aa>
 80065fe:	4b5b      	ldr	r3, [pc, #364]	; (800676c <UART_SetConfig+0x2cc>)
 8006600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006604:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006608:	2b30      	cmp	r3, #48	; 0x30
 800660a:	d016      	beq.n	800663a <UART_SetConfig+0x19a>
 800660c:	2b30      	cmp	r3, #48	; 0x30
 800660e:	d818      	bhi.n	8006642 <UART_SetConfig+0x1a2>
 8006610:	2b20      	cmp	r3, #32
 8006612:	d00a      	beq.n	800662a <UART_SetConfig+0x18a>
 8006614:	2b20      	cmp	r3, #32
 8006616:	d814      	bhi.n	8006642 <UART_SetConfig+0x1a2>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <UART_SetConfig+0x182>
 800661c:	2b10      	cmp	r3, #16
 800661e:	d008      	beq.n	8006632 <UART_SetConfig+0x192>
 8006620:	e00f      	b.n	8006642 <UART_SetConfig+0x1a2>
 8006622:	2300      	movs	r3, #0
 8006624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006628:	e0ad      	b.n	8006786 <UART_SetConfig+0x2e6>
 800662a:	2302      	movs	r3, #2
 800662c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006630:	e0a9      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006632:	2304      	movs	r3, #4
 8006634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006638:	e0a5      	b.n	8006786 <UART_SetConfig+0x2e6>
 800663a:	2308      	movs	r3, #8
 800663c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006640:	e0a1      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006642:	2310      	movs	r3, #16
 8006644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006648:	e09d      	b.n	8006786 <UART_SetConfig+0x2e6>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a4a      	ldr	r2, [pc, #296]	; (8006778 <UART_SetConfig+0x2d8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d125      	bne.n	80066a0 <UART_SetConfig+0x200>
 8006654:	4b45      	ldr	r3, [pc, #276]	; (800676c <UART_SetConfig+0x2cc>)
 8006656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800665e:	2bc0      	cmp	r3, #192	; 0xc0
 8006660:	d016      	beq.n	8006690 <UART_SetConfig+0x1f0>
 8006662:	2bc0      	cmp	r3, #192	; 0xc0
 8006664:	d818      	bhi.n	8006698 <UART_SetConfig+0x1f8>
 8006666:	2b80      	cmp	r3, #128	; 0x80
 8006668:	d00a      	beq.n	8006680 <UART_SetConfig+0x1e0>
 800666a:	2b80      	cmp	r3, #128	; 0x80
 800666c:	d814      	bhi.n	8006698 <UART_SetConfig+0x1f8>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <UART_SetConfig+0x1d8>
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	d008      	beq.n	8006688 <UART_SetConfig+0x1e8>
 8006676:	e00f      	b.n	8006698 <UART_SetConfig+0x1f8>
 8006678:	2300      	movs	r3, #0
 800667a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800667e:	e082      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006680:	2302      	movs	r3, #2
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006686:	e07e      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006688:	2304      	movs	r3, #4
 800668a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668e:	e07a      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006690:	2308      	movs	r3, #8
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006696:	e076      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006698:	2310      	movs	r3, #16
 800669a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800669e:	e072      	b.n	8006786 <UART_SetConfig+0x2e6>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a35      	ldr	r2, [pc, #212]	; (800677c <UART_SetConfig+0x2dc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d12a      	bne.n	8006700 <UART_SetConfig+0x260>
 80066aa:	4b30      	ldr	r3, [pc, #192]	; (800676c <UART_SetConfig+0x2cc>)
 80066ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b8:	d01a      	beq.n	80066f0 <UART_SetConfig+0x250>
 80066ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066be:	d81b      	bhi.n	80066f8 <UART_SetConfig+0x258>
 80066c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c4:	d00c      	beq.n	80066e0 <UART_SetConfig+0x240>
 80066c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ca:	d815      	bhi.n	80066f8 <UART_SetConfig+0x258>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <UART_SetConfig+0x238>
 80066d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d4:	d008      	beq.n	80066e8 <UART_SetConfig+0x248>
 80066d6:	e00f      	b.n	80066f8 <UART_SetConfig+0x258>
 80066d8:	2300      	movs	r3, #0
 80066da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066de:	e052      	b.n	8006786 <UART_SetConfig+0x2e6>
 80066e0:	2302      	movs	r3, #2
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e6:	e04e      	b.n	8006786 <UART_SetConfig+0x2e6>
 80066e8:	2304      	movs	r3, #4
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ee:	e04a      	b.n	8006786 <UART_SetConfig+0x2e6>
 80066f0:	2308      	movs	r3, #8
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f6:	e046      	b.n	8006786 <UART_SetConfig+0x2e6>
 80066f8:	2310      	movs	r3, #16
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fe:	e042      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a17      	ldr	r2, [pc, #92]	; (8006764 <UART_SetConfig+0x2c4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d13a      	bne.n	8006780 <UART_SetConfig+0x2e0>
 800670a:	4b18      	ldr	r3, [pc, #96]	; (800676c <UART_SetConfig+0x2cc>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006710:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006714:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006718:	d01a      	beq.n	8006750 <UART_SetConfig+0x2b0>
 800671a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800671e:	d81b      	bhi.n	8006758 <UART_SetConfig+0x2b8>
 8006720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006724:	d00c      	beq.n	8006740 <UART_SetConfig+0x2a0>
 8006726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672a:	d815      	bhi.n	8006758 <UART_SetConfig+0x2b8>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <UART_SetConfig+0x298>
 8006730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006734:	d008      	beq.n	8006748 <UART_SetConfig+0x2a8>
 8006736:	e00f      	b.n	8006758 <UART_SetConfig+0x2b8>
 8006738:	2300      	movs	r3, #0
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e022      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006740:	2302      	movs	r3, #2
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006746:	e01e      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006748:	2304      	movs	r3, #4
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674e:	e01a      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006750:	2308      	movs	r3, #8
 8006752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006756:	e016      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006758:	2310      	movs	r3, #16
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675e:	e012      	b.n	8006786 <UART_SetConfig+0x2e6>
 8006760:	efff69f3 	.word	0xefff69f3
 8006764:	40008000 	.word	0x40008000
 8006768:	40013800 	.word	0x40013800
 800676c:	40021000 	.word	0x40021000
 8006770:	40004400 	.word	0x40004400
 8006774:	40004800 	.word	0x40004800
 8006778:	40004c00 	.word	0x40004c00
 800677c:	40005000 	.word	0x40005000
 8006780:	2310      	movs	r3, #16
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a9f      	ldr	r2, [pc, #636]	; (8006a08 <UART_SetConfig+0x568>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d17a      	bne.n	8006886 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006794:	2b08      	cmp	r3, #8
 8006796:	d824      	bhi.n	80067e2 <UART_SetConfig+0x342>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0x300>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067e3 	.word	0x080067e3
 80067a8:	080067cd 	.word	0x080067cd
 80067ac:	080067e3 	.word	0x080067e3
 80067b0:	080067d3 	.word	0x080067d3
 80067b4:	080067e3 	.word	0x080067e3
 80067b8:	080067e3 	.word	0x080067e3
 80067bc:	080067e3 	.word	0x080067e3
 80067c0:	080067db 	.word	0x080067db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fd fd66 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 80067c8:	61f8      	str	r0, [r7, #28]
        break;
 80067ca:	e010      	b.n	80067ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067cc:	4b8f      	ldr	r3, [pc, #572]	; (8006a0c <UART_SetConfig+0x56c>)
 80067ce:	61fb      	str	r3, [r7, #28]
        break;
 80067d0:	e00d      	b.n	80067ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067d2:	f7fd fcc7 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 80067d6:	61f8      	str	r0, [r7, #28]
        break;
 80067d8:	e009      	b.n	80067ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067de:	61fb      	str	r3, [r7, #28]
        break;
 80067e0:	e005      	b.n	80067ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 80fb 	beq.w	80069ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	4413      	add	r3, r2
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	429a      	cmp	r2, r3
 8006804:	d305      	bcc.n	8006812 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800680c:	69fa      	ldr	r2, [r7, #28]
 800680e:	429a      	cmp	r2, r3
 8006810:	d903      	bls.n	800681a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006818:	e0e8      	b.n	80069ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2200      	movs	r2, #0
 800681e:	461c      	mov	r4, r3
 8006820:	4615      	mov	r5, r2
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	022b      	lsls	r3, r5, #8
 800682c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006830:	0222      	lsls	r2, r4, #8
 8006832:	68f9      	ldr	r1, [r7, #12]
 8006834:	6849      	ldr	r1, [r1, #4]
 8006836:	0849      	lsrs	r1, r1, #1
 8006838:	2000      	movs	r0, #0
 800683a:	4688      	mov	r8, r1
 800683c:	4681      	mov	r9, r0
 800683e:	eb12 0a08 	adds.w	sl, r2, r8
 8006842:	eb43 0b09 	adc.w	fp, r3, r9
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006854:	4650      	mov	r0, sl
 8006856:	4659      	mov	r1, fp
 8006858:	f7f9 fe9e 	bl	8000598 <__aeabi_uldivmod>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4613      	mov	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800686a:	d308      	bcc.n	800687e <UART_SetConfig+0x3de>
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006872:	d204      	bcs.n	800687e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	e0b6      	b.n	80069ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006884:	e0b2      	b.n	80069ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688e:	d15e      	bne.n	800694e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006894:	2b08      	cmp	r3, #8
 8006896:	d828      	bhi.n	80068ea <UART_SetConfig+0x44a>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <UART_SetConfig+0x400>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068c5 	.word	0x080068c5
 80068a4:	080068cd 	.word	0x080068cd
 80068a8:	080068d5 	.word	0x080068d5
 80068ac:	080068eb 	.word	0x080068eb
 80068b0:	080068db 	.word	0x080068db
 80068b4:	080068eb 	.word	0x080068eb
 80068b8:	080068eb 	.word	0x080068eb
 80068bc:	080068eb 	.word	0x080068eb
 80068c0:	080068e3 	.word	0x080068e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c4:	f7fd fce6 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 80068c8:	61f8      	str	r0, [r7, #28]
        break;
 80068ca:	e014      	b.n	80068f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068cc:	f7fd fcf8 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 80068d0:	61f8      	str	r0, [r7, #28]
        break;
 80068d2:	e010      	b.n	80068f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d4:	4b4d      	ldr	r3, [pc, #308]	; (8006a0c <UART_SetConfig+0x56c>)
 80068d6:	61fb      	str	r3, [r7, #28]
        break;
 80068d8:	e00d      	b.n	80068f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068da:	f7fd fc43 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 80068de:	61f8      	str	r0, [r7, #28]
        break;
 80068e0:	e009      	b.n	80068f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e6:	61fb      	str	r3, [r7, #28]
        break;
 80068e8:	e005      	b.n	80068f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d077      	beq.n	80069ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	005a      	lsls	r2, r3, #1
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	085b      	lsrs	r3, r3, #1
 8006906:	441a      	add	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006910:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	2b0f      	cmp	r3, #15
 8006916:	d916      	bls.n	8006946 <UART_SetConfig+0x4a6>
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691e:	d212      	bcs.n	8006946 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f023 030f 	bic.w	r3, r3, #15
 8006928:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	b29b      	uxth	r3, r3
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	b29a      	uxth	r2, r3
 8006936:	8afb      	ldrh	r3, [r7, #22]
 8006938:	4313      	orrs	r3, r2
 800693a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	8afa      	ldrh	r2, [r7, #22]
 8006942:	60da      	str	r2, [r3, #12]
 8006944:	e052      	b.n	80069ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800694c:	e04e      	b.n	80069ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800694e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006952:	2b08      	cmp	r3, #8
 8006954:	d827      	bhi.n	80069a6 <UART_SetConfig+0x506>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <UART_SetConfig+0x4bc>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	08006981 	.word	0x08006981
 8006960:	08006989 	.word	0x08006989
 8006964:	08006991 	.word	0x08006991
 8006968:	080069a7 	.word	0x080069a7
 800696c:	08006997 	.word	0x08006997
 8006970:	080069a7 	.word	0x080069a7
 8006974:	080069a7 	.word	0x080069a7
 8006978:	080069a7 	.word	0x080069a7
 800697c:	0800699f 	.word	0x0800699f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006980:	f7fd fc88 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8006984:	61f8      	str	r0, [r7, #28]
        break;
 8006986:	e014      	b.n	80069b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006988:	f7fd fc9a 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 800698c:	61f8      	str	r0, [r7, #28]
        break;
 800698e:	e010      	b.n	80069b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006990:	4b1e      	ldr	r3, [pc, #120]	; (8006a0c <UART_SetConfig+0x56c>)
 8006992:	61fb      	str	r3, [r7, #28]
        break;
 8006994:	e00d      	b.n	80069b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006996:	f7fd fbe5 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 800699a:	61f8      	str	r0, [r7, #28]
        break;
 800699c:	e009      	b.n	80069b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800699e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a2:	61fb      	str	r3, [r7, #28]
        break;
 80069a4:	e005      	b.n	80069b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069b0:	bf00      	nop
    }

    if (pclk != 0U)
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d019      	beq.n	80069ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	085a      	lsrs	r2, r3, #1
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	441a      	add	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	2b0f      	cmp	r3, #15
 80069d0:	d909      	bls.n	80069e6 <UART_SetConfig+0x546>
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d8:	d205      	bcs.n	80069e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60da      	str	r2, [r3, #12]
 80069e4:	e002      	b.n	80069ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3728      	adds	r7, #40	; 0x28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a06:	bf00      	nop
 8006a08:	40008000 	.word	0x40008000
 8006a0c:	00f42400 	.word	0x00f42400

08006a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00a      	beq.n	8006a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01a      	beq.n	8006b26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b0e:	d10a      	bne.n	8006b26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]
  }
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af02      	add	r7, sp, #8
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b64:	f7fa ff3a 	bl	80019dc <HAL_GetTick>
 8006b68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d10e      	bne.n	8006b96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f82d 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e023      	b.n	8006bde <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d10e      	bne.n	8006bc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f817 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e00d      	b.n	8006bde <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b09c      	sub	sp, #112	; 0x70
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf6:	e0a5      	b.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfe:	f000 80a1 	beq.w	8006d44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c02:	f7fa feeb 	bl	80019dc <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d302      	bcc.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d13e      	bne.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c2c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e6      	bne.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	663b      	str	r3, [r7, #96]	; 0x60
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3308      	adds	r3, #8
 8006c68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e5      	bne.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e067      	b.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d04f      	beq.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb2:	d147      	bne.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cbc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e6      	bne.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d10:	623a      	str	r2, [r7, #32]
 8006d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e5      	bne.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e010      	b.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69da      	ldr	r2, [r3, #28]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	bf0c      	ite	eq
 8006d54:	2301      	moveq	r3, #1
 8006d56:	2300      	movne	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	f43f af4a 	beq.w	8006bf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3770      	adds	r7, #112	; 0x70
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <__NVIC_SetPriority>:
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	6039      	str	r1, [r7, #0]
 8006d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	db0a      	blt.n	8006d9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	490c      	ldr	r1, [pc, #48]	; (8006dbc <__NVIC_SetPriority+0x4c>)
 8006d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d8e:	0112      	lsls	r2, r2, #4
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	440b      	add	r3, r1
 8006d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006d98:	e00a      	b.n	8006db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	4908      	ldr	r1, [pc, #32]	; (8006dc0 <__NVIC_SetPriority+0x50>)
 8006da0:	79fb      	ldrb	r3, [r7, #7]
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	3b04      	subs	r3, #4
 8006da8:	0112      	lsls	r2, r2, #4
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	440b      	add	r3, r1
 8006dae:	761a      	strb	r2, [r3, #24]
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	e000e100 	.word	0xe000e100
 8006dc0:	e000ed00 	.word	0xe000ed00

08006dc4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006dc8:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <SysTick_Handler+0x1c>)
 8006dca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006dcc:	f001 fd80 	bl	80088d0 <xTaskGetSchedulerState>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d001      	beq.n	8006dda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006dd6:	f002 fb67 	bl	80094a8 <xPortSysTickHandler>
  }
}
 8006dda:	bf00      	nop
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	e000e010 	.word	0xe000e010

08006de4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006de8:	2100      	movs	r1, #0
 8006dea:	f06f 0004 	mvn.w	r0, #4
 8006dee:	f7ff ffbf 	bl	8006d70 <__NVIC_SetPriority>
#endif
}
 8006df2:	bf00      	nop
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dfe:	f3ef 8305 	mrs	r3, IPSR
 8006e02:	603b      	str	r3, [r7, #0]
  return(result);
 8006e04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e0a:	f06f 0305 	mvn.w	r3, #5
 8006e0e:	607b      	str	r3, [r7, #4]
 8006e10:	e00c      	b.n	8006e2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e12:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <osKernelInitialize+0x44>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <osKernelInitialize+0x44>)
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	607b      	str	r3, [r7, #4]
 8006e24:	e002      	b.n	8006e2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e2c:	687b      	ldr	r3, [r7, #4]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000334 	.word	0x20000334

08006e40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e46:	f3ef 8305 	mrs	r3, IPSR
 8006e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8006e4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e52:	f06f 0305 	mvn.w	r3, #5
 8006e56:	607b      	str	r3, [r7, #4]
 8006e58:	e010      	b.n	8006e7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e5a:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <osKernelStart+0x48>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d109      	bne.n	8006e76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e62:	f7ff ffbf 	bl	8006de4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e66:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <osKernelStart+0x48>)
 8006e68:	2202      	movs	r2, #2
 8006e6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e6c:	f001 f8d4 	bl	8008018 <vTaskStartScheduler>
      stat = osOK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	607b      	str	r3, [r7, #4]
 8006e74:	e002      	b.n	8006e7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e76:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e7c:	687b      	ldr	r3, [r7, #4]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000334 	.word	0x20000334

08006e8c <osKernelLock>:

int32_t osKernelLock (void) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e92:	f3ef 8305 	mrs	r3, IPSR
 8006e96:	603b      	str	r3, [r7, #0]
  return(result);
 8006e98:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <osKernelLock+0x1a>
    lock = (int32_t)osErrorISR;
 8006e9e:	f06f 0305 	mvn.w	r3, #5
 8006ea2:	607b      	str	r3, [r7, #4]
 8006ea4:	e013      	b.n	8006ece <osKernelLock+0x42>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8006ea6:	f001 fd13 	bl	80088d0 <xTaskGetSchedulerState>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <osKernelLock+0x2a>
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d003      	beq.n	8006ebc <osKernelLock+0x30>
 8006eb4:	e007      	b.n	8006ec6 <osKernelLock+0x3a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	607b      	str	r3, [r7, #4]
        break;
 8006eba:	e008      	b.n	8006ece <osKernelLock+0x42>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8006ebc:	f001 f91c 	bl	80080f8 <vTaskSuspendAll>
        lock = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	607b      	str	r3, [r7, #4]
        break;
 8006ec4:	e003      	b.n	8006ece <osKernelLock+0x42>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8006ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eca:	607b      	str	r3, [r7, #4]
        break;
 8006ecc:	bf00      	nop
    }
  }

  return (lock);
 8006ece:	687b      	ldr	r3, [r7, #4]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ede:	f3ef 8305 	mrs	r3, IPSR
 8006ee2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ee4:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <osKernelUnlock+0x1a>
    lock = (int32_t)osErrorISR;
 8006eea:	f06f 0305 	mvn.w	r3, #5
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	e01f      	b.n	8006f32 <osKernelUnlock+0x5a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8006ef2:	f001 fced 	bl	80088d0 <xTaskGetSchedulerState>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <osKernelUnlock+0x2a>
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d010      	beq.n	8006f22 <osKernelUnlock+0x4a>
 8006f00:	e012      	b.n	8006f28 <osKernelUnlock+0x50>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8006f02:	2301      	movs	r3, #1
 8006f04:	607b      	str	r3, [r7, #4]

        if (xTaskResumeAll() != pdTRUE) {
 8006f06:	f001 f905 	bl	8008114 <xTaskResumeAll>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d00f      	beq.n	8006f30 <osKernelUnlock+0x58>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 8006f10:	f001 fcde 	bl	80088d0 <xTaskGetSchedulerState>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <osKernelUnlock+0x58>
            lock = (int32_t)osError;
 8006f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1e:	607b      	str	r3, [r7, #4]
          }
        }
        break;
 8006f20:	e006      	b.n	8006f30 <osKernelUnlock+0x58>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
        break;
 8006f26:	e004      	b.n	8006f32 <osKernelUnlock+0x5a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8006f28:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2c:	607b      	str	r3, [r7, #4]
        break;
 8006f2e:	e000      	b.n	8006f32 <osKernelUnlock+0x5a>
        break;
 8006f30:	bf00      	nop
    }
  }

  return (lock);
 8006f32:	687b      	ldr	r3, [r7, #4]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08e      	sub	sp, #56	; 0x38
 8006f40:	af04      	add	r7, sp, #16
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f4c:	f3ef 8305 	mrs	r3, IPSR
 8006f50:	617b      	str	r3, [r7, #20]
  return(result);
 8006f52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d17e      	bne.n	8007056 <osThreadNew+0x11a>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d07b      	beq.n	8007056 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f5e:	2380      	movs	r3, #128	; 0x80
 8006f60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f62:	2318      	movs	r3, #24
 8006f64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d045      	beq.n	8007002 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <osThreadNew+0x48>
        name = attr->name;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <osThreadNew+0x6e>
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	2b38      	cmp	r3, #56	; 0x38
 8006f9c:	d805      	bhi.n	8006faa <osThreadNew+0x6e>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <osThreadNew+0x72>
        return (NULL);
 8006faa:	2300      	movs	r3, #0
 8006fac:	e054      	b.n	8007058 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	089b      	lsrs	r3, r3, #2
 8006fbc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00e      	beq.n	8006fe4 <osThreadNew+0xa8>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	2bbb      	cmp	r3, #187	; 0xbb
 8006fcc:	d90a      	bls.n	8006fe4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d006      	beq.n	8006fe4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <osThreadNew+0xa8>
        mem = 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	e010      	b.n	8007006 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10c      	bne.n	8007006 <osThreadNew+0xca>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d108      	bne.n	8007006 <osThreadNew+0xca>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d104      	bne.n	8007006 <osThreadNew+0xca>
          mem = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	e001      	b.n	8007006 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d110      	bne.n	800702e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007014:	9202      	str	r2, [sp, #8]
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	6a3a      	ldr	r2, [r7, #32]
 8007020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 fe0c 	bl	8007c40 <xTaskCreateStatic>
 8007028:	4603      	mov	r3, r0
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	e013      	b.n	8007056 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d110      	bne.n	8007056 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	b29a      	uxth	r2, r3
 8007038:	f107 0310 	add.w	r3, r7, #16
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 fe57 	bl	8007cfa <xTaskCreate>
 800704c:	4603      	mov	r3, r0
 800704e:	2b01      	cmp	r3, #1
 8007050:	d001      	beq.n	8007056 <osThreadNew+0x11a>
            hTask = NULL;
 8007052:	2300      	movs	r3, #0
 8007054:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007056:	693b      	ldr	r3, [r7, #16]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3728      	adds	r7, #40	; 0x28
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007068:	f3ef 8305 	mrs	r3, IPSR
 800706c:	60bb      	str	r3, [r7, #8]
  return(result);
 800706e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <osDelay+0x1c>
    stat = osErrorISR;
 8007074:	f06f 0305 	mvn.w	r3, #5
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	e007      	b.n	800708c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 ff92 	bl	8007fb0 <vTaskDelay>
    }
  }

  return (stat);
 800708c:	68fb      	ldr	r3, [r7, #12]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4a07      	ldr	r2, [pc, #28]	; (80070c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80070a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4a06      	ldr	r2, [pc, #24]	; (80070c8 <vApplicationGetIdleTaskMemory+0x30>)
 80070ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2280      	movs	r2, #128	; 0x80
 80070b4:	601a      	str	r2, [r3, #0]
}
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000338 	.word	0x20000338
 80070c8:	200003f4 	.word	0x200003f4

080070cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4a07      	ldr	r2, [pc, #28]	; (80070f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80070dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	4a06      	ldr	r2, [pc, #24]	; (80070fc <vApplicationGetTimerTaskMemory+0x30>)
 80070e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ea:	601a      	str	r2, [r3, #0]
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	200005f4 	.word	0x200005f4
 80070fc:	200006b0 	.word	0x200006b0

08007100 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f103 0208 	add.w	r2, r3, #8
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f04f 32ff 	mov.w	r2, #4294967295
 8007118:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f103 0208 	add.w	r2, r3, #8
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f103 0208 	add.w	r2, r3, #8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	601a      	str	r2, [r3, #0]
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d103      	bne.n	80071c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e00c      	b.n	80071dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3308      	adds	r3, #8
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e002      	b.n	80071d0 <vListInsert+0x2e>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d2f6      	bcs.n	80071ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	601a      	str	r2, [r3, #0]
}
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6892      	ldr	r2, [r2, #8]
 800722a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6852      	ldr	r2, [r2, #4]
 8007234:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	429a      	cmp	r2, r3
 800723e:	d103      	bne.n	8007248 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	1e5a      	subs	r2, r3, #1
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007292:	f002 f877 	bl	8009384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072a2:	fb01 f303 	mul.w	r3, r1, r3
 80072a6:	441a      	add	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c2:	3b01      	subs	r3, #1
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072c8:	fb01 f303 	mul.w	r3, r1, r3
 80072cc:	441a      	add	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	22ff      	movs	r2, #255	; 0xff
 80072d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	22ff      	movs	r2, #255	; 0xff
 80072de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d114      	bne.n	8007312 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01a      	beq.n	8007326 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3310      	adds	r3, #16
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 f929 	bl	800854c <xTaskRemoveFromEventList>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d012      	beq.n	8007326 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007300:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <xQueueGenericReset+0xcc>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	e009      	b.n	8007326 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3310      	adds	r3, #16
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff fef2 	bl	8007100 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3324      	adds	r3, #36	; 0x24
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff feed 	bl	8007100 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007326:	f002 f85d 	bl	80093e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800732a:	2301      	movs	r3, #1
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08e      	sub	sp, #56	; 0x38
 800733c:	af02      	add	r7, sp, #8
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <xQueueGenericCreateStatic+0x52>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <xQueueGenericCreateStatic+0x56>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <xQueueGenericCreateStatic+0x58>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	623b      	str	r3, [r7, #32]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <xQueueGenericCreateStatic+0x7e>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <xQueueGenericCreateStatic+0x82>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e000      	b.n	80073bc <xQueueGenericCreateStatic+0x84>
 80073ba:	2300      	movs	r3, #0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	61fb      	str	r3, [r7, #28]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073d6:	2350      	movs	r3, #80	; 0x50
 80073d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b50      	cmp	r3, #80	; 0x50
 80073de:	d00a      	beq.n	80073f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	61bb      	str	r3, [r7, #24]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00d      	beq.n	800741e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800740a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	4613      	mov	r3, r2
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 f805 	bl	8007428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007420:	4618      	mov	r0, r3
 8007422:	3730      	adds	r7, #48	; 0x30
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d103      	bne.n	8007444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	e002      	b.n	800744a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007456:	2101      	movs	r1, #1
 8007458:	69b8      	ldr	r0, [r7, #24]
 800745a:	f7ff ff05 	bl	8007268 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	78fa      	ldrb	r2, [r7, #3]
 8007462:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08e      	sub	sp, #56	; 0x38
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800747e:	2300      	movs	r3, #0
 8007480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <xQueueGenericSend+0x32>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <xQueueGenericSend+0x40>
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <xQueueGenericSend+0x44>
 80074b0:	2301      	movs	r3, #1
 80074b2:	e000      	b.n	80074b6 <xQueueGenericSend+0x46>
 80074b4:	2300      	movs	r3, #0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <xQueueGenericSend+0x60>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d103      	bne.n	80074de <xQueueGenericSend+0x6e>
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <xQueueGenericSend+0x72>
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <xQueueGenericSend+0x74>
 80074e2:	2300      	movs	r3, #0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <xQueueGenericSend+0x8e>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	623b      	str	r3, [r7, #32]
}
 80074fa:	bf00      	nop
 80074fc:	e7fe      	b.n	80074fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074fe:	f001 f9e7 	bl	80088d0 <xTaskGetSchedulerState>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <xQueueGenericSend+0x9e>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <xQueueGenericSend+0xa2>
 800750e:	2301      	movs	r3, #1
 8007510:	e000      	b.n	8007514 <xQueueGenericSend+0xa4>
 8007512:	2300      	movs	r3, #0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <xQueueGenericSend+0xbe>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	61fb      	str	r3, [r7, #28]
}
 800752a:	bf00      	nop
 800752c:	e7fe      	b.n	800752c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800752e:	f001 ff29 	bl	8009384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753a:	429a      	cmp	r2, r3
 800753c:	d302      	bcc.n	8007544 <xQueueGenericSend+0xd4>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d129      	bne.n	8007598 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800754a:	f000 fa0b 	bl	8007964 <prvCopyDataToQueue>
 800754e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	d010      	beq.n	800757a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	3324      	adds	r3, #36	; 0x24
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fff5 	bl	800854c <xTaskRemoveFromEventList>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d013      	beq.n	8007590 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007568:	4b3f      	ldr	r3, [pc, #252]	; (8007668 <xQueueGenericSend+0x1f8>)
 800756a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	e00a      	b.n	8007590 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007580:	4b39      	ldr	r3, [pc, #228]	; (8007668 <xQueueGenericSend+0x1f8>)
 8007582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007590:	f001 ff28 	bl	80093e4 <vPortExitCritical>
				return pdPASS;
 8007594:	2301      	movs	r3, #1
 8007596:	e063      	b.n	8007660 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d103      	bne.n	80075a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800759e:	f001 ff21 	bl	80093e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	e05c      	b.n	8007660 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d106      	bne.n	80075ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075ac:	f107 0314 	add.w	r3, r7, #20
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 f82f 	bl	8008614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075b6:	2301      	movs	r3, #1
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075ba:	f001 ff13 	bl	80093e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075be:	f000 fd9b 	bl	80080f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075c2:	f001 fedf 	bl	8009384 <vPortEnterCritical>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075cc:	b25b      	sxtb	r3, r3
 80075ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d2:	d103      	bne.n	80075dc <xQueueGenericSend+0x16c>
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075e2:	b25b      	sxtb	r3, r3
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e8:	d103      	bne.n	80075f2 <xQueueGenericSend+0x182>
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075f2:	f001 fef7 	bl	80093e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075f6:	1d3a      	adds	r2, r7, #4
 80075f8:	f107 0314 	add.w	r3, r7, #20
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f001 f81e 	bl	8008640 <xTaskCheckForTimeOut>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d124      	bne.n	8007654 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800760a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800760c:	f000 faa2 	bl	8007b54 <prvIsQueueFull>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d018      	beq.n	8007648 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	3310      	adds	r3, #16
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f000 ff44 	bl	80084ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007626:	f000 fa2d 	bl	8007a84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800762a:	f000 fd73 	bl	8008114 <xTaskResumeAll>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	f47f af7c 	bne.w	800752e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007636:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <xQueueGenericSend+0x1f8>)
 8007638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	e772      	b.n	800752e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800764a:	f000 fa1b 	bl	8007a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800764e:	f000 fd61 	bl	8008114 <xTaskResumeAll>
 8007652:	e76c      	b.n	800752e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007656:	f000 fa15 	bl	8007a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800765a:	f000 fd5b 	bl	8008114 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800765e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007660:	4618      	mov	r0, r3
 8007662:	3738      	adds	r7, #56	; 0x38
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b090      	sub	sp, #64	; 0x40
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d103      	bne.n	80076a8 <xQueueGenericSendFromISR+0x3c>
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <xQueueGenericSendFromISR+0x40>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <xQueueGenericSendFromISR+0x42>
 80076ac:	2300      	movs	r3, #0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d103      	bne.n	80076d6 <xQueueGenericSendFromISR+0x6a>
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <xQueueGenericSendFromISR+0x6e>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <xQueueGenericSendFromISR+0x70>
 80076da:	2300      	movs	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	623b      	str	r3, [r7, #32]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076f6:	f001 ff27 	bl	8009548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076fa:	f3ef 8211 	mrs	r2, BASEPRI
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	61fa      	str	r2, [r7, #28]
 8007710:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007712:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007714:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	429a      	cmp	r2, r3
 8007720:	d302      	bcc.n	8007728 <xQueueGenericSendFromISR+0xbc>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d12f      	bne.n	8007788 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800772e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800773e:	f000 f911 	bl	8007964 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007742:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774a:	d112      	bne.n	8007772 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d016      	beq.n	8007782 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	3324      	adds	r3, #36	; 0x24
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fef7 	bl	800854c <xTaskRemoveFromEventList>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00e      	beq.n	8007782 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00b      	beq.n	8007782 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	e007      	b.n	8007782 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007772:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007776:	3301      	adds	r3, #1
 8007778:	b2db      	uxtb	r3, r3
 800777a:	b25a      	sxtb	r2, r3
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007782:	2301      	movs	r3, #1
 8007784:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007786:	e001      	b.n	800778c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007788:	2300      	movs	r3, #0
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007796:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800779a:	4618      	mov	r0, r3
 800779c:	3740      	adds	r7, #64	; 0x40
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08c      	sub	sp, #48	; 0x30
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077b0:	2300      	movs	r3, #0
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <xQueueReceive+0x30>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	623b      	str	r3, [r7, #32]
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d103      	bne.n	80077e2 <xQueueReceive+0x3e>
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <xQueueReceive+0x42>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <xQueueReceive+0x44>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xQueueReceive+0x5e>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	61fb      	str	r3, [r7, #28]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007802:	f001 f865 	bl	80088d0 <xTaskGetSchedulerState>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <xQueueReceive+0x6e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <xQueueReceive+0x72>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <xQueueReceive+0x74>
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <xQueueReceive+0x8e>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	61bb      	str	r3, [r7, #24]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007832:	f001 fda7 	bl	8009384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01f      	beq.n	8007882 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007846:	f000 f8f7 	bl	8007a38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	1e5a      	subs	r2, r3, #1
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00f      	beq.n	800787a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	3310      	adds	r3, #16
 800785e:	4618      	mov	r0, r3
 8007860:	f000 fe74 	bl	800854c <xTaskRemoveFromEventList>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800786a:	4b3d      	ldr	r3, [pc, #244]	; (8007960 <xQueueReceive+0x1bc>)
 800786c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800787a:	f001 fdb3 	bl	80093e4 <vPortExitCritical>
				return pdPASS;
 800787e:	2301      	movs	r3, #1
 8007880:	e069      	b.n	8007956 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d103      	bne.n	8007890 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007888:	f001 fdac 	bl	80093e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800788c:	2300      	movs	r3, #0
 800788e:	e062      	b.n	8007956 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007896:	f107 0310 	add.w	r3, r7, #16
 800789a:	4618      	mov	r0, r3
 800789c:	f000 feba 	bl	8008614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078a0:	2301      	movs	r3, #1
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078a4:	f001 fd9e 	bl	80093e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078a8:	f000 fc26 	bl	80080f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078ac:	f001 fd6a 	bl	8009384 <vPortEnterCritical>
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078b6:	b25b      	sxtb	r3, r3
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d103      	bne.n	80078c6 <xQueueReceive+0x122>
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078cc:	b25b      	sxtb	r3, r3
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d2:	d103      	bne.n	80078dc <xQueueReceive+0x138>
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078dc:	f001 fd82 	bl	80093e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078e0:	1d3a      	adds	r2, r7, #4
 80078e2:	f107 0310 	add.w	r3, r7, #16
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fea9 	bl	8008640 <xTaskCheckForTimeOut>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d123      	bne.n	800793c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f6:	f000 f917 	bl	8007b28 <prvIsQueueEmpty>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d017      	beq.n	8007930 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fdcf 	bl	80084ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800790e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007910:	f000 f8b8 	bl	8007a84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007914:	f000 fbfe 	bl	8008114 <xTaskResumeAll>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d189      	bne.n	8007832 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800791e:	4b10      	ldr	r3, [pc, #64]	; (8007960 <xQueueReceive+0x1bc>)
 8007920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	e780      	b.n	8007832 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007932:	f000 f8a7 	bl	8007a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007936:	f000 fbed 	bl	8008114 <xTaskResumeAll>
 800793a:	e77a      	b.n	8007832 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800793c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793e:	f000 f8a1 	bl	8007a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007942:	f000 fbe7 	bl	8008114 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007948:	f000 f8ee 	bl	8007b28 <prvIsQueueEmpty>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	f43f af6f 	beq.w	8007832 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007956:	4618      	mov	r0, r3
 8007958:	3730      	adds	r7, #48	; 0x30
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10d      	bne.n	800799e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d14d      	bne.n	8007a26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 ffbc 	bl	800890c <xTaskPriorityDisinherit>
 8007994:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	609a      	str	r2, [r3, #8]
 800799c:	e043      	b.n	8007a26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d119      	bne.n	80079d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6858      	ldr	r0, [r3, #4]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ac:	461a      	mov	r2, r3
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	f002 f81a 	bl	80099e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	441a      	add	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d32b      	bcc.n	8007a26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	e026      	b.n	8007a26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	68d8      	ldr	r0, [r3, #12]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	461a      	mov	r2, r3
 80079e2:	68b9      	ldr	r1, [r7, #8]
 80079e4:	f002 f800 	bl	80099e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	425b      	negs	r3, r3
 80079f2:	441a      	add	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d207      	bcs.n	8007a14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	425b      	negs	r3, r3
 8007a0e:	441a      	add	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d105      	bne.n	8007a26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a2e:	697b      	ldr	r3, [r7, #20]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d018      	beq.n	8007a7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	441a      	add	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d303      	bcc.n	8007a6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68d9      	ldr	r1, [r3, #12]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	461a      	mov	r2, r3
 8007a76:	6838      	ldr	r0, [r7, #0]
 8007a78:	f001 ffb6 	bl	80099e8 <memcpy>
	}
}
 8007a7c:	bf00      	nop
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a8c:	f001 fc7a 	bl	8009384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a98:	e011      	b.n	8007abe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d012      	beq.n	8007ac8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3324      	adds	r3, #36	; 0x24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fd50 	bl	800854c <xTaskRemoveFromEventList>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ab2:	f000 fe27 	bl	8008704 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	dce9      	bgt.n	8007a9a <prvUnlockQueue+0x16>
 8007ac6:	e000      	b.n	8007aca <prvUnlockQueue+0x46>
					break;
 8007ac8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	22ff      	movs	r2, #255	; 0xff
 8007ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ad2:	f001 fc87 	bl	80093e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ad6:	f001 fc55 	bl	8009384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ae0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ae2:	e011      	b.n	8007b08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d012      	beq.n	8007b12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3310      	adds	r3, #16
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fd2b 	bl	800854c <xTaskRemoveFromEventList>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007afc:	f000 fe02 	bl	8008704 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dce9      	bgt.n	8007ae4 <prvUnlockQueue+0x60>
 8007b10:	e000      	b.n	8007b14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	22ff      	movs	r2, #255	; 0xff
 8007b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b1c:	f001 fc62 	bl	80093e4 <vPortExitCritical>
}
 8007b20:	bf00      	nop
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b30:	f001 fc28 	bl	8009384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	e001      	b.n	8007b46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b46:	f001 fc4d 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b5c:	f001 fc12 	bl	8009384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d102      	bne.n	8007b72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	e001      	b.n	8007b76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b76:	f001 fc35 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	e014      	b.n	8007bbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b94:	4a0f      	ldr	r2, [pc, #60]	; (8007bd4 <vQueueAddToRegistry+0x50>)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10b      	bne.n	8007bb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ba0:	490c      	ldr	r1, [pc, #48]	; (8007bd4 <vQueueAddToRegistry+0x50>)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007baa:	4a0a      	ldr	r2, [pc, #40]	; (8007bd4 <vQueueAddToRegistry+0x50>)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bb6:	e006      	b.n	8007bc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b07      	cmp	r3, #7
 8007bc2:	d9e7      	bls.n	8007b94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000ab0 	.word	0x20000ab0

08007bd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007be8:	f001 fbcc 	bl	8009384 <vPortEnterCritical>
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bf2:	b25b      	sxtb	r3, r3
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf8:	d103      	bne.n	8007c02 <vQueueWaitForMessageRestricted+0x2a>
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c08:	b25b      	sxtb	r3, r3
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	d103      	bne.n	8007c18 <vQueueWaitForMessageRestricted+0x40>
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c18:	f001 fbe4 	bl	80093e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d106      	bne.n	8007c32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	3324      	adds	r3, #36	; 0x24
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fc61 	bl	80084f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c32:	6978      	ldr	r0, [r7, #20]
 8007c34:	f7ff ff26 	bl	8007a84 <prvUnlockQueue>
	}
 8007c38:	bf00      	nop
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08e      	sub	sp, #56	; 0x38
 8007c44:	af04      	add	r7, sp, #16
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	623b      	str	r3, [r7, #32]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xTaskCreateStatic+0x46>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	61fb      	str	r3, [r7, #28]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c86:	23bc      	movs	r3, #188	; 0xbc
 8007c88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	2bbc      	cmp	r3, #188	; 0xbc
 8007c8e:	d00a      	beq.n	8007ca6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	61bb      	str	r3, [r7, #24]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ca6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d01e      	beq.n	8007cec <xTaskCreateStatic+0xac>
 8007cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01b      	beq.n	8007cec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9303      	str	r3, [sp, #12]
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	9302      	str	r3, [sp, #8]
 8007cce:	f107 0314 	add.w	r3, r7, #20
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 f850 	bl	8007d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ce6:	f000 f8f3 	bl	8007ed0 <prvAddNewTaskToReadyList>
 8007cea:	e001      	b.n	8007cf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007cec:	2300      	movs	r3, #0
 8007cee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007cf0:	697b      	ldr	r3, [r7, #20]
	}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3728      	adds	r7, #40	; 0x28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b08c      	sub	sp, #48	; 0x30
 8007cfe:	af04      	add	r7, sp, #16
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	603b      	str	r3, [r7, #0]
 8007d06:	4613      	mov	r3, r2
 8007d08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 fc5a 	bl	80095c8 <pvPortMalloc>
 8007d14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00e      	beq.n	8007d3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d1c:	20bc      	movs	r0, #188	; 0xbc
 8007d1e:	f001 fc53 	bl	80095c8 <pvPortMalloc>
 8007d22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8007d30:	e005      	b.n	8007d3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d32:	6978      	ldr	r0, [r7, #20]
 8007d34:	f001 fd14 	bl	8009760 <vPortFree>
 8007d38:	e001      	b.n	8007d3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d017      	beq.n	8007d74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d4c:	88fa      	ldrh	r2, [r7, #6]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9303      	str	r3, [sp, #12]
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	9302      	str	r3, [sp, #8]
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 f80e 	bl	8007d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d68:	69f8      	ldr	r0, [r7, #28]
 8007d6a:	f000 f8b1 	bl	8007ed0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	61bb      	str	r3, [r7, #24]
 8007d72:	e002      	b.n	8007d7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d74:	f04f 33ff 	mov.w	r3, #4294967295
 8007d78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
	}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b088      	sub	sp, #32
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	21a5      	movs	r1, #165	; 0xa5
 8007d9e:	f001 fe31 	bl	8009a04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007dac:	3b01      	subs	r3, #1
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <prvInitialiseNewTask+0x58>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	617b      	str	r3, [r7, #20]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01f      	beq.n	8007e22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007de2:	2300      	movs	r3, #0
 8007de4:	61fb      	str	r3, [r7, #28]
 8007de6:	e012      	b.n	8007e0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	4413      	add	r3, r2
 8007dee:	7819      	ldrb	r1, [r3, #0]
 8007df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	3334      	adds	r3, #52	; 0x34
 8007df8:	460a      	mov	r2, r1
 8007dfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	4413      	add	r3, r2
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d006      	beq.n	8007e16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	2b0f      	cmp	r3, #15
 8007e12:	d9e9      	bls.n	8007de8 <prvInitialiseNewTask+0x64>
 8007e14:	e000      	b.n	8007e18 <prvInitialiseNewTask+0x94>
			{
				break;
 8007e16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e20:	e003      	b.n	8007e2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	2b37      	cmp	r3, #55	; 0x37
 8007e2e:	d901      	bls.n	8007e34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e30:	2337      	movs	r3, #55	; 0x37
 8007e32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	2200      	movs	r2, #0
 8007e44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff f978 	bl	8007140 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	3318      	adds	r3, #24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff f973 	bl	8007140 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	3354      	adds	r3, #84	; 0x54
 8007e84:	2260      	movs	r2, #96	; 0x60
 8007e86:	2100      	movs	r1, #0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 fdbb 	bl	8009a04 <memset>
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	4a0c      	ldr	r2, [pc, #48]	; (8007ec4 <prvInitialiseNewTask+0x140>)
 8007e92:	659a      	str	r2, [r3, #88]	; 0x58
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	4a0c      	ldr	r2, [pc, #48]	; (8007ec8 <prvInitialiseNewTask+0x144>)
 8007e98:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	4a0b      	ldr	r2, [pc, #44]	; (8007ecc <prvInitialiseNewTask+0x148>)
 8007e9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	69b8      	ldr	r0, [r7, #24]
 8007ea6:	f001 f941 	bl	800912c <pxPortInitialiseStack>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ebc:	bf00      	nop
 8007ebe:	3720      	adds	r7, #32
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	08009cec 	.word	0x08009cec
 8007ec8:	08009d0c 	.word	0x08009d0c
 8007ecc:	08009ccc 	.word	0x08009ccc

08007ed0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ed8:	f001 fa54 	bl	8009384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007edc:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <prvAddNewTaskToReadyList+0xc4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	4a2c      	ldr	r2, [pc, #176]	; (8007f94 <prvAddNewTaskToReadyList+0xc4>)
 8007ee4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ee6:	4b2c      	ldr	r3, [pc, #176]	; (8007f98 <prvAddNewTaskToReadyList+0xc8>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d109      	bne.n	8007f02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007eee:	4a2a      	ldr	r2, [pc, #168]	; (8007f98 <prvAddNewTaskToReadyList+0xc8>)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ef4:	4b27      	ldr	r3, [pc, #156]	; (8007f94 <prvAddNewTaskToReadyList+0xc4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d110      	bne.n	8007f1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007efc:	f000 fc26 	bl	800874c <prvInitialiseTaskLists>
 8007f00:	e00d      	b.n	8007f1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f02:	4b26      	ldr	r3, [pc, #152]	; (8007f9c <prvAddNewTaskToReadyList+0xcc>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d109      	bne.n	8007f1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f0a:	4b23      	ldr	r3, [pc, #140]	; (8007f98 <prvAddNewTaskToReadyList+0xc8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d802      	bhi.n	8007f1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f18:	4a1f      	ldr	r2, [pc, #124]	; (8007f98 <prvAddNewTaskToReadyList+0xc8>)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f1e:	4b20      	ldr	r3, [pc, #128]	; (8007fa0 <prvAddNewTaskToReadyList+0xd0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3301      	adds	r3, #1
 8007f24:	4a1e      	ldr	r2, [pc, #120]	; (8007fa0 <prvAddNewTaskToReadyList+0xd0>)
 8007f26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f28:	4b1d      	ldr	r3, [pc, #116]	; (8007fa0 <prvAddNewTaskToReadyList+0xd0>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <prvAddNewTaskToReadyList+0xd4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d903      	bls.n	8007f44 <prvAddNewTaskToReadyList+0x74>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <prvAddNewTaskToReadyList+0xd4>)
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4a15      	ldr	r2, [pc, #84]	; (8007fa8 <prvAddNewTaskToReadyList+0xd8>)
 8007f52:	441a      	add	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f7ff f8fd 	bl	800715a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f60:	f001 fa40 	bl	80093e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f64:	4b0d      	ldr	r3, [pc, #52]	; (8007f9c <prvAddNewTaskToReadyList+0xcc>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00e      	beq.n	8007f8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <prvAddNewTaskToReadyList+0xc8>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d207      	bcs.n	8007f8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <prvAddNewTaskToReadyList+0xdc>)
 8007f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000fc4 	.word	0x20000fc4
 8007f98:	20000af0 	.word	0x20000af0
 8007f9c:	20000fd0 	.word	0x20000fd0
 8007fa0:	20000fe0 	.word	0x20000fe0
 8007fa4:	20000fcc 	.word	0x20000fcc
 8007fa8:	20000af4 	.word	0x20000af4
 8007fac:	e000ed04 	.word	0xe000ed04

08007fb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d017      	beq.n	8007ff2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fc2:	4b13      	ldr	r3, [pc, #76]	; (8008010 <vTaskDelay+0x60>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <vTaskDelay+0x30>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	60bb      	str	r3, [r7, #8]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fe0:	f000 f88a 	bl	80080f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fcfe 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fec:	f000 f892 	bl	8008114 <xTaskResumeAll>
 8007ff0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d107      	bne.n	8008008 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ff8:	4b06      	ldr	r3, [pc, #24]	; (8008014 <vTaskDelay+0x64>)
 8007ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20000fec 	.word	0x20000fec
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08a      	sub	sp, #40	; 0x28
 800801c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800801e:	2300      	movs	r3, #0
 8008020:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008026:	463a      	mov	r2, r7
 8008028:	1d39      	adds	r1, r7, #4
 800802a:	f107 0308 	add.w	r3, r7, #8
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff f832 	bl	8007098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	9202      	str	r2, [sp, #8]
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	2300      	movs	r3, #0
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	2300      	movs	r3, #0
 8008044:	460a      	mov	r2, r1
 8008046:	4924      	ldr	r1, [pc, #144]	; (80080d8 <vTaskStartScheduler+0xc0>)
 8008048:	4824      	ldr	r0, [pc, #144]	; (80080dc <vTaskStartScheduler+0xc4>)
 800804a:	f7ff fdf9 	bl	8007c40 <xTaskCreateStatic>
 800804e:	4603      	mov	r3, r0
 8008050:	4a23      	ldr	r2, [pc, #140]	; (80080e0 <vTaskStartScheduler+0xc8>)
 8008052:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008054:	4b22      	ldr	r3, [pc, #136]	; (80080e0 <vTaskStartScheduler+0xc8>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800805c:	2301      	movs	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	e001      	b.n	8008066 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d102      	bne.n	8008072 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800806c:	f000 fd10 	bl	8008a90 <xTimerCreateTimerTask>
 8008070:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d11b      	bne.n	80080b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	613b      	str	r3, [r7, #16]
}
 800808a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800808c:	4b15      	ldr	r3, [pc, #84]	; (80080e4 <vTaskStartScheduler+0xcc>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3354      	adds	r3, #84	; 0x54
 8008092:	4a15      	ldr	r2, [pc, #84]	; (80080e8 <vTaskStartScheduler+0xd0>)
 8008094:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008096:	4b15      	ldr	r3, [pc, #84]	; (80080ec <vTaskStartScheduler+0xd4>)
 8008098:	f04f 32ff 	mov.w	r2, #4294967295
 800809c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800809e:	4b14      	ldr	r3, [pc, #80]	; (80080f0 <vTaskStartScheduler+0xd8>)
 80080a0:	2201      	movs	r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080a4:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <vTaskStartScheduler+0xdc>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080aa:	f001 f8c9 	bl	8009240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080ae:	e00e      	b.n	80080ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d10a      	bne.n	80080ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	60fb      	str	r3, [r7, #12]
}
 80080ca:	bf00      	nop
 80080cc:	e7fe      	b.n	80080cc <vTaskStartScheduler+0xb4>
}
 80080ce:	bf00      	nop
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	08009c00 	.word	0x08009c00
 80080dc:	0800871d 	.word	0x0800871d
 80080e0:	20000fe8 	.word	0x20000fe8
 80080e4:	20000af0 	.word	0x20000af0
 80080e8:	20000010 	.word	0x20000010
 80080ec:	20000fe4 	.word	0x20000fe4
 80080f0:	20000fd0 	.word	0x20000fd0
 80080f4:	20000fc8 	.word	0x20000fc8

080080f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080fc:	4b04      	ldr	r3, [pc, #16]	; (8008110 <vTaskSuspendAll+0x18>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3301      	adds	r3, #1
 8008102:	4a03      	ldr	r2, [pc, #12]	; (8008110 <vTaskSuspendAll+0x18>)
 8008104:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008106:	bf00      	nop
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	20000fec 	.word	0x20000fec

08008114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800811e:	2300      	movs	r3, #0
 8008120:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008122:	4b42      	ldr	r3, [pc, #264]	; (800822c <xTaskResumeAll+0x118>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10a      	bne.n	8008140 <xTaskResumeAll+0x2c>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	603b      	str	r3, [r7, #0]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008140:	f001 f920 	bl	8009384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008144:	4b39      	ldr	r3, [pc, #228]	; (800822c <xTaskResumeAll+0x118>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3b01      	subs	r3, #1
 800814a:	4a38      	ldr	r2, [pc, #224]	; (800822c <xTaskResumeAll+0x118>)
 800814c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800814e:	4b37      	ldr	r3, [pc, #220]	; (800822c <xTaskResumeAll+0x118>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d162      	bne.n	800821c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008156:	4b36      	ldr	r3, [pc, #216]	; (8008230 <xTaskResumeAll+0x11c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d05e      	beq.n	800821c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800815e:	e02f      	b.n	80081c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008160:	4b34      	ldr	r3, [pc, #208]	; (8008234 <xTaskResumeAll+0x120>)
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3318      	adds	r3, #24
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff f851 	bl	8007214 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3304      	adds	r3, #4
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff f84c 	bl	8007214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	4b2d      	ldr	r3, [pc, #180]	; (8008238 <xTaskResumeAll+0x124>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d903      	bls.n	8008190 <xTaskResumeAll+0x7c>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	4a2a      	ldr	r2, [pc, #168]	; (8008238 <xTaskResumeAll+0x124>)
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4a27      	ldr	r2, [pc, #156]	; (800823c <xTaskResumeAll+0x128>)
 800819e:	441a      	add	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3304      	adds	r3, #4
 80081a4:	4619      	mov	r1, r3
 80081a6:	4610      	mov	r0, r2
 80081a8:	f7fe ffd7 	bl	800715a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b0:	4b23      	ldr	r3, [pc, #140]	; (8008240 <xTaskResumeAll+0x12c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d302      	bcc.n	80081c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80081ba:	4b22      	ldr	r3, [pc, #136]	; (8008244 <xTaskResumeAll+0x130>)
 80081bc:	2201      	movs	r2, #1
 80081be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081c0:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <xTaskResumeAll+0x120>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1cb      	bne.n	8008160 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081ce:	f000 fb5f 	bl	8008890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081d2:	4b1d      	ldr	r3, [pc, #116]	; (8008248 <xTaskResumeAll+0x134>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d010      	beq.n	8008200 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081de:	f000 f847 	bl	8008270 <xTaskIncrementTick>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80081e8:	4b16      	ldr	r3, [pc, #88]	; (8008244 <xTaskResumeAll+0x130>)
 80081ea:	2201      	movs	r2, #1
 80081ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1f1      	bne.n	80081de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80081fa:	4b13      	ldr	r3, [pc, #76]	; (8008248 <xTaskResumeAll+0x134>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <xTaskResumeAll+0x130>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d009      	beq.n	800821c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008208:	2301      	movs	r3, #1
 800820a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800820c:	4b0f      	ldr	r3, [pc, #60]	; (800824c <xTaskResumeAll+0x138>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800821c:	f001 f8e2 	bl	80093e4 <vPortExitCritical>

	return xAlreadyYielded;
 8008220:	68bb      	ldr	r3, [r7, #8]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000fec 	.word	0x20000fec
 8008230:	20000fc4 	.word	0x20000fc4
 8008234:	20000f84 	.word	0x20000f84
 8008238:	20000fcc 	.word	0x20000fcc
 800823c:	20000af4 	.word	0x20000af4
 8008240:	20000af0 	.word	0x20000af0
 8008244:	20000fd8 	.word	0x20000fd8
 8008248:	20000fd4 	.word	0x20000fd4
 800824c:	e000ed04 	.word	0xe000ed04

08008250 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008256:	4b05      	ldr	r3, [pc, #20]	; (800826c <xTaskGetTickCount+0x1c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800825c:	687b      	ldr	r3, [r7, #4]
}
 800825e:	4618      	mov	r0, r3
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	20000fc8 	.word	0x20000fc8

08008270 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008276:	2300      	movs	r3, #0
 8008278:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800827a:	4b4f      	ldr	r3, [pc, #316]	; (80083b8 <xTaskIncrementTick+0x148>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f040 808f 	bne.w	80083a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008284:	4b4d      	ldr	r3, [pc, #308]	; (80083bc <xTaskIncrementTick+0x14c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800828c:	4a4b      	ldr	r2, [pc, #300]	; (80083bc <xTaskIncrementTick+0x14c>)
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d120      	bne.n	80082da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008298:	4b49      	ldr	r3, [pc, #292]	; (80083c0 <xTaskIncrementTick+0x150>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00a      	beq.n	80082b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	603b      	str	r3, [r7, #0]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <xTaskIncrementTick+0x46>
 80082b8:	4b41      	ldr	r3, [pc, #260]	; (80083c0 <xTaskIncrementTick+0x150>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	4b41      	ldr	r3, [pc, #260]	; (80083c4 <xTaskIncrementTick+0x154>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a3f      	ldr	r2, [pc, #252]	; (80083c0 <xTaskIncrementTick+0x150>)
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	4a3f      	ldr	r2, [pc, #252]	; (80083c4 <xTaskIncrementTick+0x154>)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	4b3e      	ldr	r3, [pc, #248]	; (80083c8 <xTaskIncrementTick+0x158>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3301      	adds	r3, #1
 80082d2:	4a3d      	ldr	r2, [pc, #244]	; (80083c8 <xTaskIncrementTick+0x158>)
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	f000 fadb 	bl	8008890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082da:	4b3c      	ldr	r3, [pc, #240]	; (80083cc <xTaskIncrementTick+0x15c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d349      	bcc.n	8008378 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082e4:	4b36      	ldr	r3, [pc, #216]	; (80083c0 <xTaskIncrementTick+0x150>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ee:	4b37      	ldr	r3, [pc, #220]	; (80083cc <xTaskIncrementTick+0x15c>)
 80082f0:	f04f 32ff 	mov.w	r2, #4294967295
 80082f4:	601a      	str	r2, [r3, #0]
					break;
 80082f6:	e03f      	b.n	8008378 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f8:	4b31      	ldr	r3, [pc, #196]	; (80083c0 <xTaskIncrementTick+0x150>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	429a      	cmp	r2, r3
 800830e:	d203      	bcs.n	8008318 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008310:	4a2e      	ldr	r2, [pc, #184]	; (80083cc <xTaskIncrementTick+0x15c>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008316:	e02f      	b.n	8008378 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	3304      	adds	r3, #4
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe ff79 	bl	8007214 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	2b00      	cmp	r3, #0
 8008328:	d004      	beq.n	8008334 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	3318      	adds	r3, #24
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe ff70 	bl	8007214 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008338:	4b25      	ldr	r3, [pc, #148]	; (80083d0 <xTaskIncrementTick+0x160>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d903      	bls.n	8008348 <xTaskIncrementTick+0xd8>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	4a22      	ldr	r2, [pc, #136]	; (80083d0 <xTaskIncrementTick+0x160>)
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	4613      	mov	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4a1f      	ldr	r2, [pc, #124]	; (80083d4 <xTaskIncrementTick+0x164>)
 8008356:	441a      	add	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	3304      	adds	r3, #4
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f7fe fefb 	bl	800715a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008368:	4b1b      	ldr	r3, [pc, #108]	; (80083d8 <xTaskIncrementTick+0x168>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	429a      	cmp	r2, r3
 8008370:	d3b8      	bcc.n	80082e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008372:	2301      	movs	r3, #1
 8008374:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008376:	e7b5      	b.n	80082e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008378:	4b17      	ldr	r3, [pc, #92]	; (80083d8 <xTaskIncrementTick+0x168>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837e:	4915      	ldr	r1, [pc, #84]	; (80083d4 <xTaskIncrementTick+0x164>)
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	440b      	add	r3, r1
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d901      	bls.n	8008394 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008390:	2301      	movs	r3, #1
 8008392:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008394:	4b11      	ldr	r3, [pc, #68]	; (80083dc <xTaskIncrementTick+0x16c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d007      	beq.n	80083ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800839c:	2301      	movs	r3, #1
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	e004      	b.n	80083ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083a2:	4b0f      	ldr	r3, [pc, #60]	; (80083e0 <xTaskIncrementTick+0x170>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3301      	adds	r3, #1
 80083a8:	4a0d      	ldr	r2, [pc, #52]	; (80083e0 <xTaskIncrementTick+0x170>)
 80083aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083ac:	697b      	ldr	r3, [r7, #20]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20000fec 	.word	0x20000fec
 80083bc:	20000fc8 	.word	0x20000fc8
 80083c0:	20000f7c 	.word	0x20000f7c
 80083c4:	20000f80 	.word	0x20000f80
 80083c8:	20000fdc 	.word	0x20000fdc
 80083cc:	20000fe4 	.word	0x20000fe4
 80083d0:	20000fcc 	.word	0x20000fcc
 80083d4:	20000af4 	.word	0x20000af4
 80083d8:	20000af0 	.word	0x20000af0
 80083dc:	20000fd8 	.word	0x20000fd8
 80083e0:	20000fd4 	.word	0x20000fd4

080083e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083ea:	4b2a      	ldr	r3, [pc, #168]	; (8008494 <vTaskSwitchContext+0xb0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083f2:	4b29      	ldr	r3, [pc, #164]	; (8008498 <vTaskSwitchContext+0xb4>)
 80083f4:	2201      	movs	r2, #1
 80083f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083f8:	e046      	b.n	8008488 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80083fa:	4b27      	ldr	r3, [pc, #156]	; (8008498 <vTaskSwitchContext+0xb4>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008400:	4b26      	ldr	r3, [pc, #152]	; (800849c <vTaskSwitchContext+0xb8>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	e010      	b.n	800842a <vTaskSwitchContext+0x46>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <vTaskSwitchContext+0x40>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <vTaskSwitchContext+0x3e>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3b01      	subs	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	491d      	ldr	r1, [pc, #116]	; (80084a0 <vTaskSwitchContext+0xbc>)
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	440b      	add	r3, r1
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0e4      	beq.n	8008408 <vTaskSwitchContext+0x24>
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4613      	mov	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4a15      	ldr	r2, [pc, #84]	; (80084a0 <vTaskSwitchContext+0xbc>)
 800844a:	4413      	add	r3, r2
 800844c:	60bb      	str	r3, [r7, #8]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	605a      	str	r2, [r3, #4]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	3308      	adds	r3, #8
 8008460:	429a      	cmp	r2, r3
 8008462:	d104      	bne.n	800846e <vTaskSwitchContext+0x8a>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	4a0b      	ldr	r2, [pc, #44]	; (80084a4 <vTaskSwitchContext+0xc0>)
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	4a08      	ldr	r2, [pc, #32]	; (800849c <vTaskSwitchContext+0xb8>)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800847e:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <vTaskSwitchContext+0xc0>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3354      	adds	r3, #84	; 0x54
 8008484:	4a08      	ldr	r2, [pc, #32]	; (80084a8 <vTaskSwitchContext+0xc4>)
 8008486:	6013      	str	r3, [r2, #0]
}
 8008488:	bf00      	nop
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	20000fec 	.word	0x20000fec
 8008498:	20000fd8 	.word	0x20000fd8
 800849c:	20000fcc 	.word	0x20000fcc
 80084a0:	20000af4 	.word	0x20000af4
 80084a4:	20000af0 	.word	0x20000af0
 80084a8:	20000010 	.word	0x20000010

080084ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	60fb      	str	r3, [r7, #12]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084d2:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <vTaskPlaceOnEventList+0x44>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3318      	adds	r3, #24
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fe fe61 	bl	80071a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084e0:	2101      	movs	r1, #1
 80084e2:	6838      	ldr	r0, [r7, #0]
 80084e4:	f000 fa80 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
}
 80084e8:	bf00      	nop
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20000af0 	.word	0x20000af0

080084f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10a      	bne.n	800851c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	617b      	str	r3, [r7, #20]
}
 8008518:	bf00      	nop
 800851a:	e7fe      	b.n	800851a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <vTaskPlaceOnEventListRestricted+0x54>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3318      	adds	r3, #24
 8008522:	4619      	mov	r1, r3
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f7fe fe18 	bl	800715a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008530:	f04f 33ff 	mov.w	r3, #4294967295
 8008534:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	68b8      	ldr	r0, [r7, #8]
 800853a:	f000 fa55 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
	}
 800853e:	bf00      	nop
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000af0 	.word	0x20000af0

0800854c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10a      	bne.n	8008578 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	60fb      	str	r3, [r7, #12]
}
 8008574:	bf00      	nop
 8008576:	e7fe      	b.n	8008576 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	3318      	adds	r3, #24
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe fe49 	bl	8007214 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008582:	4b1e      	ldr	r3, [pc, #120]	; (80085fc <xTaskRemoveFromEventList+0xb0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d11d      	bne.n	80085c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	3304      	adds	r3, #4
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fe40 	bl	8007214 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008598:	4b19      	ldr	r3, [pc, #100]	; (8008600 <xTaskRemoveFromEventList+0xb4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	429a      	cmp	r2, r3
 800859e:	d903      	bls.n	80085a8 <xTaskRemoveFromEventList+0x5c>
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a4:	4a16      	ldr	r2, [pc, #88]	; (8008600 <xTaskRemoveFromEventList+0xb4>)
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ac:	4613      	mov	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4a13      	ldr	r2, [pc, #76]	; (8008604 <xTaskRemoveFromEventList+0xb8>)
 80085b6:	441a      	add	r2, r3
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	3304      	adds	r3, #4
 80085bc:	4619      	mov	r1, r3
 80085be:	4610      	mov	r0, r2
 80085c0:	f7fe fdcb 	bl	800715a <vListInsertEnd>
 80085c4:	e005      	b.n	80085d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	3318      	adds	r3, #24
 80085ca:	4619      	mov	r1, r3
 80085cc:	480e      	ldr	r0, [pc, #56]	; (8008608 <xTaskRemoveFromEventList+0xbc>)
 80085ce:	f7fe fdc4 	bl	800715a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d6:	4b0d      	ldr	r3, [pc, #52]	; (800860c <xTaskRemoveFromEventList+0xc0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	429a      	cmp	r2, r3
 80085de:	d905      	bls.n	80085ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085e0:	2301      	movs	r3, #1
 80085e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085e4:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <xTaskRemoveFromEventList+0xc4>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e001      	b.n	80085f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085ec:	2300      	movs	r3, #0
 80085ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085f0:	697b      	ldr	r3, [r7, #20]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000fec 	.word	0x20000fec
 8008600:	20000fcc 	.word	0x20000fcc
 8008604:	20000af4 	.word	0x20000af4
 8008608:	20000f84 	.word	0x20000f84
 800860c:	20000af0 	.word	0x20000af0
 8008610:	20000fd8 	.word	0x20000fd8

08008614 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <vTaskInternalSetTimeOutState+0x24>)
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008624:	4b05      	ldr	r3, [pc, #20]	; (800863c <vTaskInternalSetTimeOutState+0x28>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	605a      	str	r2, [r3, #4]
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	20000fdc 	.word	0x20000fdc
 800863c:	20000fc8 	.word	0x20000fc8

08008640 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	613b      	str	r3, [r7, #16]
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10a      	bne.n	8008682 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	60fb      	str	r3, [r7, #12]
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008682:	f000 fe7f 	bl	8009384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008686:	4b1d      	ldr	r3, [pc, #116]	; (80086fc <xTaskCheckForTimeOut+0xbc>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869e:	d102      	bne.n	80086a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61fb      	str	r3, [r7, #28]
 80086a4:	e023      	b.n	80086ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4b15      	ldr	r3, [pc, #84]	; (8008700 <xTaskCheckForTimeOut+0xc0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d007      	beq.n	80086c2 <xTaskCheckForTimeOut+0x82>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d302      	bcc.n	80086c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	e015      	b.n	80086ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d20b      	bcs.n	80086e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	1ad2      	subs	r2, r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff ff9b 	bl	8008614 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086de:	2300      	movs	r3, #0
 80086e0:	61fb      	str	r3, [r7, #28]
 80086e2:	e004      	b.n	80086ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086ea:	2301      	movs	r3, #1
 80086ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086ee:	f000 fe79 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 80086f2:	69fb      	ldr	r3, [r7, #28]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3720      	adds	r7, #32
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20000fc8 	.word	0x20000fc8
 8008700:	20000fdc 	.word	0x20000fdc

08008704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008708:	4b03      	ldr	r3, [pc, #12]	; (8008718 <vTaskMissedYield+0x14>)
 800870a:	2201      	movs	r2, #1
 800870c:	601a      	str	r2, [r3, #0]
}
 800870e:	bf00      	nop
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	20000fd8 	.word	0x20000fd8

0800871c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008724:	f000 f852 	bl	80087cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008728:	4b06      	ldr	r3, [pc, #24]	; (8008744 <prvIdleTask+0x28>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d9f9      	bls.n	8008724 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008730:	4b05      	ldr	r3, [pc, #20]	; (8008748 <prvIdleTask+0x2c>)
 8008732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008740:	e7f0      	b.n	8008724 <prvIdleTask+0x8>
 8008742:	bf00      	nop
 8008744:	20000af4 	.word	0x20000af4
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008752:	2300      	movs	r3, #0
 8008754:	607b      	str	r3, [r7, #4]
 8008756:	e00c      	b.n	8008772 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4a12      	ldr	r2, [pc, #72]	; (80087ac <prvInitialiseTaskLists+0x60>)
 8008764:	4413      	add	r3, r2
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fcca 	bl	8007100 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3301      	adds	r3, #1
 8008770:	607b      	str	r3, [r7, #4]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b37      	cmp	r3, #55	; 0x37
 8008776:	d9ef      	bls.n	8008758 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008778:	480d      	ldr	r0, [pc, #52]	; (80087b0 <prvInitialiseTaskLists+0x64>)
 800877a:	f7fe fcc1 	bl	8007100 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800877e:	480d      	ldr	r0, [pc, #52]	; (80087b4 <prvInitialiseTaskLists+0x68>)
 8008780:	f7fe fcbe 	bl	8007100 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008784:	480c      	ldr	r0, [pc, #48]	; (80087b8 <prvInitialiseTaskLists+0x6c>)
 8008786:	f7fe fcbb 	bl	8007100 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800878a:	480c      	ldr	r0, [pc, #48]	; (80087bc <prvInitialiseTaskLists+0x70>)
 800878c:	f7fe fcb8 	bl	8007100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008790:	480b      	ldr	r0, [pc, #44]	; (80087c0 <prvInitialiseTaskLists+0x74>)
 8008792:	f7fe fcb5 	bl	8007100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008796:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <prvInitialiseTaskLists+0x78>)
 8008798:	4a05      	ldr	r2, [pc, #20]	; (80087b0 <prvInitialiseTaskLists+0x64>)
 800879a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800879c:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <prvInitialiseTaskLists+0x7c>)
 800879e:	4a05      	ldr	r2, [pc, #20]	; (80087b4 <prvInitialiseTaskLists+0x68>)
 80087a0:	601a      	str	r2, [r3, #0]
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20000af4 	.word	0x20000af4
 80087b0:	20000f54 	.word	0x20000f54
 80087b4:	20000f68 	.word	0x20000f68
 80087b8:	20000f84 	.word	0x20000f84
 80087bc:	20000f98 	.word	0x20000f98
 80087c0:	20000fb0 	.word	0x20000fb0
 80087c4:	20000f7c 	.word	0x20000f7c
 80087c8:	20000f80 	.word	0x20000f80

080087cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087d2:	e019      	b.n	8008808 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087d4:	f000 fdd6 	bl	8009384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d8:	4b10      	ldr	r3, [pc, #64]	; (800881c <prvCheckTasksWaitingTermination+0x50>)
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe fd15 	bl	8007214 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087ea:	4b0d      	ldr	r3, [pc, #52]	; (8008820 <prvCheckTasksWaitingTermination+0x54>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	4a0b      	ldr	r2, [pc, #44]	; (8008820 <prvCheckTasksWaitingTermination+0x54>)
 80087f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087f4:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <prvCheckTasksWaitingTermination+0x58>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	4a0a      	ldr	r2, [pc, #40]	; (8008824 <prvCheckTasksWaitingTermination+0x58>)
 80087fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087fe:	f000 fdf1 	bl	80093e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f810 	bl	8008828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008808:	4b06      	ldr	r3, [pc, #24]	; (8008824 <prvCheckTasksWaitingTermination+0x58>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e1      	bne.n	80087d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000f98 	.word	0x20000f98
 8008820:	20000fc4 	.word	0x20000fc4
 8008824:	20000fac 	.word	0x20000fac

08008828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3354      	adds	r3, #84	; 0x54
 8008834:	4618      	mov	r0, r3
 8008836:	f001 f8fb 	bl	8009a30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008840:	2b00      	cmp	r3, #0
 8008842:	d108      	bne.n	8008856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008848:	4618      	mov	r0, r3
 800884a:	f000 ff89 	bl	8009760 <vPortFree>
				vPortFree( pxTCB );
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 ff86 	bl	8009760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008854:	e018      	b.n	8008888 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800885c:	2b01      	cmp	r3, #1
 800885e:	d103      	bne.n	8008868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 ff7d 	bl	8009760 <vPortFree>
	}
 8008866:	e00f      	b.n	8008888 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800886e:	2b02      	cmp	r3, #2
 8008870:	d00a      	beq.n	8008888 <prvDeleteTCB+0x60>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	60fb      	str	r3, [r7, #12]
}
 8008884:	bf00      	nop
 8008886:	e7fe      	b.n	8008886 <prvDeleteTCB+0x5e>
	}
 8008888:	bf00      	nop
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <prvResetNextTaskUnblockTime+0x38>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <prvResetNextTaskUnblockTime+0x3c>)
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295
 80088a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088a8:	e008      	b.n	80088bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088aa:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <prvResetNextTaskUnblockTime+0x38>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	4a04      	ldr	r2, [pc, #16]	; (80088cc <prvResetNextTaskUnblockTime+0x3c>)
 80088ba:	6013      	str	r3, [r2, #0]
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	20000f7c 	.word	0x20000f7c
 80088cc:	20000fe4 	.word	0x20000fe4

080088d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088d6:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <xTaskGetSchedulerState+0x34>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d102      	bne.n	80088e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088de:	2301      	movs	r3, #1
 80088e0:	607b      	str	r3, [r7, #4]
 80088e2:	e008      	b.n	80088f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088e4:	4b08      	ldr	r3, [pc, #32]	; (8008908 <xTaskGetSchedulerState+0x38>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088ec:	2302      	movs	r3, #2
 80088ee:	607b      	str	r3, [r7, #4]
 80088f0:	e001      	b.n	80088f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088f2:	2300      	movs	r3, #0
 80088f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088f6:	687b      	ldr	r3, [r7, #4]
	}
 80088f8:	4618      	mov	r0, r3
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	20000fd0 	.word	0x20000fd0
 8008908:	20000fec 	.word	0x20000fec

0800890c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008918:	2300      	movs	r3, #0
 800891a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d056      	beq.n	80089d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008922:	4b2e      	ldr	r3, [pc, #184]	; (80089dc <xTaskPriorityDisinherit+0xd0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	429a      	cmp	r2, r3
 800892a:	d00a      	beq.n	8008942 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	60fb      	str	r3, [r7, #12]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10a      	bne.n	8008960 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	60bb      	str	r3, [r7, #8]
}
 800895c:	bf00      	nop
 800895e:	e7fe      	b.n	800895e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008964:	1e5a      	subs	r2, r3, #1
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008972:	429a      	cmp	r2, r3
 8008974:	d02c      	beq.n	80089d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800897a:	2b00      	cmp	r3, #0
 800897c:	d128      	bne.n	80089d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	3304      	adds	r3, #4
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fc46 	bl	8007214 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <xTaskPriorityDisinherit+0xd4>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d903      	bls.n	80089b0 <xTaskPriorityDisinherit+0xa4>
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	4a0c      	ldr	r2, [pc, #48]	; (80089e0 <xTaskPriorityDisinherit+0xd4>)
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4a09      	ldr	r2, [pc, #36]	; (80089e4 <xTaskPriorityDisinherit+0xd8>)
 80089be:	441a      	add	r2, r3
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f7fe fbc7 	bl	800715a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089cc:	2301      	movs	r3, #1
 80089ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089d0:	697b      	ldr	r3, [r7, #20]
	}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20000af0 	.word	0x20000af0
 80089e0:	20000fcc 	.word	0x20000fcc
 80089e4:	20000af4 	.word	0x20000af4

080089e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089f2:	4b21      	ldr	r3, [pc, #132]	; (8008a78 <prvAddCurrentTaskToDelayedList+0x90>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f8:	4b20      	ldr	r3, [pc, #128]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fc08 	bl	8007214 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0a:	d10a      	bne.n	8008a22 <prvAddCurrentTaskToDelayedList+0x3a>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d007      	beq.n	8008a22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a12:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4819      	ldr	r0, [pc, #100]	; (8008a80 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a1c:	f7fe fb9d 	bl	800715a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a20:	e026      	b.n	8008a70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4413      	add	r3, r2
 8008a28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a2a:	4b14      	ldr	r3, [pc, #80]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d209      	bcs.n	8008a4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a3a:	4b12      	ldr	r3, [pc, #72]	; (8008a84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f7fe fbab 	bl	80071a2 <vListInsert>
}
 8008a4c:	e010      	b.n	8008a70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3304      	adds	r3, #4
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	f7fe fba1 	bl	80071a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a60:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d202      	bcs.n	8008a70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a6a:	4a08      	ldr	r2, [pc, #32]	; (8008a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	6013      	str	r3, [r2, #0]
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20000fc8 	.word	0x20000fc8
 8008a7c:	20000af0 	.word	0x20000af0
 8008a80:	20000fb0 	.word	0x20000fb0
 8008a84:	20000f80 	.word	0x20000f80
 8008a88:	20000f7c 	.word	0x20000f7c
 8008a8c:	20000fe4 	.word	0x20000fe4

08008a90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08a      	sub	sp, #40	; 0x28
 8008a94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a9a:	f000 fb07 	bl	80090ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <xTimerCreateTimerTask+0x80>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d021      	beq.n	8008aea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008aae:	1d3a      	adds	r2, r7, #4
 8008ab0:	f107 0108 	add.w	r1, r7, #8
 8008ab4:	f107 030c 	add.w	r3, r7, #12
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe fb07 	bl	80070cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	9202      	str	r2, [sp, #8]
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	2302      	movs	r3, #2
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	2300      	movs	r3, #0
 8008ace:	460a      	mov	r2, r1
 8008ad0:	4910      	ldr	r1, [pc, #64]	; (8008b14 <xTimerCreateTimerTask+0x84>)
 8008ad2:	4811      	ldr	r0, [pc, #68]	; (8008b18 <xTimerCreateTimerTask+0x88>)
 8008ad4:	f7ff f8b4 	bl	8007c40 <xTaskCreateStatic>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	4a10      	ldr	r2, [pc, #64]	; (8008b1c <xTimerCreateTimerTask+0x8c>)
 8008adc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <xTimerCreateTimerTask+0x8c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	613b      	str	r3, [r7, #16]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b06:	697b      	ldr	r3, [r7, #20]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20001020 	.word	0x20001020
 8008b14:	08009c08 	.word	0x08009c08
 8008b18:	08008c55 	.word	0x08008c55
 8008b1c:	20001024 	.word	0x20001024

08008b20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08a      	sub	sp, #40	; 0x28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10a      	bne.n	8008b4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	623b      	str	r3, [r7, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	e7fe      	b.n	8008b4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b4e:	4b1a      	ldr	r3, [pc, #104]	; (8008bb8 <xTimerGenericCommand+0x98>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d02a      	beq.n	8008bac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b05      	cmp	r3, #5
 8008b66:	dc18      	bgt.n	8008b9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b68:	f7ff feb2 	bl	80088d0 <xTaskGetSchedulerState>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d109      	bne.n	8008b86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <xTimerGenericCommand+0x98>)
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	f107 0110 	add.w	r1, r7, #16
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7e:	f7fe fc77 	bl	8007470 <xQueueGenericSend>
 8008b82:	6278      	str	r0, [r7, #36]	; 0x24
 8008b84:	e012      	b.n	8008bac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <xTimerGenericCommand+0x98>)
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	f107 0110 	add.w	r1, r7, #16
 8008b8e:	2300      	movs	r3, #0
 8008b90:	2200      	movs	r2, #0
 8008b92:	f7fe fc6d 	bl	8007470 <xQueueGenericSend>
 8008b96:	6278      	str	r0, [r7, #36]	; 0x24
 8008b98:	e008      	b.n	8008bac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b9a:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <xTimerGenericCommand+0x98>)
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	f107 0110 	add.w	r1, r7, #16
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	f7fe fd61 	bl	800766c <xQueueGenericSendFromISR>
 8008baa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3728      	adds	r7, #40	; 0x28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20001020 	.word	0x20001020

08008bbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc6:	4b22      	ldr	r3, [pc, #136]	; (8008c50 <prvProcessExpiredTimer+0x94>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe fb1d 	bl	8007214 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d022      	beq.n	8008c2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	18d1      	adds	r1, r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	6978      	ldr	r0, [r7, #20]
 8008bf6:	f000 f8d1 	bl	8008d9c <prvInsertTimerInActiveList>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01f      	beq.n	8008c40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c00:	2300      	movs	r3, #0
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	2300      	movs	r3, #0
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	6978      	ldr	r0, [r7, #20]
 8008c0c:	f7ff ff88 	bl	8008b20 <xTimerGenericCommand>
 8008c10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d113      	bne.n	8008c40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	60fb      	str	r3, [r7, #12]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c34:	f023 0301 	bic.w	r3, r3, #1
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	6978      	ldr	r0, [r7, #20]
 8008c46:	4798      	blx	r3
}
 8008c48:	bf00      	nop
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	20001018 	.word	0x20001018

08008c54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c5c:	f107 0308 	add.w	r3, r7, #8
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 f857 	bl	8008d14 <prvGetNextExpireTime>
 8008c66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 f803 	bl	8008c78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c72:	f000 f8d5 	bl	8008e20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c76:	e7f1      	b.n	8008c5c <prvTimerTask+0x8>

08008c78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c82:	f7ff fa39 	bl	80080f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c86:	f107 0308 	add.w	r3, r7, #8
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 f866 	bl	8008d5c <prvSampleTimeNow>
 8008c90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d130      	bne.n	8008cfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10a      	bne.n	8008cb4 <prvProcessTimerOrBlockTask+0x3c>
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d806      	bhi.n	8008cb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ca6:	f7ff fa35 	bl	8008114 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff ff85 	bl	8008bbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008cb2:	e024      	b.n	8008cfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d008      	beq.n	8008ccc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cba:	4b13      	ldr	r3, [pc, #76]	; (8008d08 <prvProcessTimerOrBlockTask+0x90>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <prvProcessTimerOrBlockTask+0x50>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e000      	b.n	8008cca <prvProcessTimerOrBlockTask+0x52>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ccc:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <prvProcessTimerOrBlockTask+0x94>)
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	f7fe ff7d 	bl	8007bd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008cde:	f7ff fa19 	bl	8008114 <xTaskResumeAll>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ce8:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <prvProcessTimerOrBlockTask+0x98>)
 8008cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	f3bf 8f6f 	isb	sy
}
 8008cf8:	e001      	b.n	8008cfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008cfa:	f7ff fa0b 	bl	8008114 <xTaskResumeAll>
}
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	2000101c 	.word	0x2000101c
 8008d0c:	20001020 	.word	0x20001020
 8008d10:	e000ed04 	.word	0xe000ed04

08008d14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <prvGetNextExpireTime+0x44>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <prvGetNextExpireTime+0x16>
 8008d26:	2201      	movs	r2, #1
 8008d28:	e000      	b.n	8008d2c <prvGetNextExpireTime+0x18>
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d105      	bne.n	8008d44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d38:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <prvGetNextExpireTime+0x44>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	e001      	b.n	8008d48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d48:	68fb      	ldr	r3, [r7, #12]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	20001018 	.word	0x20001018

08008d5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d64:	f7ff fa74 	bl	8008250 <xTaskGetTickCount>
 8008d68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d6a:	4b0b      	ldr	r3, [pc, #44]	; (8008d98 <prvSampleTimeNow+0x3c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d205      	bcs.n	8008d80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d74:	f000 f936 	bl	8008fe4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	e002      	b.n	8008d86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d86:	4a04      	ldr	r2, [pc, #16]	; (8008d98 <prvSampleTimeNow+0x3c>)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	20001028 	.word	0x20001028

08008d9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d812      	bhi.n	8008de8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	1ad2      	subs	r2, r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d302      	bcc.n	8008dd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e01b      	b.n	8008e0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008dd6:	4b10      	ldr	r3, [pc, #64]	; (8008e18 <prvInsertTimerInActiveList+0x7c>)
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	4619      	mov	r1, r3
 8008de0:	4610      	mov	r0, r2
 8008de2:	f7fe f9de 	bl	80071a2 <vListInsert>
 8008de6:	e012      	b.n	8008e0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d206      	bcs.n	8008dfe <prvInsertTimerInActiveList+0x62>
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d302      	bcc.n	8008dfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e007      	b.n	8008e0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dfe:	4b07      	ldr	r3, [pc, #28]	; (8008e1c <prvInsertTimerInActiveList+0x80>)
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4619      	mov	r1, r3
 8008e08:	4610      	mov	r0, r2
 8008e0a:	f7fe f9ca 	bl	80071a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e0e:	697b      	ldr	r3, [r7, #20]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	2000101c 	.word	0x2000101c
 8008e1c:	20001018 	.word	0x20001018

08008e20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08e      	sub	sp, #56	; 0x38
 8008e24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e26:	e0ca      	b.n	8008fbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	da18      	bge.n	8008e60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e2e:	1d3b      	adds	r3, r7, #4
 8008e30:	3304      	adds	r3, #4
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10a      	bne.n	8008e50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	61fb      	str	r3, [r7, #28]
}
 8008e4c:	bf00      	nop
 8008e4e:	e7fe      	b.n	8008e4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e56:	6850      	ldr	r0, [r2, #4]
 8008e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e5a:	6892      	ldr	r2, [r2, #8]
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f2c0 80aa 	blt.w	8008fbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d004      	beq.n	8008e7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	3304      	adds	r3, #4
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe f9cb 	bl	8007214 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e7e:	463b      	mov	r3, r7
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff ff6b 	bl	8008d5c <prvSampleTimeNow>
 8008e86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b09      	cmp	r3, #9
 8008e8c:	f200 8097 	bhi.w	8008fbe <prvProcessReceivedCommands+0x19e>
 8008e90:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <prvProcessReceivedCommands+0x78>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008ec1 	.word	0x08008ec1
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008ec1 	.word	0x08008ec1
 8008ea4:	08008f35 	.word	0x08008f35
 8008ea8:	08008f49 	.word	0x08008f49
 8008eac:	08008f93 	.word	0x08008f93
 8008eb0:	08008ec1 	.word	0x08008ec1
 8008eb4:	08008ec1 	.word	0x08008ec1
 8008eb8:	08008f35 	.word	0x08008f35
 8008ebc:	08008f49 	.word	0x08008f49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ec6:	f043 0301 	orr.w	r3, r3, #1
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	18d1      	adds	r1, r2, r3
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ee0:	f7ff ff5c 	bl	8008d9c <prvInsertTimerInActiveList>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d069      	beq.n	8008fbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ef0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ef8:	f003 0304 	and.w	r3, r3, #4
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d05e      	beq.n	8008fbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	441a      	add	r2, r3
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2100      	movs	r1, #0
 8008f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f12:	f7ff fe05 	bl	8008b20 <xTimerGenericCommand>
 8008f16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d14f      	bne.n	8008fbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	61bb      	str	r3, [r7, #24]
}
 8008f30:	bf00      	nop
 8008f32:	e7fe      	b.n	8008f32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f3a:	f023 0301 	bic.w	r3, r3, #1
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008f46:	e03a      	b.n	8008fbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f4e:	f043 0301 	orr.w	r3, r3, #1
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	617b      	str	r3, [r7, #20]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	18d1      	adds	r1, r2, r3
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f8c:	f7ff ff06 	bl	8008d9c <prvInsertTimerInActiveList>
					break;
 8008f90:	e015      	b.n	8008fbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d103      	bne.n	8008fa8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fa2:	f000 fbdd 	bl	8009760 <vPortFree>
 8008fa6:	e00a      	b.n	8008fbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fae:	f023 0301 	bic.w	r3, r3, #1
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008fba:	e000      	b.n	8008fbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008fbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fbe:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <prvProcessReceivedCommands+0x1c0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	1d39      	adds	r1, r7, #4
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe fbec 	bl	80077a4 <xQueueReceive>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f47f af2a 	bne.w	8008e28 <prvProcessReceivedCommands+0x8>
	}
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	3730      	adds	r7, #48	; 0x30
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20001020 	.word	0x20001020

08008fe4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fea:	e048      	b.n	800907e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fec:	4b2d      	ldr	r3, [pc, #180]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ff6:	4b2b      	ldr	r3, [pc, #172]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3304      	adds	r3, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe f905 	bl	8007214 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009018:	f003 0304 	and.w	r3, r3, #4
 800901c:	2b00      	cmp	r3, #0
 800901e:	d02e      	beq.n	800907e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	4413      	add	r3, r2
 8009028:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	429a      	cmp	r2, r3
 8009030:	d90e      	bls.n	8009050 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800903e:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3304      	adds	r3, #4
 8009046:	4619      	mov	r1, r3
 8009048:	4610      	mov	r0, r2
 800904a:	f7fe f8aa 	bl	80071a2 <vListInsert>
 800904e:	e016      	b.n	800907e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009050:	2300      	movs	r3, #0
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	2100      	movs	r1, #0
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f7ff fd60 	bl	8008b20 <xTimerGenericCommand>
 8009060:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	603b      	str	r3, [r7, #0]
}
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800907e:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1b1      	bne.n	8008fec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009088:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800908e:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <prvSwitchTimerLists+0xc4>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a04      	ldr	r2, [pc, #16]	; (80090a4 <prvSwitchTimerLists+0xc0>)
 8009094:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009096:	4a04      	ldr	r2, [pc, #16]	; (80090a8 <prvSwitchTimerLists+0xc4>)
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	6013      	str	r3, [r2, #0]
}
 800909c:	bf00      	nop
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20001018 	.word	0x20001018
 80090a8:	2000101c 	.word	0x2000101c

080090ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80090b2:	f000 f967 	bl	8009384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80090b6:	4b15      	ldr	r3, [pc, #84]	; (800910c <prvCheckForValidListAndQueue+0x60>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d120      	bne.n	8009100 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80090be:	4814      	ldr	r0, [pc, #80]	; (8009110 <prvCheckForValidListAndQueue+0x64>)
 80090c0:	f7fe f81e 	bl	8007100 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80090c4:	4813      	ldr	r0, [pc, #76]	; (8009114 <prvCheckForValidListAndQueue+0x68>)
 80090c6:	f7fe f81b 	bl	8007100 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80090ca:	4b13      	ldr	r3, [pc, #76]	; (8009118 <prvCheckForValidListAndQueue+0x6c>)
 80090cc:	4a10      	ldr	r2, [pc, #64]	; (8009110 <prvCheckForValidListAndQueue+0x64>)
 80090ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80090d0:	4b12      	ldr	r3, [pc, #72]	; (800911c <prvCheckForValidListAndQueue+0x70>)
 80090d2:	4a10      	ldr	r2, [pc, #64]	; (8009114 <prvCheckForValidListAndQueue+0x68>)
 80090d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80090d6:	2300      	movs	r3, #0
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	4b11      	ldr	r3, [pc, #68]	; (8009120 <prvCheckForValidListAndQueue+0x74>)
 80090dc:	4a11      	ldr	r2, [pc, #68]	; (8009124 <prvCheckForValidListAndQueue+0x78>)
 80090de:	2110      	movs	r1, #16
 80090e0:	200a      	movs	r0, #10
 80090e2:	f7fe f929 	bl	8007338 <xQueueGenericCreateStatic>
 80090e6:	4603      	mov	r3, r0
 80090e8:	4a08      	ldr	r2, [pc, #32]	; (800910c <prvCheckForValidListAndQueue+0x60>)
 80090ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80090ec:	4b07      	ldr	r3, [pc, #28]	; (800910c <prvCheckForValidListAndQueue+0x60>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80090f4:	4b05      	ldr	r3, [pc, #20]	; (800910c <prvCheckForValidListAndQueue+0x60>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	490b      	ldr	r1, [pc, #44]	; (8009128 <prvCheckForValidListAndQueue+0x7c>)
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fe fd42 	bl	8007b84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009100:	f000 f970 	bl	80093e4 <vPortExitCritical>
}
 8009104:	bf00      	nop
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20001020 	.word	0x20001020
 8009110:	20000ff0 	.word	0x20000ff0
 8009114:	20001004 	.word	0x20001004
 8009118:	20001018 	.word	0x20001018
 800911c:	2000101c 	.word	0x2000101c
 8009120:	200010cc 	.word	0x200010cc
 8009124:	2000102c 	.word	0x2000102c
 8009128:	08009c10 	.word	0x08009c10

0800912c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3b04      	subs	r3, #4
 800913c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3b04      	subs	r3, #4
 800914a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f023 0201 	bic.w	r2, r3, #1
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3b04      	subs	r3, #4
 800915a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800915c:	4a0c      	ldr	r2, [pc, #48]	; (8009190 <pxPortInitialiseStack+0x64>)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3b14      	subs	r3, #20
 8009166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3b04      	subs	r3, #4
 8009172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f06f 0202 	mvn.w	r2, #2
 800917a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3b20      	subs	r3, #32
 8009180:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009182:	68fb      	ldr	r3, [r7, #12]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	08009195 	.word	0x08009195

08009194 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800919e:	4b12      	ldr	r3, [pc, #72]	; (80091e8 <prvTaskExitError+0x54>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a6:	d00a      	beq.n	80091be <prvTaskExitError+0x2a>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	60fb      	str	r3, [r7, #12]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <prvTaskExitError+0x28>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	60bb      	str	r3, [r7, #8]
}
 80091d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091d2:	bf00      	nop
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0fc      	beq.n	80091d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091da:	bf00      	nop
 80091dc:	bf00      	nop
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	2000000c 	.word	0x2000000c
 80091ec:	00000000 	.word	0x00000000

080091f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091f0:	4b07      	ldr	r3, [pc, #28]	; (8009210 <pxCurrentTCBConst2>)
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	6808      	ldr	r0, [r1, #0]
 80091f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fa:	f380 8809 	msr	PSP, r0
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f04f 0000 	mov.w	r0, #0
 8009206:	f380 8811 	msr	BASEPRI, r0
 800920a:	4770      	bx	lr
 800920c:	f3af 8000 	nop.w

08009210 <pxCurrentTCBConst2>:
 8009210:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop

08009218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009218:	4808      	ldr	r0, [pc, #32]	; (800923c <prvPortStartFirstTask+0x24>)
 800921a:	6800      	ldr	r0, [r0, #0]
 800921c:	6800      	ldr	r0, [r0, #0]
 800921e:	f380 8808 	msr	MSP, r0
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f380 8814 	msr	CONTROL, r0
 800922a:	b662      	cpsie	i
 800922c:	b661      	cpsie	f
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	df00      	svc	0
 8009238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800923a:	bf00      	nop
 800923c:	e000ed08 	.word	0xe000ed08

08009240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009246:	4b46      	ldr	r3, [pc, #280]	; (8009360 <xPortStartScheduler+0x120>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a46      	ldr	r2, [pc, #280]	; (8009364 <xPortStartScheduler+0x124>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d10a      	bne.n	8009266 <xPortStartScheduler+0x26>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	613b      	str	r3, [r7, #16]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009266:	4b3e      	ldr	r3, [pc, #248]	; (8009360 <xPortStartScheduler+0x120>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a3f      	ldr	r2, [pc, #252]	; (8009368 <xPortStartScheduler+0x128>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d10a      	bne.n	8009286 <xPortStartScheduler+0x46>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	60fb      	str	r3, [r7, #12]
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009286:	4b39      	ldr	r3, [pc, #228]	; (800936c <xPortStartScheduler+0x12c>)
 8009288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	22ff      	movs	r2, #255	; 0xff
 8009296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	4b31      	ldr	r3, [pc, #196]	; (8009370 <xPortStartScheduler+0x130>)
 80092ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092ae:	4b31      	ldr	r3, [pc, #196]	; (8009374 <xPortStartScheduler+0x134>)
 80092b0:	2207      	movs	r2, #7
 80092b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092b4:	e009      	b.n	80092ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80092b6:	4b2f      	ldr	r3, [pc, #188]	; (8009374 <xPortStartScheduler+0x134>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	4a2d      	ldr	r2, [pc, #180]	; (8009374 <xPortStartScheduler+0x134>)
 80092be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d2:	2b80      	cmp	r3, #128	; 0x80
 80092d4:	d0ef      	beq.n	80092b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092d6:	4b27      	ldr	r3, [pc, #156]	; (8009374 <xPortStartScheduler+0x134>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f1c3 0307 	rsb	r3, r3, #7
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d00a      	beq.n	80092f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	60bb      	str	r3, [r7, #8]
}
 80092f4:	bf00      	nop
 80092f6:	e7fe      	b.n	80092f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092f8:	4b1e      	ldr	r3, [pc, #120]	; (8009374 <xPortStartScheduler+0x134>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <xPortStartScheduler+0x134>)
 8009300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009302:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <xPortStartScheduler+0x134>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800930a:	4a1a      	ldr	r2, [pc, #104]	; (8009374 <xPortStartScheduler+0x134>)
 800930c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	b2da      	uxtb	r2, r3
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009316:	4b18      	ldr	r3, [pc, #96]	; (8009378 <xPortStartScheduler+0x138>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a17      	ldr	r2, [pc, #92]	; (8009378 <xPortStartScheduler+0x138>)
 800931c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009322:	4b15      	ldr	r3, [pc, #84]	; (8009378 <xPortStartScheduler+0x138>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a14      	ldr	r2, [pc, #80]	; (8009378 <xPortStartScheduler+0x138>)
 8009328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800932c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800932e:	f000 f8dd 	bl	80094ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009332:	4b12      	ldr	r3, [pc, #72]	; (800937c <xPortStartScheduler+0x13c>)
 8009334:	2200      	movs	r2, #0
 8009336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009338:	f000 f8fc 	bl	8009534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800933c:	4b10      	ldr	r3, [pc, #64]	; (8009380 <xPortStartScheduler+0x140>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a0f      	ldr	r2, [pc, #60]	; (8009380 <xPortStartScheduler+0x140>)
 8009342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009348:	f7ff ff66 	bl	8009218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800934c:	f7ff f84a 	bl	80083e4 <vTaskSwitchContext>
	prvTaskExitError();
 8009350:	f7ff ff20 	bl	8009194 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	e000ed00 	.word	0xe000ed00
 8009364:	410fc271 	.word	0x410fc271
 8009368:	410fc270 	.word	0x410fc270
 800936c:	e000e400 	.word	0xe000e400
 8009370:	2000111c 	.word	0x2000111c
 8009374:	20001120 	.word	0x20001120
 8009378:	e000ed20 	.word	0xe000ed20
 800937c:	2000000c 	.word	0x2000000c
 8009380:	e000ef34 	.word	0xe000ef34

08009384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	607b      	str	r3, [r7, #4]
}
 800939c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800939e:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <vPortEnterCritical+0x58>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	4a0d      	ldr	r2, [pc, #52]	; (80093dc <vPortEnterCritical+0x58>)
 80093a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093a8:	4b0c      	ldr	r3, [pc, #48]	; (80093dc <vPortEnterCritical+0x58>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d10f      	bne.n	80093d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093b0:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <vPortEnterCritical+0x5c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	603b      	str	r3, [r7, #0]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <vPortEnterCritical+0x4a>
	}
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	2000000c 	.word	0x2000000c
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093ea:	4b12      	ldr	r3, [pc, #72]	; (8009434 <vPortExitCritical+0x50>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <vPortExitCritical+0x24>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	607b      	str	r3, [r7, #4]
}
 8009404:	bf00      	nop
 8009406:	e7fe      	b.n	8009406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <vPortExitCritical+0x50>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3b01      	subs	r3, #1
 800940e:	4a09      	ldr	r2, [pc, #36]	; (8009434 <vPortExitCritical+0x50>)
 8009410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009412:	4b08      	ldr	r3, [pc, #32]	; (8009434 <vPortExitCritical+0x50>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d105      	bne.n	8009426 <vPortExitCritical+0x42>
 800941a:	2300      	movs	r3, #0
 800941c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f383 8811 	msr	BASEPRI, r3
}
 8009424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	2000000c 	.word	0x2000000c
	...

08009440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009440:	f3ef 8009 	mrs	r0, PSP
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	4b15      	ldr	r3, [pc, #84]	; (80094a0 <pxCurrentTCBConst>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	f01e 0f10 	tst.w	lr, #16
 8009450:	bf08      	it	eq
 8009452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945a:	6010      	str	r0, [r2, #0]
 800945c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009464:	f380 8811 	msr	BASEPRI, r0
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f7fe ffb8 	bl	80083e4 <vTaskSwitchContext>
 8009474:	f04f 0000 	mov.w	r0, #0
 8009478:	f380 8811 	msr	BASEPRI, r0
 800947c:	bc09      	pop	{r0, r3}
 800947e:	6819      	ldr	r1, [r3, #0]
 8009480:	6808      	ldr	r0, [r1, #0]
 8009482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009486:	f01e 0f10 	tst.w	lr, #16
 800948a:	bf08      	it	eq
 800948c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009490:	f380 8809 	msr	PSP, r0
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	f3af 8000 	nop.w

080094a0 <pxCurrentTCBConst>:
 80094a0:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop

080094a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	607b      	str	r3, [r7, #4]
}
 80094c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094c2:	f7fe fed5 	bl	8008270 <xTaskIncrementTick>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094cc:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <xPortSysTickHandler+0x40>)
 80094ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	2300      	movs	r3, #0
 80094d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f383 8811 	msr	BASEPRI, r3
}
 80094de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	e000ed04 	.word	0xe000ed04

080094ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094ec:	b480      	push	{r7}
 80094ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094f0:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <vPortSetupTimerInterrupt+0x34>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094f6:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <vPortSetupTimerInterrupt+0x38>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <vPortSetupTimerInterrupt+0x3c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a0a      	ldr	r2, [pc, #40]	; (800952c <vPortSetupTimerInterrupt+0x40>)
 8009502:	fba2 2303 	umull	r2, r3, r2, r3
 8009506:	099b      	lsrs	r3, r3, #6
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <vPortSetupTimerInterrupt+0x44>)
 800950a:	3b01      	subs	r3, #1
 800950c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800950e:	4b04      	ldr	r3, [pc, #16]	; (8009520 <vPortSetupTimerInterrupt+0x34>)
 8009510:	2207      	movs	r2, #7
 8009512:	601a      	str	r2, [r3, #0]
}
 8009514:	bf00      	nop
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	e000e010 	.word	0xe000e010
 8009524:	e000e018 	.word	0xe000e018
 8009528:	20000000 	.word	0x20000000
 800952c:	10624dd3 	.word	0x10624dd3
 8009530:	e000e014 	.word	0xe000e014

08009534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009544 <vPortEnableVFP+0x10>
 8009538:	6801      	ldr	r1, [r0, #0]
 800953a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800953e:	6001      	str	r1, [r0, #0]
 8009540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009542:	bf00      	nop
 8009544:	e000ed88 	.word	0xe000ed88

08009548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800954e:	f3ef 8305 	mrs	r3, IPSR
 8009552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b0f      	cmp	r3, #15
 8009558:	d914      	bls.n	8009584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800955a:	4a17      	ldr	r2, [pc, #92]	; (80095b8 <vPortValidateInterruptPriority+0x70>)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4413      	add	r3, r2
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009564:	4b15      	ldr	r3, [pc, #84]	; (80095bc <vPortValidateInterruptPriority+0x74>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	7afa      	ldrb	r2, [r7, #11]
 800956a:	429a      	cmp	r2, r3
 800956c:	d20a      	bcs.n	8009584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	607b      	str	r3, [r7, #4]
}
 8009580:	bf00      	nop
 8009582:	e7fe      	b.n	8009582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009584:	4b0e      	ldr	r3, [pc, #56]	; (80095c0 <vPortValidateInterruptPriority+0x78>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800958c:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <vPortValidateInterruptPriority+0x7c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d90a      	bls.n	80095aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	603b      	str	r3, [r7, #0]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <vPortValidateInterruptPriority+0x60>
	}
 80095aa:	bf00      	nop
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	e000e3f0 	.word	0xe000e3f0
 80095bc:	2000111c 	.word	0x2000111c
 80095c0:	e000ed0c 	.word	0xe000ed0c
 80095c4:	20001120 	.word	0x20001120

080095c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08a      	sub	sp, #40	; 0x28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095d0:	2300      	movs	r3, #0
 80095d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095d4:	f7fe fd90 	bl	80080f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095d8:	4b5b      	ldr	r3, [pc, #364]	; (8009748 <pvPortMalloc+0x180>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095e0:	f000 f920 	bl	8009824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095e4:	4b59      	ldr	r3, [pc, #356]	; (800974c <pvPortMalloc+0x184>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4013      	ands	r3, r2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f040 8093 	bne.w	8009718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d01d      	beq.n	8009634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80095f8:	2208      	movs	r2, #8
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4413      	add	r3, r2
 80095fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	2b00      	cmp	r3, #0
 8009608:	d014      	beq.n	8009634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f023 0307 	bic.w	r3, r3, #7
 8009610:	3308      	adds	r3, #8
 8009612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <pvPortMalloc+0x6c>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	617b      	str	r3, [r7, #20]
}
 8009630:	bf00      	nop
 8009632:	e7fe      	b.n	8009632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d06e      	beq.n	8009718 <pvPortMalloc+0x150>
 800963a:	4b45      	ldr	r3, [pc, #276]	; (8009750 <pvPortMalloc+0x188>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	429a      	cmp	r2, r3
 8009642:	d869      	bhi.n	8009718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009644:	4b43      	ldr	r3, [pc, #268]	; (8009754 <pvPortMalloc+0x18c>)
 8009646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009648:	4b42      	ldr	r3, [pc, #264]	; (8009754 <pvPortMalloc+0x18c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800964e:	e004      	b.n	800965a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	429a      	cmp	r2, r3
 8009662:	d903      	bls.n	800966c <pvPortMalloc+0xa4>
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1f1      	bne.n	8009650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800966c:	4b36      	ldr	r3, [pc, #216]	; (8009748 <pvPortMalloc+0x180>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009672:	429a      	cmp	r2, r3
 8009674:	d050      	beq.n	8009718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2208      	movs	r2, #8
 800967c:	4413      	add	r3, r2
 800967e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	1ad2      	subs	r2, r2, r3
 8009690:	2308      	movs	r3, #8
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	429a      	cmp	r2, r3
 8009696:	d91f      	bls.n	80096d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4413      	add	r3, r2
 800969e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <pvPortMalloc+0xf8>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	613b      	str	r3, [r7, #16]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	1ad2      	subs	r2, r2, r3
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096d2:	69b8      	ldr	r0, [r7, #24]
 80096d4:	f000 f908 	bl	80098e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096d8:	4b1d      	ldr	r3, [pc, #116]	; (8009750 <pvPortMalloc+0x188>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	4a1b      	ldr	r2, [pc, #108]	; (8009750 <pvPortMalloc+0x188>)
 80096e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096e6:	4b1a      	ldr	r3, [pc, #104]	; (8009750 <pvPortMalloc+0x188>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	4b1b      	ldr	r3, [pc, #108]	; (8009758 <pvPortMalloc+0x190>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d203      	bcs.n	80096fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096f2:	4b17      	ldr	r3, [pc, #92]	; (8009750 <pvPortMalloc+0x188>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a18      	ldr	r2, [pc, #96]	; (8009758 <pvPortMalloc+0x190>)
 80096f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	4b13      	ldr	r3, [pc, #76]	; (800974c <pvPortMalloc+0x184>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	431a      	orrs	r2, r3
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800970e:	4b13      	ldr	r3, [pc, #76]	; (800975c <pvPortMalloc+0x194>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3301      	adds	r3, #1
 8009714:	4a11      	ldr	r2, [pc, #68]	; (800975c <pvPortMalloc+0x194>)
 8009716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009718:	f7fe fcfc 	bl	8008114 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <pvPortMalloc+0x174>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	60fb      	str	r3, [r7, #12]
}
 8009738:	bf00      	nop
 800973a:	e7fe      	b.n	800973a <pvPortMalloc+0x172>
	return pvReturn;
 800973c:	69fb      	ldr	r3, [r7, #28]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3728      	adds	r7, #40	; 0x28
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20001ce4 	.word	0x20001ce4
 800974c:	20001cf8 	.word	0x20001cf8
 8009750:	20001ce8 	.word	0x20001ce8
 8009754:	20001cdc 	.word	0x20001cdc
 8009758:	20001cec 	.word	0x20001cec
 800975c:	20001cf0 	.word	0x20001cf0

08009760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d04d      	beq.n	800980e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009772:	2308      	movs	r3, #8
 8009774:	425b      	negs	r3, r3
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	4413      	add	r3, r2
 800977a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	4b24      	ldr	r3, [pc, #144]	; (8009818 <vPortFree+0xb8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4013      	ands	r3, r2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <vPortFree+0x44>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	60fb      	str	r3, [r7, #12]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00a      	beq.n	80097c2 <vPortFree+0x62>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60bb      	str	r3, [r7, #8]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	4b14      	ldr	r3, [pc, #80]	; (8009818 <vPortFree+0xb8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01e      	beq.n	800980e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d11a      	bne.n	800980e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	4b0e      	ldr	r3, [pc, #56]	; (8009818 <vPortFree+0xb8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	43db      	mvns	r3, r3
 80097e2:	401a      	ands	r2, r3
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097e8:	f7fe fc86 	bl	80080f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <vPortFree+0xbc>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4413      	add	r3, r2
 80097f6:	4a09      	ldr	r2, [pc, #36]	; (800981c <vPortFree+0xbc>)
 80097f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097fa:	6938      	ldr	r0, [r7, #16]
 80097fc:	f000 f874 	bl	80098e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <vPortFree+0xc0>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3301      	adds	r3, #1
 8009806:	4a06      	ldr	r2, [pc, #24]	; (8009820 <vPortFree+0xc0>)
 8009808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800980a:	f7fe fc83 	bl	8008114 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800980e:	bf00      	nop
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	20001cf8 	.word	0x20001cf8
 800981c:	20001ce8 	.word	0x20001ce8
 8009820:	20001cf4 	.word	0x20001cf4

08009824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800982a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800982e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009830:	4b27      	ldr	r3, [pc, #156]	; (80098d0 <prvHeapInit+0xac>)
 8009832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00c      	beq.n	8009858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3307      	adds	r3, #7
 8009842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	4a1f      	ldr	r2, [pc, #124]	; (80098d0 <prvHeapInit+0xac>)
 8009854:	4413      	add	r3, r2
 8009856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800985c:	4a1d      	ldr	r2, [pc, #116]	; (80098d4 <prvHeapInit+0xb0>)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009862:	4b1c      	ldr	r3, [pc, #112]	; (80098d4 <prvHeapInit+0xb0>)
 8009864:	2200      	movs	r2, #0
 8009866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	4413      	add	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009870:	2208      	movs	r2, #8
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 0307 	bic.w	r3, r3, #7
 800987e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4a15      	ldr	r2, [pc, #84]	; (80098d8 <prvHeapInit+0xb4>)
 8009884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <prvHeapInit+0xb4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2200      	movs	r2, #0
 800988c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <prvHeapInit+0xb4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	1ad2      	subs	r2, r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098a4:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <prvHeapInit+0xb4>)
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <prvHeapInit+0xb8>)
 80098b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	4a09      	ldr	r2, [pc, #36]	; (80098e0 <prvHeapInit+0xbc>)
 80098ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098bc:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <prvHeapInit+0xc0>)
 80098be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098c2:	601a      	str	r2, [r3, #0]
}
 80098c4:	bf00      	nop
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	20001124 	.word	0x20001124
 80098d4:	20001cdc 	.word	0x20001cdc
 80098d8:	20001ce4 	.word	0x20001ce4
 80098dc:	20001cec 	.word	0x20001cec
 80098e0:	20001ce8 	.word	0x20001ce8
 80098e4:	20001cf8 	.word	0x20001cf8

080098e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098f0:	4b28      	ldr	r3, [pc, #160]	; (8009994 <prvInsertBlockIntoFreeList+0xac>)
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	e002      	b.n	80098fc <prvInsertBlockIntoFreeList+0x14>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	429a      	cmp	r2, r3
 8009904:	d8f7      	bhi.n	80098f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	4413      	add	r3, r2
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	429a      	cmp	r2, r3
 8009916:	d108      	bne.n	800992a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	441a      	add	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	441a      	add	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	d118      	bne.n	8009970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	4b15      	ldr	r3, [pc, #84]	; (8009998 <prvInsertBlockIntoFreeList+0xb0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d00d      	beq.n	8009966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	441a      	add	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e008      	b.n	8009978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009966:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <prvInsertBlockIntoFreeList+0xb0>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e003      	b.n	8009978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d002      	beq.n	8009986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20001cdc 	.word	0x20001cdc
 8009998:	20001ce4 	.word	0x20001ce4

0800999c <__libc_init_array>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4d0d      	ldr	r5, [pc, #52]	; (80099d4 <__libc_init_array+0x38>)
 80099a0:	4c0d      	ldr	r4, [pc, #52]	; (80099d8 <__libc_init_array+0x3c>)
 80099a2:	1b64      	subs	r4, r4, r5
 80099a4:	10a4      	asrs	r4, r4, #2
 80099a6:	2600      	movs	r6, #0
 80099a8:	42a6      	cmp	r6, r4
 80099aa:	d109      	bne.n	80099c0 <__libc_init_array+0x24>
 80099ac:	4d0b      	ldr	r5, [pc, #44]	; (80099dc <__libc_init_array+0x40>)
 80099ae:	4c0c      	ldr	r4, [pc, #48]	; (80099e0 <__libc_init_array+0x44>)
 80099b0:	f000 f8f2 	bl	8009b98 <_init>
 80099b4:	1b64      	subs	r4, r4, r5
 80099b6:	10a4      	asrs	r4, r4, #2
 80099b8:	2600      	movs	r6, #0
 80099ba:	42a6      	cmp	r6, r4
 80099bc:	d105      	bne.n	80099ca <__libc_init_array+0x2e>
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c4:	4798      	blx	r3
 80099c6:	3601      	adds	r6, #1
 80099c8:	e7ee      	b.n	80099a8 <__libc_init_array+0xc>
 80099ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ce:	4798      	blx	r3
 80099d0:	3601      	adds	r6, #1
 80099d2:	e7f2      	b.n	80099ba <__libc_init_array+0x1e>
 80099d4:	08009d34 	.word	0x08009d34
 80099d8:	08009d34 	.word	0x08009d34
 80099dc:	08009d34 	.word	0x08009d34
 80099e0:	08009d38 	.word	0x08009d38

080099e4 <__retarget_lock_acquire_recursive>:
 80099e4:	4770      	bx	lr

080099e6 <__retarget_lock_release_recursive>:
 80099e6:	4770      	bx	lr

080099e8 <memcpy>:
 80099e8:	440a      	add	r2, r1
 80099ea:	4291      	cmp	r1, r2
 80099ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80099f0:	d100      	bne.n	80099f4 <memcpy+0xc>
 80099f2:	4770      	bx	lr
 80099f4:	b510      	push	{r4, lr}
 80099f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099fe:	4291      	cmp	r1, r2
 8009a00:	d1f9      	bne.n	80099f6 <memcpy+0xe>
 8009a02:	bd10      	pop	{r4, pc}

08009a04 <memset>:
 8009a04:	4402      	add	r2, r0
 8009a06:	4603      	mov	r3, r0
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d100      	bne.n	8009a0e <memset+0xa>
 8009a0c:	4770      	bx	lr
 8009a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a12:	e7f9      	b.n	8009a08 <memset+0x4>

08009a14 <cleanup_glue>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	460c      	mov	r4, r1
 8009a18:	6809      	ldr	r1, [r1, #0]
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	b109      	cbz	r1, 8009a22 <cleanup_glue+0xe>
 8009a1e:	f7ff fff9 	bl	8009a14 <cleanup_glue>
 8009a22:	4621      	mov	r1, r4
 8009a24:	4628      	mov	r0, r5
 8009a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a2a:	f000 b869 	b.w	8009b00 <_free_r>
	...

08009a30 <_reclaim_reent>:
 8009a30:	4b2c      	ldr	r3, [pc, #176]	; (8009ae4 <_reclaim_reent+0xb4>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4283      	cmp	r3, r0
 8009a36:	b570      	push	{r4, r5, r6, lr}
 8009a38:	4604      	mov	r4, r0
 8009a3a:	d051      	beq.n	8009ae0 <_reclaim_reent+0xb0>
 8009a3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009a3e:	b143      	cbz	r3, 8009a52 <_reclaim_reent+0x22>
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d14a      	bne.n	8009adc <_reclaim_reent+0xac>
 8009a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a48:	6819      	ldr	r1, [r3, #0]
 8009a4a:	b111      	cbz	r1, 8009a52 <_reclaim_reent+0x22>
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f000 f857 	bl	8009b00 <_free_r>
 8009a52:	6961      	ldr	r1, [r4, #20]
 8009a54:	b111      	cbz	r1, 8009a5c <_reclaim_reent+0x2c>
 8009a56:	4620      	mov	r0, r4
 8009a58:	f000 f852 	bl	8009b00 <_free_r>
 8009a5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009a5e:	b111      	cbz	r1, 8009a66 <_reclaim_reent+0x36>
 8009a60:	4620      	mov	r0, r4
 8009a62:	f000 f84d 	bl	8009b00 <_free_r>
 8009a66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009a68:	b111      	cbz	r1, 8009a70 <_reclaim_reent+0x40>
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 f848 	bl	8009b00 <_free_r>
 8009a70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009a72:	b111      	cbz	r1, 8009a7a <_reclaim_reent+0x4a>
 8009a74:	4620      	mov	r0, r4
 8009a76:	f000 f843 	bl	8009b00 <_free_r>
 8009a7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009a7c:	b111      	cbz	r1, 8009a84 <_reclaim_reent+0x54>
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f000 f83e 	bl	8009b00 <_free_r>
 8009a84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009a86:	b111      	cbz	r1, 8009a8e <_reclaim_reent+0x5e>
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 f839 	bl	8009b00 <_free_r>
 8009a8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009a90:	b111      	cbz	r1, 8009a98 <_reclaim_reent+0x68>
 8009a92:	4620      	mov	r0, r4
 8009a94:	f000 f834 	bl	8009b00 <_free_r>
 8009a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a9a:	b111      	cbz	r1, 8009aa2 <_reclaim_reent+0x72>
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f000 f82f 	bl	8009b00 <_free_r>
 8009aa2:	69a3      	ldr	r3, [r4, #24]
 8009aa4:	b1e3      	cbz	r3, 8009ae0 <_reclaim_reent+0xb0>
 8009aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	4798      	blx	r3
 8009aac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009aae:	b1b9      	cbz	r1, 8009ae0 <_reclaim_reent+0xb0>
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ab6:	f7ff bfad 	b.w	8009a14 <cleanup_glue>
 8009aba:	5949      	ldr	r1, [r1, r5]
 8009abc:	b941      	cbnz	r1, 8009ad0 <_reclaim_reent+0xa0>
 8009abe:	3504      	adds	r5, #4
 8009ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ac2:	2d80      	cmp	r5, #128	; 0x80
 8009ac4:	68d9      	ldr	r1, [r3, #12]
 8009ac6:	d1f8      	bne.n	8009aba <_reclaim_reent+0x8a>
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f000 f819 	bl	8009b00 <_free_r>
 8009ace:	e7ba      	b.n	8009a46 <_reclaim_reent+0x16>
 8009ad0:	680e      	ldr	r6, [r1, #0]
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f000 f814 	bl	8009b00 <_free_r>
 8009ad8:	4631      	mov	r1, r6
 8009ada:	e7ef      	b.n	8009abc <_reclaim_reent+0x8c>
 8009adc:	2500      	movs	r5, #0
 8009ade:	e7ef      	b.n	8009ac0 <_reclaim_reent+0x90>
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000010 	.word	0x20000010

08009ae8 <__malloc_lock>:
 8009ae8:	4801      	ldr	r0, [pc, #4]	; (8009af0 <__malloc_lock+0x8>)
 8009aea:	f7ff bf7b 	b.w	80099e4 <__retarget_lock_acquire_recursive>
 8009aee:	bf00      	nop
 8009af0:	20001cfc 	.word	0x20001cfc

08009af4 <__malloc_unlock>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__malloc_unlock+0x8>)
 8009af6:	f7ff bf76 	b.w	80099e6 <__retarget_lock_release_recursive>
 8009afa:	bf00      	nop
 8009afc:	20001cfc 	.word	0x20001cfc

08009b00 <_free_r>:
 8009b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b02:	2900      	cmp	r1, #0
 8009b04:	d044      	beq.n	8009b90 <_free_r+0x90>
 8009b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b0a:	9001      	str	r0, [sp, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f1a1 0404 	sub.w	r4, r1, #4
 8009b12:	bfb8      	it	lt
 8009b14:	18e4      	addlt	r4, r4, r3
 8009b16:	f7ff ffe7 	bl	8009ae8 <__malloc_lock>
 8009b1a:	4a1e      	ldr	r2, [pc, #120]	; (8009b94 <_free_r+0x94>)
 8009b1c:	9801      	ldr	r0, [sp, #4]
 8009b1e:	6813      	ldr	r3, [r2, #0]
 8009b20:	b933      	cbnz	r3, 8009b30 <_free_r+0x30>
 8009b22:	6063      	str	r3, [r4, #4]
 8009b24:	6014      	str	r4, [r2, #0]
 8009b26:	b003      	add	sp, #12
 8009b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b2c:	f7ff bfe2 	b.w	8009af4 <__malloc_unlock>
 8009b30:	42a3      	cmp	r3, r4
 8009b32:	d908      	bls.n	8009b46 <_free_r+0x46>
 8009b34:	6825      	ldr	r5, [r4, #0]
 8009b36:	1961      	adds	r1, r4, r5
 8009b38:	428b      	cmp	r3, r1
 8009b3a:	bf01      	itttt	eq
 8009b3c:	6819      	ldreq	r1, [r3, #0]
 8009b3e:	685b      	ldreq	r3, [r3, #4]
 8009b40:	1949      	addeq	r1, r1, r5
 8009b42:	6021      	streq	r1, [r4, #0]
 8009b44:	e7ed      	b.n	8009b22 <_free_r+0x22>
 8009b46:	461a      	mov	r2, r3
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	b10b      	cbz	r3, 8009b50 <_free_r+0x50>
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	d9fa      	bls.n	8009b46 <_free_r+0x46>
 8009b50:	6811      	ldr	r1, [r2, #0]
 8009b52:	1855      	adds	r5, r2, r1
 8009b54:	42a5      	cmp	r5, r4
 8009b56:	d10b      	bne.n	8009b70 <_free_r+0x70>
 8009b58:	6824      	ldr	r4, [r4, #0]
 8009b5a:	4421      	add	r1, r4
 8009b5c:	1854      	adds	r4, r2, r1
 8009b5e:	42a3      	cmp	r3, r4
 8009b60:	6011      	str	r1, [r2, #0]
 8009b62:	d1e0      	bne.n	8009b26 <_free_r+0x26>
 8009b64:	681c      	ldr	r4, [r3, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	6053      	str	r3, [r2, #4]
 8009b6a:	4421      	add	r1, r4
 8009b6c:	6011      	str	r1, [r2, #0]
 8009b6e:	e7da      	b.n	8009b26 <_free_r+0x26>
 8009b70:	d902      	bls.n	8009b78 <_free_r+0x78>
 8009b72:	230c      	movs	r3, #12
 8009b74:	6003      	str	r3, [r0, #0]
 8009b76:	e7d6      	b.n	8009b26 <_free_r+0x26>
 8009b78:	6825      	ldr	r5, [r4, #0]
 8009b7a:	1961      	adds	r1, r4, r5
 8009b7c:	428b      	cmp	r3, r1
 8009b7e:	bf04      	itt	eq
 8009b80:	6819      	ldreq	r1, [r3, #0]
 8009b82:	685b      	ldreq	r3, [r3, #4]
 8009b84:	6063      	str	r3, [r4, #4]
 8009b86:	bf04      	itt	eq
 8009b88:	1949      	addeq	r1, r1, r5
 8009b8a:	6021      	streq	r1, [r4, #0]
 8009b8c:	6054      	str	r4, [r2, #4]
 8009b8e:	e7ca      	b.n	8009b26 <_free_r+0x26>
 8009b90:	b003      	add	sp, #12
 8009b92:	bd30      	pop	{r4, r5, pc}
 8009b94:	20001d00 	.word	0x20001d00

08009b98 <_init>:
 8009b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9a:	bf00      	nop
 8009b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9e:	bc08      	pop	{r3}
 8009ba0:	469e      	mov	lr, r3
 8009ba2:	4770      	bx	lr

08009ba4 <_fini>:
 8009ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba6:	bf00      	nop
 8009ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009baa:	bc08      	pop	{r3}
 8009bac:	469e      	mov	lr, r3
 8009bae:	4770      	bx	lr
