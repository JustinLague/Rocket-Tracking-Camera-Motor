
Rocket-Tracking-Camera-Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007394  08007394  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007394  08007394  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007394  08007394  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007398  08007398  00017398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800739c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b84  20000074  08007410  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf8  08007410  00021bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b69f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fc  00000000  00000000  0003b743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0003ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  000406c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281e4  00000000  00000000  00041cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d2b  00000000  00000000  00069ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa704  00000000  00000000  00083be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e2eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f4  00000000  00000000  0017e33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007258 	.word	0x08007258

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007258 	.word	0x08007258

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_d2uiz>:
 8000548:	004a      	lsls	r2, r1, #1
 800054a:	d211      	bcs.n	8000570 <__aeabi_d2uiz+0x28>
 800054c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000550:	d211      	bcs.n	8000576 <__aeabi_d2uiz+0x2e>
 8000552:	d50d      	bpl.n	8000570 <__aeabi_d2uiz+0x28>
 8000554:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000558:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800055c:	d40e      	bmi.n	800057c <__aeabi_d2uiz+0x34>
 800055e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000566:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056a:	fa23 f002 	lsr.w	r0, r3, r2
 800056e:	4770      	bx	lr
 8000570:	f04f 0000 	mov.w	r0, #0
 8000574:	4770      	bx	lr
 8000576:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800057a:	d102      	bne.n	8000582 <__aeabi_d2uiz+0x3a>
 800057c:	f04f 30ff 	mov.w	r0, #4294967295
 8000580:	4770      	bx	lr
 8000582:	f04f 0000 	mov.w	r0, #0
 8000586:	4770      	bx	lr

08000588 <tsk_motor_control>:

Timer_def_t timer_x;
Timer_def_t timer_y;
Timer_def_t timer_zoom;

void tsk_motor_control() {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0

	start_motor(Motor_x);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 f8b4 	bl	80006fc <start_motor>
	start_motor(Motor_y);
 8000594:	2001      	movs	r0, #1
 8000596:	f000 f8b1 	bl	80006fc <start_motor>
	start_motor(Motor_zoom);
 800059a:	2002      	movs	r0, #2
 800059c:	f000 f8ae 	bl	80006fc <start_motor>

	uint32_t speed_x = 60;
 80005a0:	233c      	movs	r3, #60	; 0x3c
 80005a2:	60fb      	str	r3, [r7, #12]
	uint32_t speed_y = 60;
 80005a4:	233c      	movs	r3, #60	; 0x3c
 80005a6:	60bb      	str	r3, [r7, #8]
	uint32_t speed_zoom = 60;
 80005a8:	233c      	movs	r3, #60	; 0x3c
 80005aa:	607b      	str	r3, [r7, #4]


	while(speed_x <= 3000) {
 80005ac:	e008      	b.n	80005c0 <tsk_motor_control+0x38>
		update_motor_x(speed_x);
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f000 f826 	bl	8000600 <update_motor_x>

		speed_x +=10;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	330a      	adds	r3, #10
 80005b8:	60fb      	str	r3, [r7, #12]
		osDelay(5);
 80005ba:	2005      	movs	r0, #5
 80005bc:	f004 f8b0 	bl	8004720 <osDelay>
	while(speed_x <= 3000) {
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d9f1      	bls.n	80005ae <tsk_motor_control+0x26>
	}

	update_motor_x(speed_x);
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f000 f818 	bl	8000600 <update_motor_x>

	osDelay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f004 f8a4 	bl	8004720 <osDelay>

	while(speed_x >= 60) {
 80005d8:	e008      	b.n	80005ec <tsk_motor_control+0x64>
		update_motor_x(speed_x);
 80005da:	68f8      	ldr	r0, [r7, #12]
 80005dc:	f000 f810 	bl	8000600 <update_motor_x>

		speed_x -=10;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3b0a      	subs	r3, #10
 80005e4:	60fb      	str	r3, [r7, #12]
		osDelay(5);
 80005e6:	2005      	movs	r0, #5
 80005e8:	f004 f89a 	bl	8004720 <osDelay>
	while(speed_x >= 60) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2b3b      	cmp	r3, #59	; 0x3b
 80005f0:	d8f3      	bhi.n	80005da <tsk_motor_control+0x52>
	}

	update_motor_x(speed_x);
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f000 f804 	bl	8000600 <update_motor_x>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <update_motor_x>:


void update_motor_x(uint32_t speed) {
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	change_speed(&timer_x, speed);
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	480f      	ldr	r0, [pc, #60]	; (8000648 <update_motor_x+0x48>)
 800060c:	f000 f85c 	bl	80006c8 <change_speed>
	TIM3->ARR = timer_x.arr;
 8000610:	4a0e      	ldr	r2, [pc, #56]	; (800064c <update_motor_x+0x4c>)
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <update_motor_x+0x48>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->PSC = timer_x.psc;
 8000618:	4a0c      	ldr	r2, [pc, #48]	; (800064c <update_motor_x+0x4c>)
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <update_motor_x+0x48>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	6293      	str	r3, [r2, #40]	; 0x28
	TIM3->CCR2 = (uint32_t) floor(timer_x.arr / 2);
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <update_motor_x+0x48>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff14 	bl	8000454 <__aeabi_ui2d>
 800062c:	4602      	mov	r2, r0
 800062e:	460b      	mov	r3, r1
 8000630:	4c06      	ldr	r4, [pc, #24]	; (800064c <update_motor_x+0x4c>)
 8000632:	4610      	mov	r0, r2
 8000634:	4619      	mov	r1, r3
 8000636:	f7ff ff87 	bl	8000548 <__aeabi_d2uiz>
 800063a:	4603      	mov	r3, r0
 800063c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bd90      	pop	{r4, r7, pc}
 8000646:	bf00      	nop
 8000648:	20000090 	.word	0x20000090
 800064c:	40000400 	.word	0x40000400

08000650 <change_timer_def_for_freq>:
	TIM8->ARR = timer_zoom.arr;
	TIM8->PSC = timer_zoom.psc;
	TIM8->CCR4 = (uint32_t) floor(timer_zoom.arr / 2);
}

void change_timer_def_for_freq(uint32_t desired_freq, Timer_def_t* timer_def) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]

	//frequence du PCLK1
	uint32_t f_clk = HAL_RCC_GetPCLK1Freq();
 800065a:	f001 ff1d 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 800065e:	60f8      	str	r0, [r7, #12]

	// formule : https://deepbluembedded.com/stm32-pwm-example-timer-pwm-mode-tutorial/ apres je solve pour ARR
	uint32_t arr = (f_clk / desired_freq);
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	fbb2 f3f3 	udiv	r3, r2, r3
 8000668:	617b      	str	r3, [r7, #20]
	uint32_t psc = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]

	if(arr > 65535) {
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000674:	d315      	bcc.n	80006a2 <change_timer_def_for_freq+0x52>
		psc = (uint32_t) floor(arr / 65535) + 1;
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <change_timer_def_for_freq+0x74>)
 800067a:	fba2 2303 	umull	r2, r3, r2, r3
 800067e:	0bdb      	lsrs	r3, r3, #15
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fee7 	bl	8000454 <__aeabi_ui2d>
 8000686:	4602      	mov	r2, r0
 8000688:	460b      	mov	r3, r1
 800068a:	4610      	mov	r0, r2
 800068c:	4619      	mov	r1, r3
 800068e:	f7ff ff5b 	bl	8000548 <__aeabi_d2uiz>
 8000692:	4603      	mov	r3, r0
 8000694:	3301      	adds	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
		arr = arr / psc;
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a0:	617b      	str	r3, [r7, #20]
	}

	timer_def->arr = arr - 1;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	1e5a      	subs	r2, r3, #1
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	601a      	str	r2, [r3, #0]
	timer_def->psc = psc == 0 ? psc : psc - 1;
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <change_timer_def_for_freq+0x66>
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	e000      	b.n	80006b8 <change_timer_def_for_freq+0x68>
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	6053      	str	r3, [r2, #4]
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	80008001 	.word	0x80008001

080006c8 <change_speed>:

// go to X rpm
void change_speed(Timer_def_t* timer_def, uint32_t speed) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	//TODO: change "400" according to mode 1/mode * 400;

	uint32_t freq = (speed * 400) / 60;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006d8:	fb02 f303 	mul.w	r3, r2, r3
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <change_speed+0x30>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	095b      	lsrs	r3, r3, #5
 80006e4:	60fb      	str	r3, [r7, #12]
	change_timer_def_for_freq(freq, timer_def);
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f7ff ffb1 	bl	8000650 <change_timer_def_for_freq>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	88888889 	.word	0x88888889

080006fc <start_motor>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start_motor(enum Motor_t motor) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	switch(motor){
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d017      	beq.n	800073c <start_motor+0x40>
 800070c:	2b02      	cmp	r3, #2
 800070e:	dc1d      	bgt.n	800074c <start_motor+0x50>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <start_motor+0x1e>
 8000714:	2b01      	cmp	r3, #1
 8000716:	d009      	beq.n	800072c <start_motor+0x30>
		case Motor_zoom:
			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
			TIM3->PSC = 0;
			break;
	}
}
 8000718:	e018      	b.n	800074c <start_motor+0x50>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800071a:	2104      	movs	r1, #4
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <start_motor+0x58>)
 800071e:	f002 fd5f 	bl	80031e0 <HAL_TIM_PWM_Start>
			TIM2->PSC = 0;
 8000722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800072a:	e00f      	b.n	800074c <start_motor+0x50>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800072c:	2108      	movs	r1, #8
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <start_motor+0x5c>)
 8000730:	f002 fd56 	bl	80031e0 <HAL_TIM_PWM_Start>
			TIM4->PSC = 0;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <start_motor+0x60>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800073a:	e007      	b.n	800074c <start_motor+0x50>
			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800073c:	210c      	movs	r1, #12
 800073e:	4808      	ldr	r0, [pc, #32]	; (8000760 <start_motor+0x64>)
 8000740:	f002 fd4e 	bl	80031e0 <HAL_TIM_PWM_Start>
			TIM3->PSC = 0;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <start_motor+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800074a:	bf00      	nop
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000ec 	.word	0x200000ec
 8000758:	20000138 	.word	0x20000138
 800075c:	40000800 	.word	0x40000800
 8000760:	20000184 	.word	0x20000184
 8000764:	40000400 	.word	0x40000400

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fcd1 	bl	8001112 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f82c 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f000 fa56 	bl	8000c24 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000778:	f000 f8ba 	bl	80008f0 <MX_TIM3_Init>
  MX_I2C1_Init();
 800077c:	f000 f878 	bl	8000870 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000780:	f000 f9a6 	bl	8000ad0 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000784:	f000 f92c 	bl	80009e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000788:	f003 feee 	bl	8004568 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800078c:	4a09      	ldr	r2, [pc, #36]	; (80007b4 <main+0x4c>)
 800078e:	2100      	movs	r1, #0
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <main+0x50>)
 8000792:	f003 ff33 	bl	80045fc <osThreadNew>
 8000796:	4603      	mov	r3, r0
 8000798:	4a08      	ldr	r2, [pc, #32]	; (80007bc <main+0x54>)
 800079a:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(tsk_motor_control, NULL, &motor_control_attributes);
 800079c:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <main+0x58>)
 800079e:	2100      	movs	r1, #0
 80007a0:	4808      	ldr	r0, [pc, #32]	; (80007c4 <main+0x5c>)
 80007a2:	f003 ff2b 	bl	80045fc <osThreadNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <main+0x60>)
 80007aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007ac:	f003 ff00 	bl	80045b0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <main+0x48>
 80007b2:	bf00      	nop
 80007b4:	080072a4 	.word	0x080072a4
 80007b8:	08000c9d 	.word	0x08000c9d
 80007bc:	200001d0 	.word	0x200001d0
 80007c0:	080072c8 	.word	0x080072c8
 80007c4:	08000589 	.word	0x08000589
 80007c8:	200001d4 	.word	0x200001d4

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b096      	sub	sp, #88	; 0x58
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2244      	movs	r2, #68	; 0x44
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f006 fc72 	bl	80070c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f2:	f001 f887 	bl	8001904 <HAL_PWREx_ControlVoltageScaling>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007fc:	f000 fa68 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000800:	2310      	movs	r3, #16
 8000802:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000814:	2301      	movs	r3, #1
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 800081c:	2324      	movs	r3, #36	; 0x24
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000820:	2307      	movs	r3, #7
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4618      	mov	r0, r3
 8000832:	f001 f8bd 	bl	80019b0 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800083c:	f000 fa48 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2303      	movs	r3, #3
 8000846:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	2104      	movs	r1, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fc85 	bl	8002168 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000864:	f000 fa34 	bl	8000cd0 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3758      	adds	r7, #88	; 0x58
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_I2C1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_I2C1_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <MX_I2C1_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008ac:	f000 fef6 	bl	800169c <HAL_I2C_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f000 fa0b 	bl	8000cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008be:	f000 ff7c 	bl	80017ba <HAL_I2CEx_ConfigAnalogFilter>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c8:	f000 fa02 	bl	8000cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008d0:	f000 ffbe 	bl	8001850 <HAL_I2CEx_ConfigDigitalFilter>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 f9f9 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000098 	.word	0x20000098
 80008e8:	40005400 	.word	0x40005400
 80008ec:	10808dd3 	.word	0x10808dd3

080008f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	; 0x38
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_TIM3_Init+0xe8>)
 8000924:	4a2d      	ldr	r2, [pc, #180]	; (80009dc <MX_TIM3_Init+0xec>)
 8000926:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_TIM3_Init+0xe8>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <MX_TIM3_Init+0xe8>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_TIM3_Init+0xe8>)
 8000936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_TIM3_Init+0xe8>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_TIM3_Init+0xe8>)
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000948:	4823      	ldr	r0, [pc, #140]	; (80009d8 <MX_TIM3_Init+0xe8>)
 800094a:	f002 fb1f 	bl	8002f8c <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000954:	f000 f9bc 	bl	8000cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800095e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_TIM3_Init+0xe8>)
 8000966:	f002 ff75 	bl	8003854 <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000970:	f000 f9ae 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000974:	4818      	ldr	r0, [pc, #96]	; (80009d8 <MX_TIM3_Init+0xe8>)
 8000976:	f002 fbd1 	bl	800311c <HAL_TIM_PWM_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000980:	f000 f9a6 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_TIM3_Init+0xe8>)
 8000994:	f003 fc80 	bl	8004298 <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800099e:	f000 f997 	bl	8000cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a2:	2360      	movs	r3, #96	; 0x60
 80009a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	2204      	movs	r2, #4
 80009b6:	4619      	mov	r1, r3
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <MX_TIM3_Init+0xe8>)
 80009ba:	f002 fe37 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80009c4:	f000 f984 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <MX_TIM3_Init+0xe8>)
 80009ca:	f000 fa55 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 80009ce:	bf00      	nop
 80009d0:	3738      	adds	r7, #56	; 0x38
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000ec 	.word	0x200000ec
 80009dc:	40000400 	.word	0x40000400

080009e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a12:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000a14:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <MX_TIM4_Init+0xec>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a18:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a38:	4823      	ldr	r0, [pc, #140]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000a3a:	f002 faa7 	bl	8002f8c <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a44:	f000 f944 	bl	8000cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000a56:	f002 fefd 	bl	8003854 <HAL_TIM_ConfigClockSource>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a60:	f000 f936 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a64:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000a66:	f002 fb59 	bl	800311c <HAL_TIM_PWM_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a70:	f000 f92e 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000a84:	f003 fc08 	bl	8004298 <HAL_TIMEx_MasterConfigSynchronization>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a8e:	f000 f91f 	bl	8000cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a92:	2360      	movs	r3, #96	; 0x60
 8000a94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000aaa:	f002 fdbf 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ab4:	f000 f90c 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM4_Init+0xe8>)
 8000aba:	f000 f9dd 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000abe:	bf00      	nop
 8000ac0:	3738      	adds	r7, #56	; 0x38
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000138 	.word	0x20000138
 8000acc:	40000800 	.word	0x40000800

08000ad0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09a      	sub	sp, #104	; 0x68
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	615a      	str	r2, [r3, #20]
 8000b02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	222c      	movs	r2, #44	; 0x2c
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f006 fada 	bl	80070c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b10:	4b42      	ldr	r3, [pc, #264]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b12:	4a43      	ldr	r2, [pc, #268]	; (8000c20 <MX_TIM8_Init+0x150>)
 8000b14:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000b16:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b3f      	ldr	r3, [pc, #252]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000b22:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b28:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b30:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b36:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b3c:	4837      	ldr	r0, [pc, #220]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b3e:	f002 fa25 	bl	8002f8c <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 f8c2 	bl	8000cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b56:	4619      	mov	r1, r3
 8000b58:	4830      	ldr	r0, [pc, #192]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b5a:	f002 fe7b 	bl	8003854 <HAL_TIM_ConfigClockSource>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000b64:	f000 f8b4 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b68:	482c      	ldr	r0, [pc, #176]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b6a:	f002 fad7 	bl	800311c <HAL_TIM_PWM_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000b74:	f000 f8ac 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4824      	ldr	r0, [pc, #144]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000b8c:	f003 fb84 	bl	8004298 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000b96:	f000 f89b 	bl	8000cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9a:	2360      	movs	r3, #96	; 0x60
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4818      	ldr	r0, [pc, #96]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000bbc:	f002 fd36 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000bc6:	f000 f883 	bl	8000cd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4807      	ldr	r0, [pc, #28]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000c00:	f003 fbd2 	bl	80043a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8000c0a:	f000 f861 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c0e:	4803      	ldr	r0, [pc, #12]	; (8000c1c <MX_TIM8_Init+0x14c>)
 8000c10:	f000 f932 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000c14:	bf00      	nop
 8000c16:	3768      	adds	r7, #104	; 0x68
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000184 	.word	0x20000184
 8000c20:	40013400 	.word	0x40013400

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_GPIO_Init+0x74>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000

08000c9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f003 fd3b 	bl	8004720 <osDelay>
 8000caa:	e7fb      	b.n	8000ca4 <StartDefaultTask+0x8>

08000cac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d101      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cbe:	f000 fa41 	bl	8001144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40012c00 	.word	0x40012c00

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_MspInit+0x4c>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_MspInit+0x4c>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6613      	str	r3, [r2, #96]	; 0x60
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210f      	movs	r1, #15
 8000d16:	f06f 0001 	mvn.w	r0, #1
 8000d1a:	f000 faeb 	bl	80012f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0ac      	sub	sp, #176	; 0xb0
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2288      	movs	r2, #136	; 0x88
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f006 f9b9 	bl	80070c4 <memset>
  if(hi2c->Instance==I2C1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <HAL_I2C_MspInit+0xb0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d13a      	bne.n	8000dd2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d5c:	2340      	movs	r3, #64	; 0x40
 8000d5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fc53 	bl	8002614 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d74:	f7ff ffac 	bl	8000cd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_I2C_MspInit+0xb4>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7c:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <HAL_I2C_MspInit+0xb4>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_I2C_MspInit+0xb4>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d90:	23c0      	movs	r3, #192	; 0xc0
 8000d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d96:	2312      	movs	r3, #18
 8000d98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da8:	2304      	movs	r3, #4
 8000daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db2:	4619      	mov	r1, r3
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <HAL_I2C_MspInit+0xb8>)
 8000db6:	f000 fac7 	bl	8001348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_I2C_MspInit+0xb4>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0xb4>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_I2C_MspInit+0xb4>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	37b0      	adds	r7, #176	; 0xb0
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40021000 	.word	0x40021000
 8000de4:	48000400 	.word	0x48000400

08000de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <HAL_TIM_Base_MspInit+0x80>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10c      	bne.n	8000e14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <HAL_TIM_Base_MspInit+0x84>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <HAL_TIM_Base_MspInit+0x84>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_TIM_Base_MspInit+0x84>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000e12:	e022      	b.n	8000e5a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <HAL_TIM_Base_MspInit+0x88>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10c      	bne.n	8000e38 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <HAL_TIM_Base_MspInit+0x84>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <HAL_TIM_Base_MspInit+0x84>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_TIM_Base_MspInit+0x84>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
}
 8000e36:	e010      	b.n	8000e5a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_TIM_Base_MspInit+0x8c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d10b      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_TIM_Base_MspInit+0x84>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <HAL_TIM_Base_MspInit+0x84>)
 8000e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <HAL_TIM_Base_MspInit+0x84>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
}
 8000e5a:	bf00      	nop
 8000e5c:	371c      	adds	r7, #28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40000800 	.word	0x40000800
 8000e74:	40013400 	.word	0x40013400

08000e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a34      	ldr	r2, [pc, #208]	; (8000f68 <HAL_TIM_MspPostInit+0xf0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d11d      	bne.n	8000ed6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <HAL_TIM_MspPostInit+0xf4>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <HAL_TIM_MspPostInit+0xf4>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <HAL_TIM_MspPostInit+0xf4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f000 fa3a 	bl	8001348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000ed4:	e044      	b.n	8000f60 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a25      	ldr	r2, [pc, #148]	; (8000f70 <HAL_TIM_MspPostInit+0xf8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d11d      	bne.n	8000f1c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <HAL_TIM_MspPostInit+0xf4>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <HAL_TIM_MspPostInit+0xf4>)
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HAL_TIM_MspPostInit+0xf4>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4817      	ldr	r0, [pc, #92]	; (8000f74 <HAL_TIM_MspPostInit+0xfc>)
 8000f16:	f000 fa17 	bl	8001348 <HAL_GPIO_Init>
}
 8000f1a:	e021      	b.n	8000f60 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM8)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <HAL_TIM_MspPostInit+0x100>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d11c      	bne.n	8000f60 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_TIM_MspPostInit+0xf4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_TIM_MspPostInit+0xf4>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_TIM_MspPostInit+0xf4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f50:	2303      	movs	r3, #3
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4808      	ldr	r0, [pc, #32]	; (8000f7c <HAL_TIM_MspPostInit+0x104>)
 8000f5c:	f000 f9f4 	bl	8001348 <HAL_GPIO_Init>
}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40000400 	.word	0x40000400
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40000800 	.word	0x40000800
 8000f74:	48000400 	.word	0x48000400
 8000f78:	40013400 	.word	0x40013400
 8000f7c:	48000800 	.word	0x48000800

08000f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <HAL_InitTick+0xc8>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	4a2d      	ldr	r2, [pc, #180]	; (8001048 <HAL_InitTick+0xc8>)
 8000f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f98:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <HAL_InitTick+0xc8>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fa9d 	bl	80024f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fb6:	f001 fa85 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8000fba:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <HAL_InitTick+0xcc>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	0c9b      	lsrs	r3, r3, #18
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_InitTick+0xd0>)
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <HAL_InitTick+0xd4>)
 8000fce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_InitTick+0xd0>)
 8000fd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fd8:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_InitTick+0xd0>)
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_InitTick+0xd0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_InitTick+0xd0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_InitTick+0xd0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ff0:	4817      	ldr	r0, [pc, #92]	; (8001050 <HAL_InitTick+0xd0>)
 8000ff2:	f001 ffcb 	bl	8002f8c <HAL_TIM_Base_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001000:	2b00      	cmp	r3, #0
 8001002:	d11b      	bne.n	800103c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <HAL_InitTick+0xd0>)
 8001006:	f002 f819 	bl	800303c <HAL_TIM_Base_Start_IT>
 800100a:	4603      	mov	r3, r0
 800100c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001014:	2b00      	cmp	r3, #0
 8001016:	d111      	bne.n	800103c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001018:	2019      	movs	r0, #25
 800101a:	f000 f987 	bl	800132c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d808      	bhi.n	8001036 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	2019      	movs	r0, #25
 800102a:	f000 f963 	bl	80012f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_InitTick+0xd8>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	e002      	b.n	800103c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800103c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001040:	4618      	mov	r0, r3
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	431bde83 	.word	0x431bde83
 8001050:	200001d8 	.word	0x200001d8
 8001054:	40012c00 	.word	0x40012c00
 8001058:	20000004 	.word	0x20000004

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800108e:	f002 f9ad 	bl	80033ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001d8 	.word	0x200001d8

0800109c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c4:	f7ff ffea 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <LoopForever+0x6>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	; (8001100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <LoopForever+0xe>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	; (800110c <LoopForever+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ee:	f005 ffb5 	bl	800705c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f2:	f7ff fb39 	bl	8000768 <main>

080010f6 <LoopForever>:

LoopForever:
    b LoopForever
 80010f6:	e7fe      	b.n	80010f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001104:	0800739c 	.word	0x0800739c
  ldr r2, =_sbss
 8001108:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800110c:	20001bf8 	.word	0x20001bf8

08001110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC1_2_IRQHandler>

08001112 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f8de 	bl	80012de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001122:	200f      	movs	r0, #15
 8001124:	f7ff ff2c 	bl	8000f80 <HAL_InitTick>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	e001      	b.n	8001138 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001134:	f7ff fdd2 	bl	8000cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001138:	79fb      	ldrb	r3, [r7, #7]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	20000224 	.word	0x20000224

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000224 	.word	0x20000224

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff4c 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001306:	f7ff ff61 	bl	80011cc <__NVIC_GetPriorityGrouping>
 800130a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	6978      	ldr	r0, [r7, #20]
 8001312:	f7ff ffb1 	bl	8001278 <NVIC_EncodePriority>
 8001316:	4602      	mov	r2, r0
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff80 	bl	8001224 <__NVIC_SetPriority>
}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff54 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001356:	e17f      	b.n	8001658 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8171 	beq.w	8001652 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d005      	beq.n	8001388 <HAL_GPIO_Init+0x40>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d130      	bne.n	80013ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013be:	2201      	movs	r2, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	f003 0201 	and.w	r2, r3, #1
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d118      	bne.n	8001428 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013fc:	2201      	movs	r2, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	f003 0201 	and.w	r2, r3, #1
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b03      	cmp	r3, #3
 8001432:	d017      	beq.n	8001464 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d123      	bne.n	80014b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0203 	and.w	r2, r3, #3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80ac 	beq.w	8001652 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_GPIO_Init+0x330>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	4a5e      	ldr	r2, [pc, #376]	; (8001678 <HAL_GPIO_Init+0x330>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6613      	str	r3, [r2, #96]	; 0x60
 8001506:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <HAL_GPIO_Init+0x330>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001512:	4a5a      	ldr	r2, [pc, #360]	; (800167c <HAL_GPIO_Init+0x334>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x242>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4f      	ldr	r2, [pc, #316]	; (8001680 <HAL_GPIO_Init+0x338>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x23e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4e      	ldr	r2, [pc, #312]	; (8001684 <HAL_GPIO_Init+0x33c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x23a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4d      	ldr	r2, [pc, #308]	; (8001688 <HAL_GPIO_Init+0x340>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x236>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4c      	ldr	r2, [pc, #304]	; (800168c <HAL_GPIO_Init+0x344>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x232>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_GPIO_Init+0x348>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x22e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4a      	ldr	r2, [pc, #296]	; (8001694 <HAL_GPIO_Init+0x34c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x22a>
 800156e:	2306      	movs	r3, #6
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001572:	2307      	movs	r3, #7
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x244>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x244>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x244>
 800158a:	2300      	movs	r3, #0
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800159c:	4937      	ldr	r1, [pc, #220]	; (800167c <HAL_GPIO_Init+0x334>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_GPIO_Init+0x350>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ce:	4a32      	ldr	r2, [pc, #200]	; (8001698 <HAL_GPIO_Init+0x350>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_GPIO_Init+0x350>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f8:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_GPIO_Init+0x350>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_GPIO_Init+0x350>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_GPIO_Init+0x350>)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_GPIO_Init+0x350>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800164c:	4a12      	ldr	r2, [pc, #72]	; (8001698 <HAL_GPIO_Init+0x350>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f ae78 	bne.w	8001358 <HAL_GPIO_Init+0x10>
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	48001000 	.word	0x48001000
 8001690:	48001400 	.word	0x48001400
 8001694:	48001800 	.word	0x48001800
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e081      	b.n	80017b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d106      	bne.n	80016c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fb32 	bl	8000d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2224      	movs	r2, #36	; 0x24
 80016cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	e006      	b.n	8001724 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001722:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d104      	bne.n	8001736 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001734:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001748:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001758:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69d9      	ldr	r1, [r3, #28]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1a      	ldr	r2, [r3, #32]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0201 	orr.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2220      	movs	r2, #32
 800179e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b20      	cmp	r3, #32
 80017ce:	d138      	bne.n	8001842 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017da:	2302      	movs	r3, #2
 80017dc:	e032      	b.n	8001844 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2224      	movs	r2, #36	; 0x24
 80017ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800180c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2220      	movs	r2, #32
 8001832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001842:	2302      	movs	r3, #2
  }
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b20      	cmp	r3, #32
 8001864:	d139      	bne.n	80018da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001870:	2302      	movs	r3, #2
 8001872:	e033      	b.n	80018dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2224      	movs	r2, #36	; 0x24
 8001880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2220      	movs	r2, #32
 80018ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018da:	2302      	movs	r3, #2
  }
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <HAL_PWREx_GetVoltageRange+0x18>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40007000 	.word	0x40007000

08001904 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001912:	d130      	bne.n	8001976 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800191c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001920:	d038      	beq.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2232      	movs	r2, #50	; 0x32
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0c9b      	lsrs	r3, r3, #18
 8001944:	3301      	adds	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001948:	e002      	b.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3b01      	subs	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195c:	d102      	bne.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x60>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f2      	bne.n	800194a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001970:	d110      	bne.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e00f      	b.n	8001996 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001982:	d007      	beq.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800198c:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001992:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40007000 	.word	0x40007000
 80019a8:	20000000 	.word	0x20000000
 80019ac:	431bde83 	.word	0x431bde83

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e3ca      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019c2:	4b97      	ldr	r3, [pc, #604]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019cc:	4b94      	ldr	r3, [pc, #592]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80e4 	beq.w	8001bac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_RCC_OscConfig+0x4a>
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b0c      	cmp	r3, #12
 80019ee:	f040 808b 	bne.w	8001b08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	f040 8087 	bne.w	8001b08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019fa:	4b89      	ldr	r3, [pc, #548]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_RCC_OscConfig+0x62>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e3a2      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1a      	ldr	r2, [r3, #32]
 8001a16:	4b82      	ldr	r3, [pc, #520]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <HAL_RCC_OscConfig+0x7c>
 8001a22:	4b7f      	ldr	r3, [pc, #508]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a2a:	e005      	b.n	8001a38 <HAL_RCC_OscConfig+0x88>
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d223      	bcs.n	8001a84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 fd87 	bl	8002554 <RCC_SetFlashLatencyFromMSIRange>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e383      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a50:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a72      	ldr	r2, [pc, #456]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a56:	f043 0308 	orr.w	r3, r3, #8
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	496d      	ldr	r1, [pc, #436]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a6e:	4b6c      	ldr	r3, [pc, #432]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	4968      	ldr	r1, [pc, #416]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
 8001a82:	e025      	b.n	8001ad0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a84:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4960      	ldr	r1, [pc, #384]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	495b      	ldr	r1, [pc, #364]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fd47 	bl	8002554 <RCC_SetFlashLatencyFromMSIRange>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e343      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad0:	f000 fc4a 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	4950      	ldr	r1, [pc, #320]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	4a4e      	ldr	r2, [pc, #312]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001aee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001af0:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <HAL_RCC_OscConfig+0x27c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fa43 	bl	8000f80 <HAL_InitTick>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d052      	beq.n	8001baa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	e327      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d032      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b10:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a42      	ldr	r2, [pc, #264]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb26 	bl	800116c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b24:	f7ff fb22 	bl	800116c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e310      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b36:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a36      	ldr	r2, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4931      	ldr	r1, [pc, #196]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b60:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	492c      	ldr	r1, [pc, #176]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
 8001b74:	e01a      	b.n	8001bac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b82:	f7ff faf3 	bl	800116c <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b8a:	f7ff faef 	bl	800116c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e2dd      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x1da>
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001baa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d074      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x21a>
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b0c      	cmp	r3, #12
 8001bc2:	d10e      	bne.n	8001be2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d10b      	bne.n	8001be2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d064      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x2f0>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d160      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e2ba      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x24a>
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e026      	b.n	8001c48 <HAL_RCC_OscConfig+0x298>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c02:	d115      	bne.n	8001c30 <HAL_RCC_OscConfig+0x280>
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a02      	ldr	r2, [pc, #8]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x298>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	080072ec 	.word	0x080072ec
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	4ba0      	ldr	r3, [pc, #640]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a9f      	ldr	r2, [pc, #636]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b9d      	ldr	r3, [pc, #628]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a9c      	ldr	r2, [pc, #624]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fa8c 	bl	800116c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fa88 	bl	800116c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e276      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6a:	4b92      	ldr	r3, [pc, #584]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x2a8>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fa78 	bl	800116c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fa74 	bl	800116c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e262      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c92:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x2d0>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d060      	beq.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x310>
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d119      	bne.n	8001cee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d116      	bne.n	8001cee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc0:	4b7c      	ldr	r3, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x328>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e23f      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b76      	ldr	r3, [pc, #472]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	4973      	ldr	r1, [pc, #460]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cec:	e040      	b.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d023      	beq.n	8001d3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf6:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a6e      	ldr	r2, [pc, #440]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff fa33 	bl	800116c <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fa2f 	bl	800116c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e21d      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1c:	4b65      	ldr	r3, [pc, #404]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	495f      	ldr	r1, [pc, #380]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
 8001d3c:	e018      	b.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a5c      	ldr	r2, [pc, #368]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7ff fa0f 	bl	800116c <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d52:	f7ff fa0b 	bl	800116c <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e1f9      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f0      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d03c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8a:	4a4a      	ldr	r2, [pc, #296]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff f9ea 	bl	800116c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff f9e6 	bl	800116c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1d4      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0ef      	beq.n	8001d9c <HAL_RCC_OscConfig+0x3ec>
 8001dbc:	e01b      	b.n	8001df6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc4:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff f9cd 	bl	800116c <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7ff f9c9 	bl	800116c <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1b7      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de8:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ef      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80a6 	beq.w	8001f50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e30:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_RCC_OscConfig+0x508>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d118      	bne.n	8001e6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <HAL_RCC_OscConfig+0x508>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <HAL_RCC_OscConfig+0x508>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e48:	f7ff f990 	bl	800116c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f7ff f98c 	bl	800116c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e17a      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_RCC_OscConfig+0x508>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4d8>
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e86:	e029      	b.n	8001edc <HAL_RCC_OscConfig+0x52c>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d115      	bne.n	8001ebc <HAL_RCC_OscConfig+0x50c>
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb0:	e014      	b.n	8001edc <HAL_RCC_OscConfig+0x52c>
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	4b9c      	ldr	r3, [pc, #624]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	4a9b      	ldr	r2, [pc, #620]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ecc:	4b98      	ldr	r3, [pc, #608]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	4a97      	ldr	r2, [pc, #604]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d016      	beq.n	8001f12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f942 	bl	800116c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7ff f93e 	bl	800116c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e12a      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f02:	4b8b      	ldr	r3, [pc, #556]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0ed      	beq.n	8001eec <HAL_RCC_OscConfig+0x53c>
 8001f10:	e015      	b.n	8001f3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff f92b 	bl	800116c <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff f927 	bl	800116c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e113      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f30:	4b7f      	ldr	r3, [pc, #508]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ed      	bne.n	8001f1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f3e:	7ffb      	ldrb	r3, [r7, #31]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f44:	4b7a      	ldr	r3, [pc, #488]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	4a79      	ldr	r2, [pc, #484]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80fe 	beq.w	8002156 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	f040 80d0 	bne.w	8002104 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f64:	4b72      	ldr	r3, [pc, #456]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0203 	and.w	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d130      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	3b01      	subs	r3, #1
 8001f84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d127      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d11f      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fa4:	2a07      	cmp	r2, #7
 8001fa6:	bf14      	ite	ne
 8001fa8:	2201      	movne	r2, #1
 8001faa:	2200      	moveq	r2, #0
 8001fac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d113      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d109      	bne.n	8001fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d06e      	beq.n	80020b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d069      	beq.n	80020b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0ad      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ffc:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a4b      	ldr	r2, [pc, #300]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002006:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002008:	f7ff f8b0 	bl	800116c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff f8ac 	bl	800116c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e09a      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002022:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202e:	4b40      	ldr	r3, [pc, #256]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	4b40      	ldr	r3, [pc, #256]	; (8002134 <HAL_RCC_OscConfig+0x784>)
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800203e:	3a01      	subs	r2, #1
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002048:	0212      	lsls	r2, r2, #8
 800204a:	4311      	orrs	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002050:	0852      	lsrs	r2, r2, #1
 8002052:	3a01      	subs	r2, #1
 8002054:	0552      	lsls	r2, r2, #21
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800205c:	0852      	lsrs	r2, r2, #1
 800205e:	3a01      	subs	r2, #1
 8002060:	0652      	lsls	r2, r2, #25
 8002062:	4311      	orrs	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002068:	0912      	lsrs	r2, r2, #4
 800206a:	0452      	lsls	r2, r2, #17
 800206c:	430a      	orrs	r2, r1
 800206e:	4930      	ldr	r1, [pc, #192]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002070:	4313      	orrs	r3, r2
 8002072:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002074:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2d      	ldr	r2, [pc, #180]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 800207a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800208c:	f7ff f86e 	bl	800116c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff f86a 	bl	800116c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e058      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b2:	e050      	b.n	8002156 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e04f      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d148      	bne.n	8002156 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a16      	ldr	r2, [pc, #88]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020dc:	f7ff f846 	bl	800116c <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7ff f842 	bl	800116c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e030      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x734>
 8002102:	e028      	b.n	8002156 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d023      	beq.n	8002152 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_RCC_OscConfig+0x780>)
 8002110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff f829 	bl	800116c <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211c:	e00c      	b.n	8002138 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211e:	f7ff f825 	bl	800116c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d905      	bls.n	8002138 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e013      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
 8002130:	40021000 	.word	0x40021000
 8002134:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_OscConfig+0x7b0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ec      	bne.n	800211e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_OscConfig+0x7b0>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4905      	ldr	r1, [pc, #20]	; (8002160 <HAL_RCC_OscConfig+0x7b0>)
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_OscConfig+0x7b4>)
 800214c:	4013      	ands	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
 8002150:	e001      	b.n	8002156 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	feeefffc 	.word	0xfeeefffc

08002168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0e7      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800217c:	4b75      	ldr	r3, [pc, #468]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d910      	bls.n	80021ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b72      	ldr	r3, [pc, #456]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	4970      	ldr	r1, [pc, #448]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b6e      	ldr	r3, [pc, #440]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0cf      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d010      	beq.n	80021da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	4b66      	ldr	r3, [pc, #408]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d908      	bls.n	80021da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4960      	ldr	r1, [pc, #384]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d04c      	beq.n	8002280 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ee:	4b5a      	ldr	r3, [pc, #360]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d121      	bne.n	800223e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0a6      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002206:	4b54      	ldr	r3, [pc, #336]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d115      	bne.n	800223e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e09a      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800221e:	4b4e      	ldr	r3, [pc, #312]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e08e      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222e:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e086      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800223e:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f023 0203 	bic.w	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4943      	ldr	r1, [pc, #268]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002250:	f7fe ff8c 	bl	800116c <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	e00a      	b.n	800226e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002258:	f7fe ff88 	bl	800116c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e06e      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 020c 	and.w	r2, r3, #12
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	429a      	cmp	r2, r3
 800227e:	d1eb      	bne.n	8002258 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d010      	beq.n	80022ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002298:	429a      	cmp	r2, r3
 800229a:	d208      	bcs.n	80022ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	492b      	ldr	r1, [pc, #172]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d210      	bcs.n	80022de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 0207 	bic.w	r2, r3, #7
 80022c4:	4923      	ldr	r1, [pc, #140]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_RCC_ClockConfig+0x1ec>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e036      	b.n	800234c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4910      	ldr	r1, [pc, #64]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800231c:	f000 f824 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	490b      	ldr	r1, [pc, #44]	; (800235c <HAL_RCC_ClockConfig+0x1f4>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
 8002338:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1f8>)
 800233a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x1fc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fe1d 	bl	8000f80 <HAL_InitTick>
 8002346:	4603      	mov	r3, r0
 8002348:	72fb      	strb	r3, [r7, #11]

  return status;
 800234a:	7afb      	ldrb	r3, [r7, #11]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40022000 	.word	0x40022000
 8002358:	40021000 	.word	0x40021000
 800235c:	080072ec 	.word	0x080072ec
 8002360:	20000000 	.word	0x20000000
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002376:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x34>
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d121      	bne.n	80023da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d11e      	bne.n	80023da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800239c:	4b34      	ldr	r3, [pc, #208]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e005      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10d      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d102      	bne.n	80023e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_RCC_GetSysClockFreq+0x110>)
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	e004      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <HAL_RCC_GetSysClockFreq+0x114>)
 80023ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d134      	bne.n	8002460 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023f6:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d003      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0xa6>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d003      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0xac>
 800240c:	e005      	b.n	800241a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_RCC_GetSysClockFreq+0x110>)
 8002410:	617b      	str	r3, [r7, #20]
      break;
 8002412:	e005      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_RCC_GetSysClockFreq+0x114>)
 8002416:	617b      	str	r3, [r7, #20]
      break;
 8002418:	e002      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	617b      	str	r3, [r7, #20]
      break;
 800241e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	3301      	adds	r3, #1
 800242c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	fb03 f202 	mul.w	r2, r3, r2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_RCC_GetSysClockFreq+0x108>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	0e5b      	lsrs	r3, r3, #25
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	3301      	adds	r3, #1
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002460:	69bb      	ldr	r3, [r7, #24]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	08007304 	.word	0x08007304
 8002478:	00f42400 	.word	0x00f42400
 800247c:	007a1200 	.word	0x007a1200

08002480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_RCC_GetHCLKFreq+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000000 	.word	0x20000000

08002498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800249c:	f7ff fff0 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	080072fc 	.word	0x080072fc

080024c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024c8:	f7ff ffda 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0adb      	lsrs	r3, r3, #11
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4904      	ldr	r1, [pc, #16]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	080072fc 	.word	0x080072fc

080024f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	220f      	movs	r2, #15
 80024fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_GetClockConfig+0x5c>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_RCC_GetClockConfig+0x5c>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_RCC_GetClockConfig+0x5c>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_GetClockConfig+0x5c>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_RCC_GetClockConfig+0x60>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0207 	and.w	r2, r3, #7
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	601a      	str	r2, [r3, #0]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	40022000 	.word	0x40022000

08002554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800256c:	f7ff f9bc 	bl	80018e8 <HAL_PWREx_GetVoltageRange>
 8002570:	6178      	str	r0, [r7, #20]
 8002572:	e014      	b.n	800259e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	4a24      	ldr	r2, [pc, #144]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	6593      	str	r3, [r2, #88]	; 0x58
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800258c:	f7ff f9ac 	bl	80018e8 <HAL_PWREx_GetVoltageRange>
 8002590:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002592:	4b1e      	ldr	r3, [pc, #120]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	4a1d      	ldr	r2, [pc, #116]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a4:	d10b      	bne.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b80      	cmp	r3, #128	; 0x80
 80025aa:	d919      	bls.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2ba0      	cmp	r3, #160	; 0xa0
 80025b0:	d902      	bls.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025b2:	2302      	movs	r3, #2
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	e013      	b.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025b8:	2301      	movs	r3, #1
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e010      	b.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b80      	cmp	r3, #128	; 0x80
 80025c2:	d902      	bls.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025c4:	2303      	movs	r3, #3
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	e00a      	b.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b80      	cmp	r3, #128	; 0x80
 80025ce:	d102      	bne.n	80025d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d0:	2302      	movs	r3, #2
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	e004      	b.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b70      	cmp	r3, #112	; 0x70
 80025da:	d101      	bne.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025dc:	2301      	movs	r3, #1
 80025de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 0207 	bic.w	r2, r3, #7
 80025e8:	4909      	ldr	r1, [pc, #36]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d001      	beq.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	40022000 	.word	0x40022000

08002614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800261c:	2300      	movs	r3, #0
 800261e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002620:	2300      	movs	r3, #0
 8002622:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262c:	2b00      	cmp	r3, #0
 800262e:	d041      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002634:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002638:	d02a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800263a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800263e:	d824      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002644:	d008      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800264a:	d81e      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002654:	d010      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002656:	e018      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002658:	4b86      	ldr	r3, [pc, #536]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a85      	ldr	r2, [pc, #532]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002664:	e015      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3304      	adds	r3, #4
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fabb 	bl	8002be8 <RCCEx_PLLSAI1_Config>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002676:	e00c      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3320      	adds	r3, #32
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fba6 	bl	8002dd0 <RCCEx_PLLSAI2_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002688:	e003      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	74fb      	strb	r3, [r7, #19]
      break;
 800268e:	e000      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002698:	4b76      	ldr	r3, [pc, #472]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a6:	4973      	ldr	r1, [pc, #460]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026ae:	e001      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d041      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026c8:	d02a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026ce:	d824      	bhi.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026d4:	d008      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026da:	d81e      	bhi.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e4:	d010      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026e6:	e018      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026e8:	4b62      	ldr	r3, [pc, #392]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a61      	ldr	r2, [pc, #388]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026f4:	e015      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fa73 	bl	8002be8 <RCCEx_PLLSAI1_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002706:	e00c      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3320      	adds	r3, #32
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fb5e 	bl	8002dd0 <RCCEx_PLLSAI2_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002718:	e003      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	74fb      	strb	r3, [r7, #19]
      break;
 800271e:	e000      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002728:	4b52      	ldr	r3, [pc, #328]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002736:	494f      	ldr	r1, [pc, #316]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800273e:	e001      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80a0 	beq.w	8002892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00d      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276c:	4b41      	ldr	r3, [pc, #260]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	4a40      	ldr	r2, [pc, #256]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002776:	6593      	str	r3, [r2, #88]	; 0x58
 8002778:	4b3e      	ldr	r3, [pc, #248]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002784:	2301      	movs	r3, #1
 8002786:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002788:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a3a      	ldr	r2, [pc, #232]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002794:	f7fe fcea 	bl	800116c <HAL_GetTick>
 8002798:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800279a:	e009      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279c:	f7fe fce6 	bl	800116c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d902      	bls.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	74fb      	strb	r3, [r7, #19]
        break;
 80027ae:	e005      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027b0:	4b31      	ldr	r3, [pc, #196]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ef      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d15c      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01f      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d019      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027ec:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	4a20      	ldr	r2, [pc, #128]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fca5 	bl	800116c <HAL_GetTick>
 8002822:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002824:	e00b      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe fca1 	bl	800116c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d902      	bls.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	74fb      	strb	r3, [r7, #19]
            break;
 800283c:	e006      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ec      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002862:	4904      	ldr	r1, [pc, #16]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800286a:	e009      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	74bb      	strb	r3, [r7, #18]
 8002870:	e006      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002880:	7c7b      	ldrb	r3, [r7, #17]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d105      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002886:	4b9e      	ldr	r3, [pc, #632]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	4a9d      	ldr	r2, [pc, #628]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002890:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800289e:	4b98      	ldr	r3, [pc, #608]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a4:	f023 0203 	bic.w	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	4994      	ldr	r1, [pc, #592]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c0:	4b8f      	ldr	r3, [pc, #572]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f023 020c 	bic.w	r2, r3, #12
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	498c      	ldr	r1, [pc, #560]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028e2:	4b87      	ldr	r3, [pc, #540]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	4983      	ldr	r1, [pc, #524]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002904:	4b7e      	ldr	r3, [pc, #504]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	497b      	ldr	r1, [pc, #492]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002926:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002934:	4972      	ldr	r1, [pc, #456]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002948:	4b6d      	ldr	r3, [pc, #436]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	496a      	ldr	r1, [pc, #424]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800296a:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	4961      	ldr	r1, [pc, #388]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800298c:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299a:	4959      	ldr	r1, [pc, #356]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ae:	4b54      	ldr	r3, [pc, #336]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029bc:	4950      	ldr	r1, [pc, #320]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029d0:	4b4b      	ldr	r3, [pc, #300]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	4948      	ldr	r1, [pc, #288]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029f2:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	493f      	ldr	r1, [pc, #252]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d028      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a14:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a22:	4937      	ldr	r1, [pc, #220]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a32:	d106      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
 8002a40:	e011      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a4a:	d10c      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f8c8 	bl	8002be8 <RCCEx_PLLSAI1_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d028      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	491f      	ldr	r1, [pc, #124]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9c:	60d3      	str	r3, [r2, #12]
 8002a9e:	e011      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f899 	bl	8002be8 <RCCEx_PLLSAI1_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02b      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ade:	4908      	ldr	r1, [pc, #32]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d109      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a02      	ldr	r2, [pc, #8]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
 8002afc:	e014      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f867 	bl	8002be8 <RCCEx_PLLSAI1_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02f      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b34:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b42:	4928      	ldr	r1, [pc, #160]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b52:	d10d      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	2102      	movs	r1, #2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f844 	bl	8002be8 <RCCEx_PLLSAI1_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d014      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	74bb      	strb	r3, [r7, #18]
 8002b6e:	e011      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3320      	adds	r3, #32
 8002b7e:	2102      	movs	r1, #2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f925 	bl	8002dd0 <RCCEx_PLLSAI2_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bae:	490d      	ldr	r1, [pc, #52]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd2:	4904      	ldr	r1, [pc, #16]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bda:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000

08002be8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bf6:	4b75      	ldr	r3, [pc, #468]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d018      	beq.n	8002c34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c02:	4b72      	ldr	r3, [pc, #456]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0203 	and.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d10d      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
       ||
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c1a:	4b6c      	ldr	r3, [pc, #432]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
       ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d047      	beq.n	8002cbe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
 8002c32:	e044      	b.n	8002cbe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d018      	beq.n	8002c6e <RCCEx_PLLSAI1_Config+0x86>
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d825      	bhi.n	8002c8c <RCCEx_PLLSAI1_Config+0xa4>
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d002      	beq.n	8002c4a <RCCEx_PLLSAI1_Config+0x62>
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d009      	beq.n	8002c5c <RCCEx_PLLSAI1_Config+0x74>
 8002c48:	e020      	b.n	8002c8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c4a:	4b60      	ldr	r3, [pc, #384]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d11d      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5a:	e01a      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c5c:	4b5b      	ldr	r3, [pc, #364]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d116      	bne.n	8002c96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6c:	e013      	b.n	8002c96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c6e:	4b57      	ldr	r3, [pc, #348]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c7a:	4b54      	ldr	r3, [pc, #336]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c8a:	e006      	b.n	8002c9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c90:	e004      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c92:	bf00      	nop
 8002c94:	e002      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6819      	ldr	r1, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	4944      	ldr	r1, [pc, #272]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d17d      	bne.n	8002dc0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cc4:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fa4c 	bl	800116c <HAL_GetTick>
 8002cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd6:	e009      	b.n	8002cec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cd8:	f7fe fa48 	bl	800116c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d902      	bls.n	8002cec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8002cea:	e005      	b.n	8002cf8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cec:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ef      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d160      	bne.n	8002dc0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d111      	bne.n	8002d28 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d04:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6892      	ldr	r2, [r2, #8]
 8002d14:	0211      	lsls	r1, r2, #8
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68d2      	ldr	r2, [r2, #12]
 8002d1a:	0912      	lsrs	r2, r2, #4
 8002d1c:	0452      	lsls	r2, r2, #17
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	492a      	ldr	r1, [pc, #168]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	610b      	str	r3, [r1, #16]
 8002d26:	e027      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d112      	bne.n	8002d54 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d2e:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6892      	ldr	r2, [r2, #8]
 8002d3e:	0211      	lsls	r1, r2, #8
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6912      	ldr	r2, [r2, #16]
 8002d44:	0852      	lsrs	r2, r2, #1
 8002d46:	3a01      	subs	r2, #1
 8002d48:	0552      	lsls	r2, r2, #21
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	491f      	ldr	r1, [pc, #124]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	610b      	str	r3, [r1, #16]
 8002d52:	e011      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6892      	ldr	r2, [r2, #8]
 8002d64:	0211      	lsls	r1, r2, #8
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6952      	ldr	r2, [r2, #20]
 8002d6a:	0852      	lsrs	r2, r2, #1
 8002d6c:	3a01      	subs	r2, #1
 8002d6e:	0652      	lsls	r2, r2, #25
 8002d70:	430a      	orrs	r2, r1
 8002d72:	4916      	ldr	r1, [pc, #88]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe f9f2 	bl	800116c <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d8a:	e009      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d8c:	f7fe f9ee 	bl	800116c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d9e:	e005      	b.n	8002dac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	4904      	ldr	r1, [pc, #16]	; (8002dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dde:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d018      	beq.n	8002e1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dea:	4b67      	ldr	r3, [pc, #412]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0203 	and.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d10d      	bne.n	8002e16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e02:	4b61      	ldr	r3, [pc, #388]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
       ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d047      	beq.n	8002ea6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
 8002e1a:	e044      	b.n	8002ea6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d018      	beq.n	8002e56 <RCCEx_PLLSAI2_Config+0x86>
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d825      	bhi.n	8002e74 <RCCEx_PLLSAI2_Config+0xa4>
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d002      	beq.n	8002e32 <RCCEx_PLLSAI2_Config+0x62>
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d009      	beq.n	8002e44 <RCCEx_PLLSAI2_Config+0x74>
 8002e30:	e020      	b.n	8002e74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e32:	4b55      	ldr	r3, [pc, #340]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d11d      	bne.n	8002e7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e42:	e01a      	b.n	8002e7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e44:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d116      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e54:	e013      	b.n	8002e7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e56:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10f      	bne.n	8002e82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e62:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e72:	e006      	b.n	8002e82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      break;
 8002e78:	e004      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e002      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e000      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e82:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6819      	ldr	r1, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	4939      	ldr	r1, [pc, #228]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d167      	bne.n	8002f7c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002eac:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a35      	ldr	r2, [pc, #212]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb8:	f7fe f958 	bl	800116c <HAL_GetTick>
 8002ebc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ebe:	e009      	b.n	8002ed4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ec0:	f7fe f954 	bl	800116c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d902      	bls.n	8002ed4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ed2:	e005      	b.n	8002ee0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1ef      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d14a      	bne.n	8002f7c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d111      	bne.n	8002f10 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eec:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6892      	ldr	r2, [r2, #8]
 8002efc:	0211      	lsls	r1, r2, #8
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68d2      	ldr	r2, [r2, #12]
 8002f02:	0912      	lsrs	r2, r2, #4
 8002f04:	0452      	lsls	r2, r2, #17
 8002f06:	430a      	orrs	r2, r1
 8002f08:	491f      	ldr	r1, [pc, #124]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	614b      	str	r3, [r1, #20]
 8002f0e:	e011      	b.n	8002f34 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6892      	ldr	r2, [r2, #8]
 8002f20:	0211      	lsls	r1, r2, #8
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6912      	ldr	r2, [r2, #16]
 8002f26:	0852      	lsrs	r2, r2, #1
 8002f28:	3a01      	subs	r2, #1
 8002f2a:	0652      	lsls	r2, r2, #25
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	4916      	ldr	r1, [pc, #88]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe f914 	bl	800116c <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f46:	e009      	b.n	8002f5c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f48:	f7fe f910 	bl	800116c <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d902      	bls.n	8002f5c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	73fb      	strb	r3, [r7, #15]
          break;
 8002f5a:	e005      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ef      	beq.n	8002f48 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	4904      	ldr	r1, [pc, #16]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000

08002f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e049      	b.n	8003032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd ff18 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 fd34 	bl	8003a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d001      	beq.n	8003054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e04f      	b.n	80030f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a23      	ldr	r2, [pc, #140]	; (8003100 <HAL_TIM_Base_Start_IT+0xc4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307e:	d018      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1f      	ldr	r2, [pc, #124]	; (8003104 <HAL_TIM_Base_Start_IT+0xc8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_TIM_Base_Start_IT+0xcc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_TIM_Base_Start_IT+0xd0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <HAL_TIM_Base_Start_IT+0xd4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a19      	ldr	r2, [pc, #100]	; (8003114 <HAL_TIM_Base_Start_IT+0xd8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d115      	bne.n	80030de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_TIM_Base_Start_IT+0xdc>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b06      	cmp	r3, #6
 80030c2:	d015      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0xb4>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ca:	d011      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030dc:	e008      	b.n	80030f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e000      	b.n	80030f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800
 800310c:	40000c00 	.word	0x40000c00
 8003110:	40013400 	.word	0x40013400
 8003114:	40014000 	.word	0x40014000
 8003118:	00010007 	.word	0x00010007

0800311c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e049      	b.n	80031c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f841 	bl	80031ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3304      	adds	r3, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f000 fc6c 	bl	8003a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <HAL_TIM_PWM_Start+0x24>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e03c      	b.n	800327e <HAL_TIM_PWM_Start+0x9e>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b04      	cmp	r3, #4
 8003208:	d109      	bne.n	800321e <HAL_TIM_PWM_Start+0x3e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e02f      	b.n	800327e <HAL_TIM_PWM_Start+0x9e>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d109      	bne.n	8003238 <HAL_TIM_PWM_Start+0x58>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e022      	b.n	800327e <HAL_TIM_PWM_Start+0x9e>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d109      	bne.n	8003252 <HAL_TIM_PWM_Start+0x72>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b01      	cmp	r3, #1
 8003248:	bf14      	ite	ne
 800324a:	2301      	movne	r3, #1
 800324c:	2300      	moveq	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e015      	b.n	800327e <HAL_TIM_PWM_Start+0x9e>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b10      	cmp	r3, #16
 8003256:	d109      	bne.n	800326c <HAL_TIM_PWM_Start+0x8c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e008      	b.n	800327e <HAL_TIM_PWM_Start+0x9e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e09c      	b.n	80033c0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d104      	bne.n	8003296 <HAL_TIM_PWM_Start+0xb6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003294:	e023      	b.n	80032de <HAL_TIM_PWM_Start+0xfe>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_PWM_Start+0xc6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a4:	e01b      	b.n	80032de <HAL_TIM_PWM_Start+0xfe>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_PWM_Start+0xd6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b4:	e013      	b.n	80032de <HAL_TIM_PWM_Start+0xfe>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_PWM_Start+0xe6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032c4:	e00b      	b.n	80032de <HAL_TIM_PWM_Start+0xfe>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_PWM_Start+0xf6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d4:	e003      	b.n	80032de <HAL_TIM_PWM_Start+0xfe>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	6839      	ldr	r1, [r7, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 ffb0 	bl	800424c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a35      	ldr	r2, [pc, #212]	; (80033c8 <HAL_TIM_PWM_Start+0x1e8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_TIM_PWM_Start+0x13e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a34      	ldr	r2, [pc, #208]	; (80033cc <HAL_TIM_PWM_Start+0x1ec>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_TIM_PWM_Start+0x13e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a32      	ldr	r2, [pc, #200]	; (80033d0 <HAL_TIM_PWM_Start+0x1f0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_TIM_PWM_Start+0x13e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a31      	ldr	r2, [pc, #196]	; (80033d4 <HAL_TIM_PWM_Start+0x1f4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_TIM_PWM_Start+0x13e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2f      	ldr	r2, [pc, #188]	; (80033d8 <HAL_TIM_PWM_Start+0x1f8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d101      	bne.n	8003322 <HAL_TIM_PWM_Start+0x142>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_TIM_PWM_Start+0x144>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003336:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <HAL_TIM_PWM_Start+0x1e8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_TIM_PWM_Start+0x19e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334a:	d018      	beq.n	800337e <HAL_TIM_PWM_Start+0x19e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a22      	ldr	r2, [pc, #136]	; (80033dc <HAL_TIM_PWM_Start+0x1fc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_TIM_PWM_Start+0x19e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <HAL_TIM_PWM_Start+0x200>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIM_PWM_Start+0x19e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <HAL_TIM_PWM_Start+0x204>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_TIM_PWM_Start+0x19e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a17      	ldr	r2, [pc, #92]	; (80033cc <HAL_TIM_PWM_Start+0x1ec>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIM_PWM_Start+0x19e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <HAL_TIM_PWM_Start+0x1f0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d115      	bne.n	80033aa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_TIM_PWM_Start+0x208>)
 8003386:	4013      	ands	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b06      	cmp	r3, #6
 800338e:	d015      	beq.n	80033bc <HAL_TIM_PWM_Start+0x1dc>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003396:	d011      	beq.n	80033bc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a8:	e008      	b.n	80033bc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e000      	b.n	80033be <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40013400 	.word	0x40013400
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40014400 	.word	0x40014400
 80033d8:	40014800 	.word	0x40014800
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	00010007 	.word	0x00010007

080033ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d122      	bne.n	8003448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b02      	cmp	r3, #2
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0202 	mvn.w	r2, #2
 8003418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fae3 	bl	80039fa <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fad5 	bl	80039e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fae6 	bl	8003a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0204 	mvn.w	r2, #4
 800346c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fab9 	bl	80039fa <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 faab 	bl	80039e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fabc 	bl	8003a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0208 	mvn.w	r2, #8
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2204      	movs	r2, #4
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa8f 	bl	80039fa <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa81 	bl	80039e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa92 	bl	8003a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b10      	cmp	r3, #16
 80034fc:	d122      	bne.n	8003544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b10      	cmp	r3, #16
 800350a:	d11b      	bne.n	8003544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0210 	mvn.w	r2, #16
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2208      	movs	r2, #8
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa65 	bl	80039fa <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa57 	bl	80039e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fa68 	bl	8003a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10e      	bne.n	8003570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d107      	bne.n	8003570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0201 	mvn.w	r2, #1
 8003568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd fb9e 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	2b80      	cmp	r3, #128	; 0x80
 800357c:	d10e      	bne.n	800359c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d107      	bne.n	800359c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 ff8e 	bl	80044b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035aa:	d10e      	bne.n	80035ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b80      	cmp	r3, #128	; 0x80
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 ff81 	bl	80044cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d10e      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d107      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fa16 	bl	8003a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d10e      	bne.n	8003622 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b20      	cmp	r3, #32
 8003610:	d107      	bne.n	8003622 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f06f 0220 	mvn.w	r2, #32
 800361a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 ff41 	bl	80044a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003646:	2302      	movs	r3, #2
 8003648:	e0ff      	b.n	800384a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b14      	cmp	r3, #20
 8003656:	f200 80f0 	bhi.w	800383a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800365a:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	080036b5 	.word	0x080036b5
 8003664:	0800383b 	.word	0x0800383b
 8003668:	0800383b 	.word	0x0800383b
 800366c:	0800383b 	.word	0x0800383b
 8003670:	080036f5 	.word	0x080036f5
 8003674:	0800383b 	.word	0x0800383b
 8003678:	0800383b 	.word	0x0800383b
 800367c:	0800383b 	.word	0x0800383b
 8003680:	08003737 	.word	0x08003737
 8003684:	0800383b 	.word	0x0800383b
 8003688:	0800383b 	.word	0x0800383b
 800368c:	0800383b 	.word	0x0800383b
 8003690:	08003777 	.word	0x08003777
 8003694:	0800383b 	.word	0x0800383b
 8003698:	0800383b 	.word	0x0800383b
 800369c:	0800383b 	.word	0x0800383b
 80036a0:	080037b9 	.word	0x080037b9
 80036a4:	0800383b 	.word	0x0800383b
 80036a8:	0800383b 	.word	0x0800383b
 80036ac:	0800383b 	.word	0x0800383b
 80036b0:	080037f9 	.word	0x080037f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fa56 	bl	8003b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0208 	orr.w	r2, r2, #8
 80036ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0204 	bic.w	r2, r2, #4
 80036de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6999      	ldr	r1, [r3, #24]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	619a      	str	r2, [r3, #24]
      break;
 80036f2:	e0a5      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fac6 	bl	8003c8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6999      	ldr	r1, [r3, #24]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	021a      	lsls	r2, r3, #8
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	619a      	str	r2, [r3, #24]
      break;
 8003734:	e084      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fb2f 	bl	8003da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0208 	orr.w	r2, r2, #8
 8003750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0204 	bic.w	r2, r2, #4
 8003760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69d9      	ldr	r1, [r3, #28]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	61da      	str	r2, [r3, #28]
      break;
 8003774:	e064      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fb97 	bl	8003eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69d9      	ldr	r1, [r3, #28]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	021a      	lsls	r2, r3, #8
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	61da      	str	r2, [r3, #28]
      break;
 80037b6:	e043      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fbe0 	bl	8003f84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0208 	orr.w	r2, r2, #8
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0204 	bic.w	r2, r2, #4
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037f6:	e023      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fc24 	bl	800404c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	021a      	lsls	r2, r3, #8
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003838:	e002      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
      break;
 800383e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop

08003854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_TIM_ConfigClockSource+0x1c>
 800386c:	2302      	movs	r3, #2
 800386e:	e0b6      	b.n	80039de <HAL_TIM_ConfigClockSource+0x18a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800389a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ac:	d03e      	beq.n	800392c <HAL_TIM_ConfigClockSource+0xd8>
 80038ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b2:	f200 8087 	bhi.w	80039c4 <HAL_TIM_ConfigClockSource+0x170>
 80038b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ba:	f000 8086 	beq.w	80039ca <HAL_TIM_ConfigClockSource+0x176>
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c2:	d87f      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x170>
 80038c4:	2b70      	cmp	r3, #112	; 0x70
 80038c6:	d01a      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0xaa>
 80038c8:	2b70      	cmp	r3, #112	; 0x70
 80038ca:	d87b      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x170>
 80038cc:	2b60      	cmp	r3, #96	; 0x60
 80038ce:	d050      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x11e>
 80038d0:	2b60      	cmp	r3, #96	; 0x60
 80038d2:	d877      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x170>
 80038d4:	2b50      	cmp	r3, #80	; 0x50
 80038d6:	d03c      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0xfe>
 80038d8:	2b50      	cmp	r3, #80	; 0x50
 80038da:	d873      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x170>
 80038dc:	2b40      	cmp	r3, #64	; 0x40
 80038de:	d058      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x13e>
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d86f      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x170>
 80038e4:	2b30      	cmp	r3, #48	; 0x30
 80038e6:	d064      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x15e>
 80038e8:	2b30      	cmp	r3, #48	; 0x30
 80038ea:	d86b      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x170>
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d060      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x15e>
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d867      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x170>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d05c      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x15e>
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d05a      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x15e>
 80038fc:	e062      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6899      	ldr	r1, [r3, #8]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f000 fc7d 	bl	800420c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	609a      	str	r2, [r3, #8]
      break;
 800392a:	e04f      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6899      	ldr	r1, [r3, #8]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f000 fc66 	bl	800420c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800394e:	609a      	str	r2, [r3, #8]
      break;
 8003950:	e03c      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	461a      	mov	r2, r3
 8003960:	f000 fbda 	bl	8004118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2150      	movs	r1, #80	; 0x50
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fc33 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 8003970:	e02c      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	461a      	mov	r2, r3
 8003980:	f000 fbf9 	bl	8004176 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2160      	movs	r1, #96	; 0x60
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fc23 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 8003990:	e01c      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	461a      	mov	r2, r3
 80039a0:	f000 fbba 	bl	8004118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2140      	movs	r1, #64	; 0x40
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fc13 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 80039b0:	e00c      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4619      	mov	r1, r3
 80039bc:	4610      	mov	r0, r2
 80039be:	f000 fc0a 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 80039c2:	e003      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
      break;
 80039c8:	e000      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80039ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a40      	ldr	r2, [pc, #256]	; (8003b4c <TIM_Base_SetConfig+0x114>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <TIM_Base_SetConfig+0x40>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a56:	d00f      	beq.n	8003a78 <TIM_Base_SetConfig+0x40>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3d      	ldr	r2, [pc, #244]	; (8003b50 <TIM_Base_SetConfig+0x118>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <TIM_Base_SetConfig+0x40>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a3c      	ldr	r2, [pc, #240]	; (8003b54 <TIM_Base_SetConfig+0x11c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d007      	beq.n	8003a78 <TIM_Base_SetConfig+0x40>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a3b      	ldr	r2, [pc, #236]	; (8003b58 <TIM_Base_SetConfig+0x120>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a3a      	ldr	r2, [pc, #232]	; (8003b5c <TIM_Base_SetConfig+0x124>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d108      	bne.n	8003a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a2f      	ldr	r2, [pc, #188]	; (8003b4c <TIM_Base_SetConfig+0x114>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01f      	beq.n	8003ad2 <TIM_Base_SetConfig+0x9a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a98:	d01b      	beq.n	8003ad2 <TIM_Base_SetConfig+0x9a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2c      	ldr	r2, [pc, #176]	; (8003b50 <TIM_Base_SetConfig+0x118>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d017      	beq.n	8003ad2 <TIM_Base_SetConfig+0x9a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a2b      	ldr	r2, [pc, #172]	; (8003b54 <TIM_Base_SetConfig+0x11c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <TIM_Base_SetConfig+0x9a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <TIM_Base_SetConfig+0x120>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00f      	beq.n	8003ad2 <TIM_Base_SetConfig+0x9a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a29      	ldr	r2, [pc, #164]	; (8003b5c <TIM_Base_SetConfig+0x124>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_Base_SetConfig+0x9a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a28      	ldr	r2, [pc, #160]	; (8003b60 <TIM_Base_SetConfig+0x128>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_Base_SetConfig+0x9a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a27      	ldr	r2, [pc, #156]	; (8003b64 <TIM_Base_SetConfig+0x12c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0x9a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a26      	ldr	r2, [pc, #152]	; (8003b68 <TIM_Base_SetConfig+0x130>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a10      	ldr	r2, [pc, #64]	; (8003b4c <TIM_Base_SetConfig+0x114>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00f      	beq.n	8003b30 <TIM_Base_SetConfig+0xf8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <TIM_Base_SetConfig+0x124>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00b      	beq.n	8003b30 <TIM_Base_SetConfig+0xf8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a11      	ldr	r2, [pc, #68]	; (8003b60 <TIM_Base_SetConfig+0x128>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d007      	beq.n	8003b30 <TIM_Base_SetConfig+0xf8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a10      	ldr	r2, [pc, #64]	; (8003b64 <TIM_Base_SetConfig+0x12c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_Base_SetConfig+0xf8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a0f      	ldr	r2, [pc, #60]	; (8003b68 <TIM_Base_SetConfig+0x130>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d103      	bne.n	8003b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	615a      	str	r2, [r3, #20]
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800
 8003b58:	40000c00 	.word	0x40000c00
 8003b5c:	40013400 	.word	0x40013400
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40014400 	.word	0x40014400
 8003b68:	40014800 	.word	0x40014800

08003b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f023 0302 	bic.w	r3, r3, #2
 8003bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a2c      	ldr	r2, [pc, #176]	; (8003c78 <TIM_OC1_SetConfig+0x10c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00f      	beq.n	8003bec <TIM_OC1_SetConfig+0x80>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <TIM_OC1_SetConfig+0x110>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <TIM_OC1_SetConfig+0x80>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	; (8003c80 <TIM_OC1_SetConfig+0x114>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <TIM_OC1_SetConfig+0x80>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a29      	ldr	r2, [pc, #164]	; (8003c84 <TIM_OC1_SetConfig+0x118>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_OC1_SetConfig+0x80>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a28      	ldr	r2, [pc, #160]	; (8003c88 <TIM_OC1_SetConfig+0x11c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d10c      	bne.n	8003c06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f023 0308 	bic.w	r3, r3, #8
 8003bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f023 0304 	bic.w	r3, r3, #4
 8003c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <TIM_OC1_SetConfig+0x10c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00f      	beq.n	8003c2e <TIM_OC1_SetConfig+0xc2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <TIM_OC1_SetConfig+0x110>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_OC1_SetConfig+0xc2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <TIM_OC1_SetConfig+0x114>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_OC1_SetConfig+0xc2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <TIM_OC1_SetConfig+0x118>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_OC1_SetConfig+0xc2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a17      	ldr	r2, [pc, #92]	; (8003c88 <TIM_OC1_SetConfig+0x11c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d111      	bne.n	8003c52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	621a      	str	r2, [r3, #32]
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40013400 	.word	0x40013400
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40014400 	.word	0x40014400
 8003c88:	40014800 	.word	0x40014800

08003c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0210 	bic.w	r2, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0320 	bic.w	r3, r3, #32
 8003cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <TIM_OC2_SetConfig+0x100>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_OC2_SetConfig+0x6c>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a27      	ldr	r2, [pc, #156]	; (8003d90 <TIM_OC2_SetConfig+0x104>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10d      	bne.n	8003d14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <TIM_OC2_SetConfig+0x100>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00f      	beq.n	8003d3c <TIM_OC2_SetConfig+0xb0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <TIM_OC2_SetConfig+0x104>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <TIM_OC2_SetConfig+0xb0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1b      	ldr	r2, [pc, #108]	; (8003d94 <TIM_OC2_SetConfig+0x108>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <TIM_OC2_SetConfig+0xb0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a1a      	ldr	r2, [pc, #104]	; (8003d98 <TIM_OC2_SetConfig+0x10c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_OC2_SetConfig+0xb0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <TIM_OC2_SetConfig+0x110>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d113      	bne.n	8003d64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40013400 	.word	0x40013400
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40014400 	.word	0x40014400
 8003d9c:	40014800 	.word	0x40014800

08003da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a27      	ldr	r2, [pc, #156]	; (8003e9c <TIM_OC3_SetConfig+0xfc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_OC3_SetConfig+0x6a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <TIM_OC3_SetConfig+0x100>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10d      	bne.n	8003e26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <TIM_OC3_SetConfig+0xfc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00f      	beq.n	8003e4e <TIM_OC3_SetConfig+0xae>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <TIM_OC3_SetConfig+0x100>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00b      	beq.n	8003e4e <TIM_OC3_SetConfig+0xae>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <TIM_OC3_SetConfig+0x104>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <TIM_OC3_SetConfig+0xae>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <TIM_OC3_SetConfig+0x108>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_OC3_SetConfig+0xae>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a18      	ldr	r2, [pc, #96]	; (8003eac <TIM_OC3_SetConfig+0x10c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d113      	bne.n	8003e76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	621a      	str	r2, [r3, #32]
}
 8003e90:	bf00      	nop
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40013400 	.word	0x40013400
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800

08003eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	031b      	lsls	r3, r3, #12
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <TIM_OC4_SetConfig+0xc0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00f      	beq.n	8003f34 <TIM_OC4_SetConfig+0x84>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <TIM_OC4_SetConfig+0xc4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <TIM_OC4_SetConfig+0x84>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <TIM_OC4_SetConfig+0xc8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <TIM_OC4_SetConfig+0x84>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <TIM_OC4_SetConfig+0xcc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_OC4_SetConfig+0x84>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <TIM_OC4_SetConfig+0xd0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d109      	bne.n	8003f48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40013400 	.word	0x40013400
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800

08003f84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	041b      	lsls	r3, r3, #16
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a17      	ldr	r2, [pc, #92]	; (8004038 <TIM_OC5_SetConfig+0xb4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00f      	beq.n	8003ffe <TIM_OC5_SetConfig+0x7a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a16      	ldr	r2, [pc, #88]	; (800403c <TIM_OC5_SetConfig+0xb8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <TIM_OC5_SetConfig+0x7a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <TIM_OC5_SetConfig+0xbc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <TIM_OC5_SetConfig+0x7a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a14      	ldr	r2, [pc, #80]	; (8004044 <TIM_OC5_SetConfig+0xc0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_OC5_SetConfig+0x7a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	; (8004048 <TIM_OC5_SetConfig+0xc4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d109      	bne.n	8004012 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	621a      	str	r2, [r3, #32]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40013400 	.word	0x40013400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800

0800404c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800407a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	051b      	lsls	r3, r3, #20
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a18      	ldr	r2, [pc, #96]	; (8004104 <TIM_OC6_SetConfig+0xb8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00f      	beq.n	80040c8 <TIM_OC6_SetConfig+0x7c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a17      	ldr	r2, [pc, #92]	; (8004108 <TIM_OC6_SetConfig+0xbc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00b      	beq.n	80040c8 <TIM_OC6_SetConfig+0x7c>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a16      	ldr	r2, [pc, #88]	; (800410c <TIM_OC6_SetConfig+0xc0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d007      	beq.n	80040c8 <TIM_OC6_SetConfig+0x7c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a15      	ldr	r2, [pc, #84]	; (8004110 <TIM_OC6_SetConfig+0xc4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_OC6_SetConfig+0x7c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a14      	ldr	r2, [pc, #80]	; (8004114 <TIM_OC6_SetConfig+0xc8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d109      	bne.n	80040dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	029b      	lsls	r3, r3, #10
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40013400 	.word	0x40013400
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400
 8004114:	40014800 	.word	0x40014800

08004118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 030a 	bic.w	r3, r3, #10
 8004154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004176:	b480      	push	{r7}
 8004178:	b087      	sub	sp, #28
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f023 0210 	bic.w	r2, r3, #16
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	031b      	lsls	r3, r3, #12
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f043 0307 	orr.w	r3, r3, #7
 80041f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	609a      	str	r2, [r3, #8]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	021a      	lsls	r2, r3, #8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	431a      	orrs	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4313      	orrs	r3, r2
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2201      	movs	r2, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	fa01 f303 	lsl.w	r3, r1, r3
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e068      	b.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2e      	ldr	r2, [pc, #184]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2d      	ldr	r2, [pc, #180]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d108      	bne.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004322:	d018      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1a      	ldr	r2, [pc, #104]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a18      	ldr	r2, [pc, #96]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10c      	bne.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800435c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	4313      	orrs	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40013400 	.word	0x40013400
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40014000 	.word	0x40014000

080043a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e065      	b.n	8004490 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	041b      	lsls	r3, r3, #16
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a16      	ldr	r2, [pc, #88]	; (800449c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a14      	ldr	r2, [pc, #80]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d115      	bne.n	800447e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	051b      	lsls	r3, r3, #20
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40013400 	.word	0x40013400

080044a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <__NVIC_SetPriority>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	db0a      	blt.n	800450a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	490c      	ldr	r1, [pc, #48]	; (800452c <__NVIC_SetPriority+0x4c>)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	0112      	lsls	r2, r2, #4
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	440b      	add	r3, r1
 8004504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004508:	e00a      	b.n	8004520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4908      	ldr	r1, [pc, #32]	; (8004530 <__NVIC_SetPriority+0x50>)
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	3b04      	subs	r3, #4
 8004518:	0112      	lsls	r2, r2, #4
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	440b      	add	r3, r1
 800451e:	761a      	strb	r2, [r3, #24]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	e000e100 	.word	0xe000e100
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <SysTick_Handler+0x1c>)
 800453a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800453c:	f001 fd28 	bl	8005f90 <xTaskGetSchedulerState>
 8004540:	4603      	mov	r3, r0
 8004542:	2b01      	cmp	r3, #1
 8004544:	d001      	beq.n	800454a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004546:	f002 fb0f 	bl	8006b68 <xPortSysTickHandler>
  }
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	e000e010 	.word	0xe000e010

08004554 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004558:	2100      	movs	r1, #0
 800455a:	f06f 0004 	mvn.w	r0, #4
 800455e:	f7ff ffbf 	bl	80044e0 <__NVIC_SetPriority>
#endif
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800456e:	f3ef 8305 	mrs	r3, IPSR
 8004572:	603b      	str	r3, [r7, #0]
  return(result);
 8004574:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800457a:	f06f 0305 	mvn.w	r3, #5
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	e00c      	b.n	800459c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004582:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <osKernelInitialize+0x44>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d105      	bne.n	8004596 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <osKernelInitialize+0x44>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004590:	2300      	movs	r3, #0
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	e002      	b.n	800459c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004596:	f04f 33ff 	mov.w	r3, #4294967295
 800459a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800459c:	687b      	ldr	r3, [r7, #4]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000228 	.word	0x20000228

080045b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045b6:	f3ef 8305 	mrs	r3, IPSR
 80045ba:	603b      	str	r3, [r7, #0]
  return(result);
 80045bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80045c2:	f06f 0305 	mvn.w	r3, #5
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	e010      	b.n	80045ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <osKernelStart+0x48>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d109      	bne.n	80045e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045d2:	f7ff ffbf 	bl	8004554 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <osKernelStart+0x48>)
 80045d8:	2202      	movs	r2, #2
 80045da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045dc:	f001 f87c 	bl	80056d8 <vTaskStartScheduler>
      stat = osOK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	e002      	b.n	80045ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045ec:	687b      	ldr	r3, [r7, #4]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000228 	.word	0x20000228

080045fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08e      	sub	sp, #56	; 0x38
 8004600:	af04      	add	r7, sp, #16
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004608:	2300      	movs	r3, #0
 800460a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800460c:	f3ef 8305 	mrs	r3, IPSR
 8004610:	617b      	str	r3, [r7, #20]
  return(result);
 8004612:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004614:	2b00      	cmp	r3, #0
 8004616:	d17e      	bne.n	8004716 <osThreadNew+0x11a>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d07b      	beq.n	8004716 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004622:	2318      	movs	r3, #24
 8004624:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d045      	beq.n	80046c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <osThreadNew+0x48>
        name = attr->name;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <osThreadNew+0x6e>
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b38      	cmp	r3, #56	; 0x38
 800465c:	d805      	bhi.n	800466a <osThreadNew+0x6e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <osThreadNew+0x72>
        return (NULL);
 800466a:	2300      	movs	r3, #0
 800466c:	e054      	b.n	8004718 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	089b      	lsrs	r3, r3, #2
 800467c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00e      	beq.n	80046a4 <osThreadNew+0xa8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	2bbb      	cmp	r3, #187	; 0xbb
 800468c:	d90a      	bls.n	80046a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <osThreadNew+0xa8>
        mem = 1;
 800469e:	2301      	movs	r3, #1
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e010      	b.n	80046c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10c      	bne.n	80046c6 <osThreadNew+0xca>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d108      	bne.n	80046c6 <osThreadNew+0xca>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <osThreadNew+0xca>
          mem = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e001      	b.n	80046c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d110      	bne.n	80046ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046d4:	9202      	str	r2, [sp, #8]
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6a3a      	ldr	r2, [r7, #32]
 80046e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fe0c 	bl	8005300 <xTaskCreateStatic>
 80046e8:	4603      	mov	r3, r0
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	e013      	b.n	8004716 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d110      	bne.n	8004716 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	f107 0310 	add.w	r3, r7, #16
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fe57 	bl	80053ba <xTaskCreate>
 800470c:	4603      	mov	r3, r0
 800470e:	2b01      	cmp	r3, #1
 8004710:	d001      	beq.n	8004716 <osThreadNew+0x11a>
            hTask = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004716:	693b      	ldr	r3, [r7, #16]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3728      	adds	r7, #40	; 0x28
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004728:	f3ef 8305 	mrs	r3, IPSR
 800472c:	60bb      	str	r3, [r7, #8]
  return(result);
 800472e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <osDelay+0x1c>
    stat = osErrorISR;
 8004734:	f06f 0305 	mvn.w	r3, #5
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	e007      	b.n	800474c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 ff92 	bl	8005670 <vTaskDelay>
    }
  }

  return (stat);
 800474c:	68fb      	ldr	r3, [r7, #12]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a07      	ldr	r2, [pc, #28]	; (8004784 <vApplicationGetIdleTaskMemory+0x2c>)
 8004768:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4a06      	ldr	r2, [pc, #24]	; (8004788 <vApplicationGetIdleTaskMemory+0x30>)
 800476e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	601a      	str	r2, [r3, #0]
}
 8004776:	bf00      	nop
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	2000022c 	.word	0x2000022c
 8004788:	200002e8 	.word	0x200002e8

0800478c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a07      	ldr	r2, [pc, #28]	; (80047b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800479c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4a06      	ldr	r2, [pc, #24]	; (80047bc <vApplicationGetTimerTaskMemory+0x30>)
 80047a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047aa:	601a      	str	r2, [r3, #0]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	200004e8 	.word	0x200004e8
 80047bc:	200005a4 	.word	0x200005a4

080047c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f103 0208 	add.w	r2, r3, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295
 80047d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f103 0208 	add.w	r2, r3, #8
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f103 0208 	add.w	r2, r3, #8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d103      	bne.n	8004882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	e00c      	b.n	800489c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3308      	adds	r3, #8
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e002      	b.n	8004890 <vListInsert+0x2e>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	429a      	cmp	r2, r3
 800489a:	d2f6      	bcs.n	800488a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	601a      	str	r2, [r3, #0]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6892      	ldr	r2, [r2, #8]
 80048ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6852      	ldr	r2, [r2, #4]
 80048f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d103      	bne.n	8004908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	1e5a      	subs	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004952:	f002 f877 	bl	8006a44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	441a      	add	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	3b01      	subs	r3, #1
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	441a      	add	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	22ff      	movs	r2, #255	; 0xff
 8004996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	22ff      	movs	r2, #255	; 0xff
 800499e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d114      	bne.n	80049d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01a      	beq.n	80049e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3310      	adds	r3, #16
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 f929 	bl	8005c0c <xTaskRemoveFromEventList>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <xQueueGenericReset+0xcc>)
 80049c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	e009      	b.n	80049e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3310      	adds	r3, #16
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fef2 	bl	80047c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3324      	adds	r3, #36	; 0x24
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff feed 	bl	80047c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049e6:	f002 f85d 	bl	8006aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049ea:	2301      	movs	r3, #1
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08e      	sub	sp, #56	; 0x38
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a3a:	bf00      	nop
 8004a3c:	e7fe      	b.n	8004a3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <xQueueGenericCreateStatic+0x52>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <xQueueGenericCreateStatic+0x56>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <xQueueGenericCreateStatic+0x58>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	623b      	str	r3, [r7, #32]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <xQueueGenericCreateStatic+0x7e>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <xQueueGenericCreateStatic+0x82>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <xQueueGenericCreateStatic+0x84>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61fb      	str	r3, [r7, #28]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a96:	2350      	movs	r3, #80	; 0x50
 8004a98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b50      	cmp	r3, #80	; 0x50
 8004a9e:	d00a      	beq.n	8004ab6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	61bb      	str	r3, [r7, #24]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ab6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f805 	bl	8004ae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3730      	adds	r7, #48	; 0x30
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d103      	bne.n	8004b04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e002      	b.n	8004b0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b16:	2101      	movs	r1, #1
 8004b18:	69b8      	ldr	r0, [r7, #24]
 8004b1a:	f7ff ff05 	bl	8004928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08e      	sub	sp, #56	; 0x38
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xQueueGenericSend+0x32>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <xQueueGenericSend+0x40>
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <xQueueGenericSend+0x44>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <xQueueGenericSend+0x46>
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <xQueueGenericSend+0x60>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d103      	bne.n	8004b9e <xQueueGenericSend+0x6e>
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <xQueueGenericSend+0x72>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueGenericSend+0x74>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericSend+0x8e>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	623b      	str	r3, [r7, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bbe:	f001 f9e7 	bl	8005f90 <xTaskGetSchedulerState>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <xQueueGenericSend+0x9e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <xQueueGenericSend+0xa2>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <xQueueGenericSend+0xa4>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <xQueueGenericSend+0xbe>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	61fb      	str	r3, [r7, #28]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bee:	f001 ff29 	bl	8006a44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <xQueueGenericSend+0xd4>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d129      	bne.n	8004c58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c0a:	f000 fa0b 	bl	8005024 <prvCopyDataToQueue>
 8004c0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d010      	beq.n	8004c3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	3324      	adds	r3, #36	; 0x24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fff5 	bl	8005c0c <xTaskRemoveFromEventList>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c28:	4b3f      	ldr	r3, [pc, #252]	; (8004d28 <xQueueGenericSend+0x1f8>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	e00a      	b.n	8004c50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c40:	4b39      	ldr	r3, [pc, #228]	; (8004d28 <xQueueGenericSend+0x1f8>)
 8004c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c50:	f001 ff28 	bl	8006aa4 <vPortExitCritical>
				return pdPASS;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e063      	b.n	8004d20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c5e:	f001 ff21 	bl	8006aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e05c      	b.n	8004d20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d106      	bne.n	8004c7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 f82f 	bl	8005cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c76:	2301      	movs	r3, #1
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c7a:	f001 ff13 	bl	8006aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c7e:	f000 fd9b 	bl	80057b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c82:	f001 fedf 	bl	8006a44 <vPortEnterCritical>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d103      	bne.n	8004c9c <xQueueGenericSend+0x16c>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ca2:	b25b      	sxtb	r3, r3
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d103      	bne.n	8004cb2 <xQueueGenericSend+0x182>
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb2:	f001 fef7 	bl	8006aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cb6:	1d3a      	adds	r2, r7, #4
 8004cb8:	f107 0314 	add.w	r3, r7, #20
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 f81e 	bl	8005d00 <xTaskCheckForTimeOut>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d124      	bne.n	8004d14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ccc:	f000 faa2 	bl	8005214 <prvIsQueueFull>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d018      	beq.n	8004d08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	3310      	adds	r3, #16
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 ff44 	bl	8005b6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ce6:	f000 fa2d 	bl	8005144 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cea:	f000 fd73 	bl	80057d4 <xTaskResumeAll>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f47f af7c 	bne.w	8004bee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <xQueueGenericSend+0x1f8>)
 8004cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	e772      	b.n	8004bee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0a:	f000 fa1b 	bl	8005144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d0e:	f000 fd61 	bl	80057d4 <xTaskResumeAll>
 8004d12:	e76c      	b.n	8004bee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d16:	f000 fa15 	bl	8005144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d1a:	f000 fd5b 	bl	80057d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3738      	adds	r7, #56	; 0x38
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b090      	sub	sp, #64	; 0x40
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <xQueueGenericSendFromISR+0x3c>
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <xQueueGenericSendFromISR+0x40>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <xQueueGenericSendFromISR+0x42>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d103      	bne.n	8004d96 <xQueueGenericSendFromISR+0x6a>
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <xQueueGenericSendFromISR+0x6e>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <xQueueGenericSendFromISR+0x70>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	623b      	str	r3, [r7, #32]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004db6:	f001 ff27 	bl	8006c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dba:	f3ef 8211 	mrs	r2, BASEPRI
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	61fa      	str	r2, [r7, #28]
 8004dd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <xQueueGenericSendFromISR+0xbc>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d12f      	bne.n	8004e48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004dfe:	f000 f911 	bl	8005024 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d112      	bne.n	8004e32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d016      	beq.n	8004e42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	3324      	adds	r3, #36	; 0x24
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fef7 	bl	8005c0c <xTaskRemoveFromEventList>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00e      	beq.n	8004e42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	e007      	b.n	8004e42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e36:	3301      	adds	r3, #1
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	b25a      	sxtb	r2, r3
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e42:	2301      	movs	r3, #1
 8004e44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e46:	e001      	b.n	8004e4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3740      	adds	r7, #64	; 0x40
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08c      	sub	sp, #48	; 0x30
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <xQueueReceive+0x30>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	623b      	str	r3, [r7, #32]
}
 8004e90:	bf00      	nop
 8004e92:	e7fe      	b.n	8004e92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d103      	bne.n	8004ea2 <xQueueReceive+0x3e>
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <xQueueReceive+0x42>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <xQueueReceive+0x44>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <xQueueReceive+0x5e>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	61fb      	str	r3, [r7, #28]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ec2:	f001 f865 	bl	8005f90 <xTaskGetSchedulerState>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <xQueueReceive+0x6e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <xQueueReceive+0x72>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <xQueueReceive+0x74>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <xQueueReceive+0x8e>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	61bb      	str	r3, [r7, #24]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ef2:	f001 fda7 	bl	8006a44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01f      	beq.n	8004f42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f06:	f000 f8f7 	bl	80050f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	1e5a      	subs	r2, r3, #1
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00f      	beq.n	8004f3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	3310      	adds	r3, #16
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fe74 	bl	8005c0c <xTaskRemoveFromEventList>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <xQueueReceive+0x1bc>)
 8004f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f3a:	f001 fdb3 	bl	8006aa4 <vPortExitCritical>
				return pdPASS;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e069      	b.n	8005016 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d103      	bne.n	8004f50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f48:	f001 fdac 	bl	8006aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e062      	b.n	8005016 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 feba 	bl	8005cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f64:	f001 fd9e 	bl	8006aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f68:	f000 fc26 	bl	80057b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f6c:	f001 fd6a 	bl	8006a44 <vPortEnterCritical>
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f76:	b25b      	sxtb	r3, r3
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d103      	bne.n	8004f86 <xQueueReceive+0x122>
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f8c:	b25b      	sxtb	r3, r3
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d103      	bne.n	8004f9c <xQueueReceive+0x138>
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f9c:	f001 fd82 	bl	8006aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fa0:	1d3a      	adds	r2, r7, #4
 8004fa2:	f107 0310 	add.w	r3, r7, #16
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fea9 	bl	8005d00 <xTaskCheckForTimeOut>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d123      	bne.n	8004ffc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb6:	f000 f917 	bl	80051e8 <prvIsQueueEmpty>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d017      	beq.n	8004ff0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	3324      	adds	r3, #36	; 0x24
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fdcf 	bl	8005b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd0:	f000 f8b8 	bl	8005144 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fd4:	f000 fbfe 	bl	80057d4 <xTaskResumeAll>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d189      	bne.n	8004ef2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004fde:	4b10      	ldr	r3, [pc, #64]	; (8005020 <xQueueReceive+0x1bc>)
 8004fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	e780      	b.n	8004ef2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff2:	f000 f8a7 	bl	8005144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ff6:	f000 fbed 	bl	80057d4 <xTaskResumeAll>
 8004ffa:	e77a      	b.n	8004ef2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffe:	f000 f8a1 	bl	8005144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005002:	f000 fbe7 	bl	80057d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005008:	f000 f8ee 	bl	80051e8 <prvIsQueueEmpty>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	f43f af6f 	beq.w	8004ef2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005014:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005016:	4618      	mov	r0, r3
 8005018:	3730      	adds	r7, #48	; 0x30
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10d      	bne.n	800505e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d14d      	bne.n	80050e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 ffbc 	bl	8005fcc <xTaskPriorityDisinherit>
 8005054:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	e043      	b.n	80050e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d119      	bne.n	8005098 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6858      	ldr	r0, [r3, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	461a      	mov	r2, r3
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	f002 f81a 	bl	80070a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	441a      	add	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	d32b      	bcc.n	80050e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	e026      	b.n	80050e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68d8      	ldr	r0, [r3, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	461a      	mov	r2, r3
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	f002 f800 	bl	80070a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	425b      	negs	r3, r3
 80050b2:	441a      	add	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d207      	bcs.n	80050d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	425b      	negs	r3, r3
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d105      	bne.n	80050e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050ee:	697b      	ldr	r3, [r7, #20]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	441a      	add	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	429a      	cmp	r2, r3
 8005122:	d303      	bcc.n	800512c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68d9      	ldr	r1, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	461a      	mov	r2, r3
 8005136:	6838      	ldr	r0, [r7, #0]
 8005138:	f001 ffb6 	bl	80070a8 <memcpy>
	}
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800514c:	f001 fc7a 	bl	8006a44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005156:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005158:	e011      	b.n	800517e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d012      	beq.n	8005188 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3324      	adds	r3, #36	; 0x24
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fd50 	bl	8005c0c <xTaskRemoveFromEventList>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005172:	f000 fe27 	bl	8005dc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	3b01      	subs	r3, #1
 800517a:	b2db      	uxtb	r3, r3
 800517c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800517e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005182:	2b00      	cmp	r3, #0
 8005184:	dce9      	bgt.n	800515a <prvUnlockQueue+0x16>
 8005186:	e000      	b.n	800518a <prvUnlockQueue+0x46>
					break;
 8005188:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	22ff      	movs	r2, #255	; 0xff
 800518e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005192:	f001 fc87 	bl	8006aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005196:	f001 fc55 	bl	8006a44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051a2:	e011      	b.n	80051c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d012      	beq.n	80051d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3310      	adds	r3, #16
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fd2b 	bl	8005c0c <xTaskRemoveFromEventList>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051bc:	f000 fe02 	bl	8005dc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051c0:	7bbb      	ldrb	r3, [r7, #14]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dce9      	bgt.n	80051a4 <prvUnlockQueue+0x60>
 80051d0:	e000      	b.n	80051d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	22ff      	movs	r2, #255	; 0xff
 80051d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051dc:	f001 fc62 	bl	8006aa4 <vPortExitCritical>
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051f0:	f001 fc28 	bl	8006a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051fc:	2301      	movs	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e001      	b.n	8005206 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005206:	f001 fc4d 	bl	8006aa4 <vPortExitCritical>

	return xReturn;
 800520a:	68fb      	ldr	r3, [r7, #12]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800521c:	f001 fc12 	bl	8006a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005228:	429a      	cmp	r2, r3
 800522a:	d102      	bne.n	8005232 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800522c:	2301      	movs	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e001      	b.n	8005236 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005236:	f001 fc35 	bl	8006aa4 <vPortExitCritical>

	return xReturn;
 800523a:	68fb      	ldr	r3, [r7, #12]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e014      	b.n	800527e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005254:	4a0f      	ldr	r2, [pc, #60]	; (8005294 <vQueueAddToRegistry+0x50>)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10b      	bne.n	8005278 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005260:	490c      	ldr	r1, [pc, #48]	; (8005294 <vQueueAddToRegistry+0x50>)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <vQueueAddToRegistry+0x50>)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4413      	add	r3, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005276:	e006      	b.n	8005286 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b07      	cmp	r3, #7
 8005282:	d9e7      	bls.n	8005254 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	200009a4 	.word	0x200009a4

08005298 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052a8:	f001 fbcc 	bl	8006a44 <vPortEnterCritical>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052b2:	b25b      	sxtb	r3, r3
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d103      	bne.n	80052c2 <vQueueWaitForMessageRestricted+0x2a>
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c8:	b25b      	sxtb	r3, r3
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ce:	d103      	bne.n	80052d8 <vQueueWaitForMessageRestricted+0x40>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d8:	f001 fbe4 	bl	8006aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	3324      	adds	r3, #36	; 0x24
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fc61 	bl	8005bb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	f7ff ff26 	bl	8005144 <prvUnlockQueue>
	}
 80052f8:	bf00      	nop
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08e      	sub	sp, #56	; 0x38
 8005304:	af04      	add	r7, sp, #16
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800530e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	623b      	str	r3, [r7, #32]
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xTaskCreateStatic+0x46>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	61fb      	str	r3, [r7, #28]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005346:	23bc      	movs	r3, #188	; 0xbc
 8005348:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2bbc      	cmp	r3, #188	; 0xbc
 800534e:	d00a      	beq.n	8005366 <xTaskCreateStatic+0x66>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	61bb      	str	r3, [r7, #24]
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005366:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01e      	beq.n	80053ac <xTaskCreateStatic+0xac>
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01b      	beq.n	80053ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800537c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	2202      	movs	r2, #2
 8005382:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005386:	2300      	movs	r3, #0
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	f107 0314 	add.w	r3, r7, #20
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f850 	bl	8005444 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053a6:	f000 f8f3 	bl	8005590 <prvAddNewTaskToReadyList>
 80053aa:	e001      	b.n	80053b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053b0:	697b      	ldr	r3, [r7, #20]
	}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3728      	adds	r7, #40	; 0x28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b08c      	sub	sp, #48	; 0x30
 80053be:	af04      	add	r7, sp, #16
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	4613      	mov	r3, r2
 80053c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 fc5a 	bl	8006c88 <pvPortMalloc>
 80053d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00e      	beq.n	80053fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053dc:	20bc      	movs	r0, #188	; 0xbc
 80053de:	f001 fc53 	bl	8006c88 <pvPortMalloc>
 80053e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
 80053f0:	e005      	b.n	80053fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053f2:	6978      	ldr	r0, [r7, #20]
 80053f4:	f001 fd14 	bl	8006e20 <vPortFree>
 80053f8:	e001      	b.n	80053fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d017      	beq.n	8005434 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800540c:	88fa      	ldrh	r2, [r7, #6]
 800540e:	2300      	movs	r3, #0
 8005410:	9303      	str	r3, [sp, #12]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	9302      	str	r3, [sp, #8]
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f80e 	bl	8005444 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005428:	69f8      	ldr	r0, [r7, #28]
 800542a:	f000 f8b1 	bl	8005590 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800542e:	2301      	movs	r3, #1
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e002      	b.n	800543a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005434:	f04f 33ff 	mov.w	r3, #4294967295
 8005438:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800543a:	69bb      	ldr	r3, [r7, #24]
	}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	461a      	mov	r2, r3
 800545c:	21a5      	movs	r1, #165	; 0xa5
 800545e:	f001 fe31 	bl	80070c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800546c:	3b01      	subs	r3, #1
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	f023 0307 	bic.w	r3, r3, #7
 800547a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	617b      	str	r3, [r7, #20]
}
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01f      	beq.n	80054e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	e012      	b.n	80054ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4413      	add	r3, r2
 80054ae:	7819      	ldrb	r1, [r3, #0]
 80054b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	3334      	adds	r3, #52	; 0x34
 80054b8:	460a      	mov	r2, r1
 80054ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	3301      	adds	r3, #1
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	2b0f      	cmp	r3, #15
 80054d2:	d9e9      	bls.n	80054a8 <prvInitialiseNewTask+0x64>
 80054d4:	e000      	b.n	80054d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80054d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e0:	e003      	b.n	80054ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	2b37      	cmp	r3, #55	; 0x37
 80054ee:	d901      	bls.n	80054f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054f0:	2337      	movs	r3, #55	; 0x37
 80054f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	2200      	movs	r2, #0
 8005504:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	3304      	adds	r3, #4
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff f978 	bl	8004800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	3318      	adds	r3, #24
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff f973 	bl	8004800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800551e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	2200      	movs	r2, #0
 800553c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	3354      	adds	r3, #84	; 0x54
 8005544:	2260      	movs	r2, #96	; 0x60
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f001 fdbb 	bl	80070c4 <memset>
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	4a0c      	ldr	r2, [pc, #48]	; (8005584 <prvInitialiseNewTask+0x140>)
 8005552:	659a      	str	r2, [r3, #88]	; 0x58
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	4a0c      	ldr	r2, [pc, #48]	; (8005588 <prvInitialiseNewTask+0x144>)
 8005558:	65da      	str	r2, [r3, #92]	; 0x5c
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	4a0b      	ldr	r2, [pc, #44]	; (800558c <prvInitialiseNewTask+0x148>)
 800555e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	69b8      	ldr	r0, [r7, #24]
 8005566:	f001 f941 	bl	80067ec <pxPortInitialiseStack>
 800556a:	4602      	mov	r2, r0
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800557c:	bf00      	nop
 800557e:	3720      	adds	r7, #32
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	08007354 	.word	0x08007354
 8005588:	08007374 	.word	0x08007374
 800558c:	08007334 	.word	0x08007334

08005590 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005598:	f001 fa54 	bl	8006a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800559c:	4b2d      	ldr	r3, [pc, #180]	; (8005654 <prvAddNewTaskToReadyList+0xc4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	4a2c      	ldr	r2, [pc, #176]	; (8005654 <prvAddNewTaskToReadyList+0xc4>)
 80055a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055a6:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <prvAddNewTaskToReadyList+0xc8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ae:	4a2a      	ldr	r2, [pc, #168]	; (8005658 <prvAddNewTaskToReadyList+0xc8>)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055b4:	4b27      	ldr	r3, [pc, #156]	; (8005654 <prvAddNewTaskToReadyList+0xc4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d110      	bne.n	80055de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055bc:	f000 fc26 	bl	8005e0c <prvInitialiseTaskLists>
 80055c0:	e00d      	b.n	80055de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055c2:	4b26      	ldr	r3, [pc, #152]	; (800565c <prvAddNewTaskToReadyList+0xcc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055ca:	4b23      	ldr	r3, [pc, #140]	; (8005658 <prvAddNewTaskToReadyList+0xc8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d802      	bhi.n	80055de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055d8:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <prvAddNewTaskToReadyList+0xc8>)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055de:	4b20      	ldr	r3, [pc, #128]	; (8005660 <prvAddNewTaskToReadyList+0xd0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3301      	adds	r3, #1
 80055e4:	4a1e      	ldr	r2, [pc, #120]	; (8005660 <prvAddNewTaskToReadyList+0xd0>)
 80055e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <prvAddNewTaskToReadyList+0xd0>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <prvAddNewTaskToReadyList+0xd4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d903      	bls.n	8005604 <prvAddNewTaskToReadyList+0x74>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	4a18      	ldr	r2, [pc, #96]	; (8005664 <prvAddNewTaskToReadyList+0xd4>)
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4a15      	ldr	r2, [pc, #84]	; (8005668 <prvAddNewTaskToReadyList+0xd8>)
 8005612:	441a      	add	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f7ff f8fd 	bl	800481a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005620:	f001 fa40 	bl	8006aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005624:	4b0d      	ldr	r3, [pc, #52]	; (800565c <prvAddNewTaskToReadyList+0xcc>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00e      	beq.n	800564a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <prvAddNewTaskToReadyList+0xc8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	429a      	cmp	r2, r3
 8005638:	d207      	bcs.n	800564a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800563a:	4b0c      	ldr	r3, [pc, #48]	; (800566c <prvAddNewTaskToReadyList+0xdc>)
 800563c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000eb8 	.word	0x20000eb8
 8005658:	200009e4 	.word	0x200009e4
 800565c:	20000ec4 	.word	0x20000ec4
 8005660:	20000ed4 	.word	0x20000ed4
 8005664:	20000ec0 	.word	0x20000ec0
 8005668:	200009e8 	.word	0x200009e8
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d017      	beq.n	80056b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005682:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <vTaskDelay+0x60>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <vTaskDelay+0x30>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	60bb      	str	r3, [r7, #8]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056a0:	f000 f88a 	bl	80057b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056a4:	2100      	movs	r1, #0
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fcfe 	bl	80060a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056ac:	f000 f892 	bl	80057d4 <xTaskResumeAll>
 80056b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d107      	bne.n	80056c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <vTaskDelay+0x64>)
 80056ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20000ee0 	.word	0x20000ee0
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056e6:	463a      	mov	r2, r7
 80056e8:	1d39      	adds	r1, r7, #4
 80056ea:	f107 0308 	add.w	r3, r7, #8
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff f832 	bl	8004758 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	9202      	str	r2, [sp, #8]
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	2300      	movs	r3, #0
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	2300      	movs	r3, #0
 8005704:	460a      	mov	r2, r1
 8005706:	4924      	ldr	r1, [pc, #144]	; (8005798 <vTaskStartScheduler+0xc0>)
 8005708:	4824      	ldr	r0, [pc, #144]	; (800579c <vTaskStartScheduler+0xc4>)
 800570a:	f7ff fdf9 	bl	8005300 <xTaskCreateStatic>
 800570e:	4603      	mov	r3, r0
 8005710:	4a23      	ldr	r2, [pc, #140]	; (80057a0 <vTaskStartScheduler+0xc8>)
 8005712:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005714:	4b22      	ldr	r3, [pc, #136]	; (80057a0 <vTaskStartScheduler+0xc8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800571c:	2301      	movs	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	e001      	b.n	8005726 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d102      	bne.n	8005732 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800572c:	f000 fd10 	bl	8006150 <xTimerCreateTimerTask>
 8005730:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d11b      	bne.n	8005770 <vTaskStartScheduler+0x98>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	613b      	str	r3, [r7, #16]
}
 800574a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800574c:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <vTaskStartScheduler+0xcc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3354      	adds	r3, #84	; 0x54
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <vTaskStartScheduler+0xd0>)
 8005754:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005756:	4b15      	ldr	r3, [pc, #84]	; (80057ac <vTaskStartScheduler+0xd4>)
 8005758:	f04f 32ff 	mov.w	r2, #4294967295
 800575c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800575e:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <vTaskStartScheduler+0xd8>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005764:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <vTaskStartScheduler+0xdc>)
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800576a:	f001 f8c9 	bl	8006900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800576e:	e00e      	b.n	800578e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d10a      	bne.n	800578e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	60fb      	str	r3, [r7, #12]
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <vTaskStartScheduler+0xb4>
}
 800578e:	bf00      	nop
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	0800728c 	.word	0x0800728c
 800579c:	08005ddd 	.word	0x08005ddd
 80057a0:	20000edc 	.word	0x20000edc
 80057a4:	200009e4 	.word	0x200009e4
 80057a8:	20000010 	.word	0x20000010
 80057ac:	20000ed8 	.word	0x20000ed8
 80057b0:	20000ec4 	.word	0x20000ec4
 80057b4:	20000ebc 	.word	0x20000ebc

080057b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <vTaskSuspendAll+0x18>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	4a03      	ldr	r2, [pc, #12]	; (80057d0 <vTaskSuspendAll+0x18>)
 80057c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057c6:	bf00      	nop
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	20000ee0 	.word	0x20000ee0

080057d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057e2:	4b42      	ldr	r3, [pc, #264]	; (80058ec <xTaskResumeAll+0x118>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <xTaskResumeAll+0x2c>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	603b      	str	r3, [r7, #0]
}
 80057fc:	bf00      	nop
 80057fe:	e7fe      	b.n	80057fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005800:	f001 f920 	bl	8006a44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005804:	4b39      	ldr	r3, [pc, #228]	; (80058ec <xTaskResumeAll+0x118>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3b01      	subs	r3, #1
 800580a:	4a38      	ldr	r2, [pc, #224]	; (80058ec <xTaskResumeAll+0x118>)
 800580c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800580e:	4b37      	ldr	r3, [pc, #220]	; (80058ec <xTaskResumeAll+0x118>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d162      	bne.n	80058dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005816:	4b36      	ldr	r3, [pc, #216]	; (80058f0 <xTaskResumeAll+0x11c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d05e      	beq.n	80058dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800581e:	e02f      	b.n	8005880 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005820:	4b34      	ldr	r3, [pc, #208]	; (80058f4 <xTaskResumeAll+0x120>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3318      	adds	r3, #24
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff f851 	bl	80048d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3304      	adds	r3, #4
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff f84c 	bl	80048d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	4b2d      	ldr	r3, [pc, #180]	; (80058f8 <xTaskResumeAll+0x124>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d903      	bls.n	8005850 <xTaskResumeAll+0x7c>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <xTaskResumeAll+0x124>)
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4a27      	ldr	r2, [pc, #156]	; (80058fc <xTaskResumeAll+0x128>)
 800585e:	441a      	add	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f7fe ffd7 	bl	800481a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	4b23      	ldr	r3, [pc, #140]	; (8005900 <xTaskResumeAll+0x12c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800587a:	4b22      	ldr	r3, [pc, #136]	; (8005904 <xTaskResumeAll+0x130>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005880:	4b1c      	ldr	r3, [pc, #112]	; (80058f4 <xTaskResumeAll+0x120>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1cb      	bne.n	8005820 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800588e:	f000 fb5f 	bl	8005f50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005892:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <xTaskResumeAll+0x134>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d010      	beq.n	80058c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800589e:	f000 f847 	bl	8005930 <xTaskIncrementTick>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058a8:	4b16      	ldr	r3, [pc, #88]	; (8005904 <xTaskResumeAll+0x130>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f1      	bne.n	800589e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80058ba:	4b13      	ldr	r3, [pc, #76]	; (8005908 <xTaskResumeAll+0x134>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058c0:	4b10      	ldr	r3, [pc, #64]	; (8005904 <xTaskResumeAll+0x130>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058c8:	2301      	movs	r3, #1
 80058ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <xTaskResumeAll+0x138>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058dc:	f001 f8e2 	bl	8006aa4 <vPortExitCritical>

	return xAlreadyYielded;
 80058e0:	68bb      	ldr	r3, [r7, #8]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000ee0 	.word	0x20000ee0
 80058f0:	20000eb8 	.word	0x20000eb8
 80058f4:	20000e78 	.word	0x20000e78
 80058f8:	20000ec0 	.word	0x20000ec0
 80058fc:	200009e8 	.word	0x200009e8
 8005900:	200009e4 	.word	0x200009e4
 8005904:	20000ecc 	.word	0x20000ecc
 8005908:	20000ec8 	.word	0x20000ec8
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <xTaskGetTickCount+0x1c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800591c:	687b      	ldr	r3, [r7, #4]
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000ebc 	.word	0x20000ebc

08005930 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800593a:	4b4f      	ldr	r3, [pc, #316]	; (8005a78 <xTaskIncrementTick+0x148>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 808f 	bne.w	8005a62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005944:	4b4d      	ldr	r3, [pc, #308]	; (8005a7c <xTaskIncrementTick+0x14c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3301      	adds	r3, #1
 800594a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800594c:	4a4b      	ldr	r2, [pc, #300]	; (8005a7c <xTaskIncrementTick+0x14c>)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d120      	bne.n	800599a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005958:	4b49      	ldr	r3, [pc, #292]	; (8005a80 <xTaskIncrementTick+0x150>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <xTaskIncrementTick+0x48>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	603b      	str	r3, [r7, #0]
}
 8005974:	bf00      	nop
 8005976:	e7fe      	b.n	8005976 <xTaskIncrementTick+0x46>
 8005978:	4b41      	ldr	r3, [pc, #260]	; (8005a80 <xTaskIncrementTick+0x150>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <xTaskIncrementTick+0x154>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a3f      	ldr	r2, [pc, #252]	; (8005a80 <xTaskIncrementTick+0x150>)
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	4a3f      	ldr	r2, [pc, #252]	; (8005a84 <xTaskIncrementTick+0x154>)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	4b3e      	ldr	r3, [pc, #248]	; (8005a88 <xTaskIncrementTick+0x158>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	4a3d      	ldr	r2, [pc, #244]	; (8005a88 <xTaskIncrementTick+0x158>)
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	f000 fadb 	bl	8005f50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800599a:	4b3c      	ldr	r3, [pc, #240]	; (8005a8c <xTaskIncrementTick+0x15c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d349      	bcc.n	8005a38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059a4:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <xTaskIncrementTick+0x150>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ae:	4b37      	ldr	r3, [pc, #220]	; (8005a8c <xTaskIncrementTick+0x15c>)
 80059b0:	f04f 32ff 	mov.w	r2, #4294967295
 80059b4:	601a      	str	r2, [r3, #0]
					break;
 80059b6:	e03f      	b.n	8005a38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b8:	4b31      	ldr	r3, [pc, #196]	; (8005a80 <xTaskIncrementTick+0x150>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d203      	bcs.n	80059d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059d0:	4a2e      	ldr	r2, [pc, #184]	; (8005a8c <xTaskIncrementTick+0x15c>)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059d6:	e02f      	b.n	8005a38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	3304      	adds	r3, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe ff79 	bl	80048d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d004      	beq.n	80059f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	3318      	adds	r3, #24
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe ff70 	bl	80048d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f8:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <xTaskIncrementTick+0x160>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d903      	bls.n	8005a08 <xTaskIncrementTick+0xd8>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <xTaskIncrementTick+0x160>)
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4a1f      	ldr	r2, [pc, #124]	; (8005a94 <xTaskIncrementTick+0x164>)
 8005a16:	441a      	add	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f7fe fefb 	bl	800481a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <xTaskIncrementTick+0x168>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d3b8      	bcc.n	80059a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a36:	e7b5      	b.n	80059a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <xTaskIncrementTick+0x168>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	4915      	ldr	r1, [pc, #84]	; (8005a94 <xTaskIncrementTick+0x164>)
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d901      	bls.n	8005a54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <xTaskIncrementTick+0x16c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e004      	b.n	8005a6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a62:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <xTaskIncrementTick+0x170>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3301      	adds	r3, #1
 8005a68:	4a0d      	ldr	r2, [pc, #52]	; (8005aa0 <xTaskIncrementTick+0x170>)
 8005a6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a6c:	697b      	ldr	r3, [r7, #20]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000ee0 	.word	0x20000ee0
 8005a7c:	20000ebc 	.word	0x20000ebc
 8005a80:	20000e70 	.word	0x20000e70
 8005a84:	20000e74 	.word	0x20000e74
 8005a88:	20000ed0 	.word	0x20000ed0
 8005a8c:	20000ed8 	.word	0x20000ed8
 8005a90:	20000ec0 	.word	0x20000ec0
 8005a94:	200009e8 	.word	0x200009e8
 8005a98:	200009e4 	.word	0x200009e4
 8005a9c:	20000ecc 	.word	0x20000ecc
 8005aa0:	20000ec8 	.word	0x20000ec8

08005aa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aaa:	4b2a      	ldr	r3, [pc, #168]	; (8005b54 <vTaskSwitchContext+0xb0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ab2:	4b29      	ldr	r3, [pc, #164]	; (8005b58 <vTaskSwitchContext+0xb4>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ab8:	e046      	b.n	8005b48 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005aba:	4b27      	ldr	r3, [pc, #156]	; (8005b58 <vTaskSwitchContext+0xb4>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac0:	4b26      	ldr	r3, [pc, #152]	; (8005b5c <vTaskSwitchContext+0xb8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e010      	b.n	8005aea <vTaskSwitchContext+0x46>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <vTaskSwitchContext+0x40>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	607b      	str	r3, [r7, #4]
}
 8005ae0:	bf00      	nop
 8005ae2:	e7fe      	b.n	8005ae2 <vTaskSwitchContext+0x3e>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	491d      	ldr	r1, [pc, #116]	; (8005b60 <vTaskSwitchContext+0xbc>)
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0e4      	beq.n	8005ac8 <vTaskSwitchContext+0x24>
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <vTaskSwitchContext+0xbc>)
 8005b0a:	4413      	add	r3, r2
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	605a      	str	r2, [r3, #4]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d104      	bne.n	8005b2e <vTaskSwitchContext+0x8a>
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4a0b      	ldr	r2, [pc, #44]	; (8005b64 <vTaskSwitchContext+0xc0>)
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <vTaskSwitchContext+0xb8>)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <vTaskSwitchContext+0xc0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3354      	adds	r3, #84	; 0x54
 8005b44:	4a08      	ldr	r2, [pc, #32]	; (8005b68 <vTaskSwitchContext+0xc4>)
 8005b46:	6013      	str	r3, [r2, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	20000ee0 	.word	0x20000ee0
 8005b58:	20000ecc 	.word	0x20000ecc
 8005b5c:	20000ec0 	.word	0x20000ec0
 8005b60:	200009e8 	.word	0x200009e8
 8005b64:	200009e4 	.word	0x200009e4
 8005b68:	20000010 	.word	0x20000010

08005b6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	60fb      	str	r3, [r7, #12]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b92:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <vTaskPlaceOnEventList+0x44>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3318      	adds	r3, #24
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fe fe61 	bl	8004862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	6838      	ldr	r0, [r7, #0]
 8005ba4:	f000 fa80 	bl	80060a8 <prvAddCurrentTaskToDelayedList>
}
 8005ba8:	bf00      	nop
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	200009e4 	.word	0x200009e4

08005bb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	617b      	str	r3, [r7, #20]
}
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <vTaskPlaceOnEventListRestricted+0x54>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3318      	adds	r3, #24
 8005be2:	4619      	mov	r1, r3
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7fe fe18 	bl	800481a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	68b8      	ldr	r0, [r7, #8]
 8005bfa:	f000 fa55 	bl	80060a8 <prvAddCurrentTaskToDelayedList>
	}
 8005bfe:	bf00      	nop
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200009e4 	.word	0x200009e4

08005c0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10a      	bne.n	8005c38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	60fb      	str	r3, [r7, #12]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	3318      	adds	r3, #24
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fe fe49 	bl	80048d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c42:	4b1e      	ldr	r3, [pc, #120]	; (8005cbc <xTaskRemoveFromEventList+0xb0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d11d      	bne.n	8005c86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fe fe40 	bl	80048d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c58:	4b19      	ldr	r3, [pc, #100]	; (8005cc0 <xTaskRemoveFromEventList+0xb4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d903      	bls.n	8005c68 <xTaskRemoveFromEventList+0x5c>
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	4a16      	ldr	r2, [pc, #88]	; (8005cc0 <xTaskRemoveFromEventList+0xb4>)
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <xTaskRemoveFromEventList+0xb8>)
 8005c76:	441a      	add	r2, r3
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f7fe fdcb 	bl	800481a <vListInsertEnd>
 8005c84:	e005      	b.n	8005c92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	3318      	adds	r3, #24
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	480e      	ldr	r0, [pc, #56]	; (8005cc8 <xTaskRemoveFromEventList+0xbc>)
 8005c8e:	f7fe fdc4 	bl	800481a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <xTaskRemoveFromEventList+0xc0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d905      	bls.n	8005cac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <xTaskRemoveFromEventList+0xc4>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	e001      	b.n	8005cb0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cb0:	697b      	ldr	r3, [r7, #20]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000ee0 	.word	0x20000ee0
 8005cc0:	20000ec0 	.word	0x20000ec0
 8005cc4:	200009e8 	.word	0x200009e8
 8005cc8:	20000e78 	.word	0x20000e78
 8005ccc:	200009e4 	.word	0x200009e4
 8005cd0:	20000ecc 	.word	0x20000ecc

08005cd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <vTaskInternalSetTimeOutState+0x24>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <vTaskInternalSetTimeOutState+0x28>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	605a      	str	r2, [r3, #4]
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20000ed0 	.word	0x20000ed0
 8005cfc:	20000ebc 	.word	0x20000ebc

08005d00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	613b      	str	r3, [r7, #16]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	60fb      	str	r3, [r7, #12]
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d42:	f000 fe7f 	bl	8006a44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d46:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <xTaskCheckForTimeOut+0xbc>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d102      	bne.n	8005d66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	e023      	b.n	8005dae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <xTaskCheckForTimeOut+0xc0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d007      	beq.n	8005d82 <xTaskCheckForTimeOut+0x82>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d302      	bcc.n	8005d82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	e015      	b.n	8005dae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d20b      	bcs.n	8005da4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ff9b 	bl	8005cd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	e004      	b.n	8005dae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dae:	f000 fe79 	bl	8006aa4 <vPortExitCritical>

	return xReturn;
 8005db2:	69fb      	ldr	r3, [r7, #28]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3720      	adds	r7, #32
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000ebc 	.word	0x20000ebc
 8005dc0:	20000ed0 	.word	0x20000ed0

08005dc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dc8:	4b03      	ldr	r3, [pc, #12]	; (8005dd8 <vTaskMissedYield+0x14>)
 8005dca:	2201      	movs	r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	20000ecc 	.word	0x20000ecc

08005ddc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005de4:	f000 f852 	bl	8005e8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005de8:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <prvIdleTask+0x28>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d9f9      	bls.n	8005de4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <prvIdleTask+0x2c>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e00:	e7f0      	b.n	8005de4 <prvIdleTask+0x8>
 8005e02:	bf00      	nop
 8005e04:	200009e8 	.word	0x200009e8
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e12:	2300      	movs	r3, #0
 8005e14:	607b      	str	r3, [r7, #4]
 8005e16:	e00c      	b.n	8005e32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4a12      	ldr	r2, [pc, #72]	; (8005e6c <prvInitialiseTaskLists+0x60>)
 8005e24:	4413      	add	r3, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe fcca 	bl	80047c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	607b      	str	r3, [r7, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b37      	cmp	r3, #55	; 0x37
 8005e36:	d9ef      	bls.n	8005e18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e38:	480d      	ldr	r0, [pc, #52]	; (8005e70 <prvInitialiseTaskLists+0x64>)
 8005e3a:	f7fe fcc1 	bl	80047c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e3e:	480d      	ldr	r0, [pc, #52]	; (8005e74 <prvInitialiseTaskLists+0x68>)
 8005e40:	f7fe fcbe 	bl	80047c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e44:	480c      	ldr	r0, [pc, #48]	; (8005e78 <prvInitialiseTaskLists+0x6c>)
 8005e46:	f7fe fcbb 	bl	80047c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e4a:	480c      	ldr	r0, [pc, #48]	; (8005e7c <prvInitialiseTaskLists+0x70>)
 8005e4c:	f7fe fcb8 	bl	80047c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e50:	480b      	ldr	r0, [pc, #44]	; (8005e80 <prvInitialiseTaskLists+0x74>)
 8005e52:	f7fe fcb5 	bl	80047c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <prvInitialiseTaskLists+0x78>)
 8005e58:	4a05      	ldr	r2, [pc, #20]	; (8005e70 <prvInitialiseTaskLists+0x64>)
 8005e5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <prvInitialiseTaskLists+0x7c>)
 8005e5e:	4a05      	ldr	r2, [pc, #20]	; (8005e74 <prvInitialiseTaskLists+0x68>)
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	200009e8 	.word	0x200009e8
 8005e70:	20000e48 	.word	0x20000e48
 8005e74:	20000e5c 	.word	0x20000e5c
 8005e78:	20000e78 	.word	0x20000e78
 8005e7c:	20000e8c 	.word	0x20000e8c
 8005e80:	20000ea4 	.word	0x20000ea4
 8005e84:	20000e70 	.word	0x20000e70
 8005e88:	20000e74 	.word	0x20000e74

08005e8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e92:	e019      	b.n	8005ec8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e94:	f000 fdd6 	bl	8006a44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e98:	4b10      	ldr	r3, [pc, #64]	; (8005edc <prvCheckTasksWaitingTermination+0x50>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe fd15 	bl	80048d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <prvCheckTasksWaitingTermination+0x54>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	4a0b      	ldr	r2, [pc, #44]	; (8005ee0 <prvCheckTasksWaitingTermination+0x54>)
 8005eb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <prvCheckTasksWaitingTermination+0x58>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <prvCheckTasksWaitingTermination+0x58>)
 8005ebc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ebe:	f000 fdf1 	bl	8006aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f810 	bl	8005ee8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <prvCheckTasksWaitingTermination+0x58>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e1      	bne.n	8005e94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000e8c 	.word	0x20000e8c
 8005ee0:	20000eb8 	.word	0x20000eb8
 8005ee4:	20000ea0 	.word	0x20000ea0

08005ee8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3354      	adds	r3, #84	; 0x54
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 f8fb 	bl	80070f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d108      	bne.n	8005f16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 ff89 	bl	8006e20 <vPortFree>
				vPortFree( pxTCB );
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 ff86 	bl	8006e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f14:	e018      	b.n	8005f48 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d103      	bne.n	8005f28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 ff7d 	bl	8006e20 <vPortFree>
	}
 8005f26:	e00f      	b.n	8005f48 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d00a      	beq.n	8005f48 <prvDeleteTCB+0x60>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	60fb      	str	r3, [r7, #12]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <prvDeleteTCB+0x5e>
	}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f56:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <prvResetNextTaskUnblockTime+0x38>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f60:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <prvResetNextTaskUnblockTime+0x3c>)
 8005f62:	f04f 32ff 	mov.w	r2, #4294967295
 8005f66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f68:	e008      	b.n	8005f7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <prvResetNextTaskUnblockTime+0x38>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <prvResetNextTaskUnblockTime+0x3c>)
 8005f7a:	6013      	str	r3, [r2, #0]
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	20000e70 	.word	0x20000e70
 8005f8c:	20000ed8 	.word	0x20000ed8

08005f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <xTaskGetSchedulerState+0x34>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	607b      	str	r3, [r7, #4]
 8005fa2:	e008      	b.n	8005fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa4:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <xTaskGetSchedulerState+0x38>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fac:	2302      	movs	r3, #2
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	e001      	b.n	8005fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fb6:	687b      	ldr	r3, [r7, #4]
	}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	20000ec4 	.word	0x20000ec4
 8005fc8:	20000ee0 	.word	0x20000ee0

08005fcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d056      	beq.n	8006090 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fe2:	4b2e      	ldr	r3, [pc, #184]	; (800609c <xTaskPriorityDisinherit+0xd0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d00a      	beq.n	8006002 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	60fb      	str	r3, [r7, #12]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	60bb      	str	r3, [r7, #8]
}
 800601c:	bf00      	nop
 800601e:	e7fe      	b.n	800601e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006024:	1e5a      	subs	r2, r3, #1
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006032:	429a      	cmp	r2, r3
 8006034:	d02c      	beq.n	8006090 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603a:	2b00      	cmp	r3, #0
 800603c:	d128      	bne.n	8006090 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	3304      	adds	r3, #4
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe fc46 	bl	80048d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <xTaskPriorityDisinherit+0xd4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d903      	bls.n	8006070 <xTaskPriorityDisinherit+0xa4>
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <xTaskPriorityDisinherit+0xd4>)
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <xTaskPriorityDisinherit+0xd8>)
 800607e:	441a      	add	r2, r3
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f7fe fbc7 	bl	800481a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800608c:	2301      	movs	r3, #1
 800608e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006090:	697b      	ldr	r3, [r7, #20]
	}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200009e4 	.word	0x200009e4
 80060a0:	20000ec0 	.word	0x20000ec0
 80060a4:	200009e8 	.word	0x200009e8

080060a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060b2:	4b21      	ldr	r3, [pc, #132]	; (8006138 <prvAddCurrentTaskToDelayedList+0x90>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060b8:	4b20      	ldr	r3, [pc, #128]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3304      	adds	r3, #4
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fc08 	bl	80048d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ca:	d10a      	bne.n	80060e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d2:	4b1a      	ldr	r3, [pc, #104]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3304      	adds	r3, #4
 80060d8:	4619      	mov	r1, r3
 80060da:	4819      	ldr	r0, [pc, #100]	; (8006140 <prvAddCurrentTaskToDelayedList+0x98>)
 80060dc:	f7fe fb9d 	bl	800481a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060e0:	e026      	b.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d209      	bcs.n	800610e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060fa:	4b12      	ldr	r3, [pc, #72]	; (8006144 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b0f      	ldr	r3, [pc, #60]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f7fe fbab 	bl	8004862 <vListInsert>
}
 800610c:	e010      	b.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b0a      	ldr	r3, [pc, #40]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4610      	mov	r0, r2
 800611c:	f7fe fba1 	bl	8004862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	d202      	bcs.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800612a:	4a08      	ldr	r2, [pc, #32]	; (800614c <prvAddCurrentTaskToDelayedList+0xa4>)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	6013      	str	r3, [r2, #0]
}
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20000ebc 	.word	0x20000ebc
 800613c:	200009e4 	.word	0x200009e4
 8006140:	20000ea4 	.word	0x20000ea4
 8006144:	20000e74 	.word	0x20000e74
 8006148:	20000e70 	.word	0x20000e70
 800614c:	20000ed8 	.word	0x20000ed8

08006150 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800615a:	f000 fb07 	bl	800676c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800615e:	4b1c      	ldr	r3, [pc, #112]	; (80061d0 <xTimerCreateTimerTask+0x80>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d021      	beq.n	80061aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800616e:	1d3a      	adds	r2, r7, #4
 8006170:	f107 0108 	add.w	r1, r7, #8
 8006174:	f107 030c 	add.w	r3, r7, #12
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe fb07 	bl	800478c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	9202      	str	r2, [sp, #8]
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	2302      	movs	r3, #2
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2300      	movs	r3, #0
 800618e:	460a      	mov	r2, r1
 8006190:	4910      	ldr	r1, [pc, #64]	; (80061d4 <xTimerCreateTimerTask+0x84>)
 8006192:	4811      	ldr	r0, [pc, #68]	; (80061d8 <xTimerCreateTimerTask+0x88>)
 8006194:	f7ff f8b4 	bl	8005300 <xTaskCreateStatic>
 8006198:	4603      	mov	r3, r0
 800619a:	4a10      	ldr	r2, [pc, #64]	; (80061dc <xTimerCreateTimerTask+0x8c>)
 800619c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800619e:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <xTimerCreateTimerTask+0x8c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061a6:	2301      	movs	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80061c6:	697b      	ldr	r3, [r7, #20]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000f14 	.word	0x20000f14
 80061d4:	08007294 	.word	0x08007294
 80061d8:	08006315 	.word	0x08006315
 80061dc:	20000f18 	.word	0x20000f18

080061e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <xTimerGenericCommand+0x2e>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	623b      	str	r3, [r7, #32]
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800620e:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <xTimerGenericCommand+0x98>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d02a      	beq.n	800626c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b05      	cmp	r3, #5
 8006226:	dc18      	bgt.n	800625a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006228:	f7ff feb2 	bl	8005f90 <xTaskGetSchedulerState>
 800622c:	4603      	mov	r3, r0
 800622e:	2b02      	cmp	r3, #2
 8006230:	d109      	bne.n	8006246 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006232:	4b11      	ldr	r3, [pc, #68]	; (8006278 <xTimerGenericCommand+0x98>)
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	f107 0110 	add.w	r1, r7, #16
 800623a:	2300      	movs	r3, #0
 800623c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623e:	f7fe fc77 	bl	8004b30 <xQueueGenericSend>
 8006242:	6278      	str	r0, [r7, #36]	; 0x24
 8006244:	e012      	b.n	800626c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006246:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <xTimerGenericCommand+0x98>)
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	f107 0110 	add.w	r1, r7, #16
 800624e:	2300      	movs	r3, #0
 8006250:	2200      	movs	r2, #0
 8006252:	f7fe fc6d 	bl	8004b30 <xQueueGenericSend>
 8006256:	6278      	str	r0, [r7, #36]	; 0x24
 8006258:	e008      	b.n	800626c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800625a:	4b07      	ldr	r3, [pc, #28]	; (8006278 <xTimerGenericCommand+0x98>)
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	f107 0110 	add.w	r1, r7, #16
 8006262:	2300      	movs	r3, #0
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	f7fe fd61 	bl	8004d2c <xQueueGenericSendFromISR>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800626e:	4618      	mov	r0, r3
 8006270:	3728      	adds	r7, #40	; 0x28
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000f14 	.word	0x20000f14

0800627c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af02      	add	r7, sp, #8
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006286:	4b22      	ldr	r3, [pc, #136]	; (8006310 <prvProcessExpiredTimer+0x94>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	3304      	adds	r3, #4
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe fb1d 	bl	80048d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d022      	beq.n	80062ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	18d1      	adds	r1, r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	6978      	ldr	r0, [r7, #20]
 80062b6:	f000 f8d1 	bl	800645c <prvInsertTimerInActiveList>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01f      	beq.n	8006300 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062c0:	2300      	movs	r3, #0
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	2100      	movs	r1, #0
 80062ca:	6978      	ldr	r0, [r7, #20]
 80062cc:	f7ff ff88 	bl	80061e0 <xTimerGenericCommand>
 80062d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d113      	bne.n	8006300 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	60fb      	str	r3, [r7, #12]
}
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	6978      	ldr	r0, [r7, #20]
 8006306:	4798      	blx	r3
}
 8006308:	bf00      	nop
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000f0c 	.word	0x20000f0c

08006314 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800631c:	f107 0308 	add.w	r3, r7, #8
 8006320:	4618      	mov	r0, r3
 8006322:	f000 f857 	bl	80063d4 <prvGetNextExpireTime>
 8006326:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4619      	mov	r1, r3
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f803 	bl	8006338 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006332:	f000 f8d5 	bl	80064e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006336:	e7f1      	b.n	800631c <prvTimerTask+0x8>

08006338 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006342:	f7ff fa39 	bl	80057b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006346:	f107 0308 	add.w	r3, r7, #8
 800634a:	4618      	mov	r0, r3
 800634c:	f000 f866 	bl	800641c <prvSampleTimeNow>
 8006350:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d130      	bne.n	80063ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <prvProcessTimerOrBlockTask+0x3c>
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	429a      	cmp	r2, r3
 8006364:	d806      	bhi.n	8006374 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006366:	f7ff fa35 	bl	80057d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800636a:	68f9      	ldr	r1, [r7, #12]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff ff85 	bl	800627c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006372:	e024      	b.n	80063be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800637a:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <prvProcessTimerOrBlockTask+0x90>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <prvProcessTimerOrBlockTask+0x50>
 8006384:	2301      	movs	r3, #1
 8006386:	e000      	b.n	800638a <prvProcessTimerOrBlockTask+0x52>
 8006388:	2300      	movs	r3, #0
 800638a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <prvProcessTimerOrBlockTask+0x94>)
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	4619      	mov	r1, r3
 800639a:	f7fe ff7d 	bl	8005298 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800639e:	f7ff fa19 	bl	80057d4 <xTaskResumeAll>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <prvProcessTimerOrBlockTask+0x98>)
 80063aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	f3bf 8f6f 	isb	sy
}
 80063b8:	e001      	b.n	80063be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063ba:	f7ff fa0b 	bl	80057d4 <xTaskResumeAll>
}
 80063be:	bf00      	nop
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000f10 	.word	0x20000f10
 80063cc:	20000f14 	.word	0x20000f14
 80063d0:	e000ed04 	.word	0xe000ed04

080063d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063dc:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <prvGetNextExpireTime+0x44>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <prvGetNextExpireTime+0x16>
 80063e6:	2201      	movs	r2, #1
 80063e8:	e000      	b.n	80063ec <prvGetNextExpireTime+0x18>
 80063ea:	2200      	movs	r2, #0
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d105      	bne.n	8006404 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063f8:	4b07      	ldr	r3, [pc, #28]	; (8006418 <prvGetNextExpireTime+0x44>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	e001      	b.n	8006408 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006408:	68fb      	ldr	r3, [r7, #12]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20000f0c 	.word	0x20000f0c

0800641c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006424:	f7ff fa74 	bl	8005910 <xTaskGetTickCount>
 8006428:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800642a:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <prvSampleTimeNow+0x3c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	429a      	cmp	r2, r3
 8006432:	d205      	bcs.n	8006440 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006434:	f000 f936 	bl	80066a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e002      	b.n	8006446 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006446:	4a04      	ldr	r2, [pc, #16]	; (8006458 <prvSampleTimeNow+0x3c>)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800644c:	68fb      	ldr	r3, [r7, #12]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000f1c 	.word	0x20000f1c

0800645c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800646a:	2300      	movs	r3, #0
 800646c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	d812      	bhi.n	80064a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	429a      	cmp	r2, r3
 800648e:	d302      	bcc.n	8006496 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006490:	2301      	movs	r3, #1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	e01b      	b.n	80064ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006496:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <prvInsertTimerInActiveList+0x7c>)
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3304      	adds	r3, #4
 800649e:	4619      	mov	r1, r3
 80064a0:	4610      	mov	r0, r2
 80064a2:	f7fe f9de 	bl	8004862 <vListInsert>
 80064a6:	e012      	b.n	80064ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d206      	bcs.n	80064be <prvInsertTimerInActiveList+0x62>
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d302      	bcc.n	80064be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e007      	b.n	80064ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064be:	4b07      	ldr	r3, [pc, #28]	; (80064dc <prvInsertTimerInActiveList+0x80>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3304      	adds	r3, #4
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f7fe f9ca 	bl	8004862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064ce:	697b      	ldr	r3, [r7, #20]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000f10 	.word	0x20000f10
 80064dc:	20000f0c 	.word	0x20000f0c

080064e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08e      	sub	sp, #56	; 0x38
 80064e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064e6:	e0ca      	b.n	800667e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da18      	bge.n	8006520 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064ee:	1d3b      	adds	r3, r7, #4
 80064f0:	3304      	adds	r3, #4
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10a      	bne.n	8006510 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	61fb      	str	r3, [r7, #28]
}
 800650c:	bf00      	nop
 800650e:	e7fe      	b.n	800650e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006516:	6850      	ldr	r0, [r2, #4]
 8006518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800651a:	6892      	ldr	r2, [r2, #8]
 800651c:	4611      	mov	r1, r2
 800651e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f2c0 80aa 	blt.w	800667c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	3304      	adds	r3, #4
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe f9cb 	bl	80048d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800653e:	463b      	mov	r3, r7
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff ff6b 	bl	800641c <prvSampleTimeNow>
 8006546:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b09      	cmp	r3, #9
 800654c:	f200 8097 	bhi.w	800667e <prvProcessReceivedCommands+0x19e>
 8006550:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <prvProcessReceivedCommands+0x78>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	08006581 	.word	0x08006581
 800655c:	08006581 	.word	0x08006581
 8006560:	08006581 	.word	0x08006581
 8006564:	080065f5 	.word	0x080065f5
 8006568:	08006609 	.word	0x08006609
 800656c:	08006653 	.word	0x08006653
 8006570:	08006581 	.word	0x08006581
 8006574:	08006581 	.word	0x08006581
 8006578:	080065f5 	.word	0x080065f5
 800657c:	08006609 	.word	0x08006609
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	b2da      	uxtb	r2, r3
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	18d1      	adds	r1, r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a0:	f7ff ff5c 	bl	800645c <prvInsertTimerInActiveList>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d069      	beq.n	800667e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d05e      	beq.n	800667e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	441a      	add	r2, r3
 80065c8:	2300      	movs	r3, #0
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	2300      	movs	r3, #0
 80065ce:	2100      	movs	r1, #0
 80065d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d2:	f7ff fe05 	bl	80061e0 <xTimerGenericCommand>
 80065d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d14f      	bne.n	800667e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	61bb      	str	r3, [r7, #24]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065fa:	f023 0301 	bic.w	r3, r3, #1
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006606:	e03a      	b.n	800667e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	b2da      	uxtb	r2, r3
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	617b      	str	r3, [r7, #20]
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	18d1      	adds	r1, r2, r3
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800664c:	f7ff ff06 	bl	800645c <prvInsertTimerInActiveList>
					break;
 8006650:	e015      	b.n	800667e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d103      	bne.n	8006668 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006662:	f000 fbdd 	bl	8006e20 <vPortFree>
 8006666:	e00a      	b.n	800667e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666e:	f023 0301 	bic.w	r3, r3, #1
 8006672:	b2da      	uxtb	r2, r3
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800667a:	e000      	b.n	800667e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800667c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800667e:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <prvProcessReceivedCommands+0x1c0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	1d39      	adds	r1, r7, #4
 8006684:	2200      	movs	r2, #0
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe fbec 	bl	8004e64 <xQueueReceive>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	f47f af2a 	bne.w	80064e8 <prvProcessReceivedCommands+0x8>
	}
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	3730      	adds	r7, #48	; 0x30
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000f14 	.word	0x20000f14

080066a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066aa:	e048      	b.n	800673e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066ac:	4b2d      	ldr	r3, [pc, #180]	; (8006764 <prvSwitchTimerLists+0xc0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b6:	4b2b      	ldr	r3, [pc, #172]	; (8006764 <prvSwitchTimerLists+0xc0>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe f905 	bl	80048d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d02e      	beq.n	800673e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4413      	add	r3, r2
 80066e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d90e      	bls.n	8006710 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066fe:	4b19      	ldr	r3, [pc, #100]	; (8006764 <prvSwitchTimerLists+0xc0>)
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3304      	adds	r3, #4
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fe f8aa 	bl	8004862 <vListInsert>
 800670e:	e016      	b.n	800673e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006710:	2300      	movs	r3, #0
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	2100      	movs	r1, #0
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7ff fd60 	bl	80061e0 <xTimerGenericCommand>
 8006720:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	603b      	str	r3, [r7, #0]
}
 800673a:	bf00      	nop
 800673c:	e7fe      	b.n	800673c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800673e:	4b09      	ldr	r3, [pc, #36]	; (8006764 <prvSwitchTimerLists+0xc0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1b1      	bne.n	80066ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <prvSwitchTimerLists+0xc0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800674e:	4b06      	ldr	r3, [pc, #24]	; (8006768 <prvSwitchTimerLists+0xc4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a04      	ldr	r2, [pc, #16]	; (8006764 <prvSwitchTimerLists+0xc0>)
 8006754:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006756:	4a04      	ldr	r2, [pc, #16]	; (8006768 <prvSwitchTimerLists+0xc4>)
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	6013      	str	r3, [r2, #0]
}
 800675c:	bf00      	nop
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	20000f0c 	.word	0x20000f0c
 8006768:	20000f10 	.word	0x20000f10

0800676c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006772:	f000 f967 	bl	8006a44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <prvCheckForValidListAndQueue+0x60>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d120      	bne.n	80067c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800677e:	4814      	ldr	r0, [pc, #80]	; (80067d0 <prvCheckForValidListAndQueue+0x64>)
 8006780:	f7fe f81e 	bl	80047c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006784:	4813      	ldr	r0, [pc, #76]	; (80067d4 <prvCheckForValidListAndQueue+0x68>)
 8006786:	f7fe f81b 	bl	80047c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800678a:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <prvCheckForValidListAndQueue+0x6c>)
 800678c:	4a10      	ldr	r2, [pc, #64]	; (80067d0 <prvCheckForValidListAndQueue+0x64>)
 800678e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006790:	4b12      	ldr	r3, [pc, #72]	; (80067dc <prvCheckForValidListAndQueue+0x70>)
 8006792:	4a10      	ldr	r2, [pc, #64]	; (80067d4 <prvCheckForValidListAndQueue+0x68>)
 8006794:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006796:	2300      	movs	r3, #0
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <prvCheckForValidListAndQueue+0x74>)
 800679c:	4a11      	ldr	r2, [pc, #68]	; (80067e4 <prvCheckForValidListAndQueue+0x78>)
 800679e:	2110      	movs	r1, #16
 80067a0:	200a      	movs	r0, #10
 80067a2:	f7fe f929 	bl	80049f8 <xQueueGenericCreateStatic>
 80067a6:	4603      	mov	r3, r0
 80067a8:	4a08      	ldr	r2, [pc, #32]	; (80067cc <prvCheckForValidListAndQueue+0x60>)
 80067aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067ac:	4b07      	ldr	r3, [pc, #28]	; (80067cc <prvCheckForValidListAndQueue+0x60>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067b4:	4b05      	ldr	r3, [pc, #20]	; (80067cc <prvCheckForValidListAndQueue+0x60>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	490b      	ldr	r1, [pc, #44]	; (80067e8 <prvCheckForValidListAndQueue+0x7c>)
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fd42 	bl	8005244 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067c0:	f000 f970 	bl	8006aa4 <vPortExitCritical>
}
 80067c4:	bf00      	nop
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000f14 	.word	0x20000f14
 80067d0:	20000ee4 	.word	0x20000ee4
 80067d4:	20000ef8 	.word	0x20000ef8
 80067d8:	20000f0c 	.word	0x20000f0c
 80067dc:	20000f10 	.word	0x20000f10
 80067e0:	20000fc0 	.word	0x20000fc0
 80067e4:	20000f20 	.word	0x20000f20
 80067e8:	0800729c 	.word	0x0800729c

080067ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3b04      	subs	r3, #4
 80067fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3b04      	subs	r3, #4
 800680a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f023 0201 	bic.w	r2, r3, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3b04      	subs	r3, #4
 800681a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800681c:	4a0c      	ldr	r2, [pc, #48]	; (8006850 <pxPortInitialiseStack+0x64>)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3b14      	subs	r3, #20
 8006826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3b04      	subs	r3, #4
 8006832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f06f 0202 	mvn.w	r2, #2
 800683a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3b20      	subs	r3, #32
 8006840:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	08006855 	.word	0x08006855

08006854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <prvTaskExitError+0x54>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d00a      	beq.n	800687e <prvTaskExitError+0x2a>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	60fb      	str	r3, [r7, #12]
}
 800687a:	bf00      	nop
 800687c:	e7fe      	b.n	800687c <prvTaskExitError+0x28>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	60bb      	str	r3, [r7, #8]
}
 8006890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006892:	bf00      	nop
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0fc      	beq.n	8006894 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800689a:	bf00      	nop
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	2000000c 	.word	0x2000000c
 80068ac:	00000000 	.word	0x00000000

080068b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068b0:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <pxCurrentTCBConst2>)
 80068b2:	6819      	ldr	r1, [r3, #0]
 80068b4:	6808      	ldr	r0, [r1, #0]
 80068b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ba:	f380 8809 	msr	PSP, r0
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f04f 0000 	mov.w	r0, #0
 80068c6:	f380 8811 	msr	BASEPRI, r0
 80068ca:	4770      	bx	lr
 80068cc:	f3af 8000 	nop.w

080068d0 <pxCurrentTCBConst2>:
 80068d0:	200009e4 	.word	0x200009e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop

080068d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068d8:	4808      	ldr	r0, [pc, #32]	; (80068fc <prvPortStartFirstTask+0x24>)
 80068da:	6800      	ldr	r0, [r0, #0]
 80068dc:	6800      	ldr	r0, [r0, #0]
 80068de:	f380 8808 	msr	MSP, r0
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f380 8814 	msr	CONTROL, r0
 80068ea:	b662      	cpsie	i
 80068ec:	b661      	cpsie	f
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	df00      	svc	0
 80068f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068fa:	bf00      	nop
 80068fc:	e000ed08 	.word	0xe000ed08

08006900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006906:	4b46      	ldr	r3, [pc, #280]	; (8006a20 <xPortStartScheduler+0x120>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a46      	ldr	r2, [pc, #280]	; (8006a24 <xPortStartScheduler+0x124>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d10a      	bne.n	8006926 <xPortStartScheduler+0x26>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	613b      	str	r3, [r7, #16]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006926:	4b3e      	ldr	r3, [pc, #248]	; (8006a20 <xPortStartScheduler+0x120>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a3f      	ldr	r2, [pc, #252]	; (8006a28 <xPortStartScheduler+0x128>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d10a      	bne.n	8006946 <xPortStartScheduler+0x46>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006946:	4b39      	ldr	r3, [pc, #228]	; (8006a2c <xPortStartScheduler+0x12c>)
 8006948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	22ff      	movs	r2, #255	; 0xff
 8006956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006968:	b2da      	uxtb	r2, r3
 800696a:	4b31      	ldr	r3, [pc, #196]	; (8006a30 <xPortStartScheduler+0x130>)
 800696c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800696e:	4b31      	ldr	r3, [pc, #196]	; (8006a34 <xPortStartScheduler+0x134>)
 8006970:	2207      	movs	r2, #7
 8006972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006974:	e009      	b.n	800698a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006976:	4b2f      	ldr	r3, [pc, #188]	; (8006a34 <xPortStartScheduler+0x134>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3b01      	subs	r3, #1
 800697c:	4a2d      	ldr	r2, [pc, #180]	; (8006a34 <xPortStartScheduler+0x134>)
 800697e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	b2db      	uxtb	r3, r3
 8006988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006992:	2b80      	cmp	r3, #128	; 0x80
 8006994:	d0ef      	beq.n	8006976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006996:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <xPortStartScheduler+0x134>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f1c3 0307 	rsb	r3, r3, #7
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d00a      	beq.n	80069b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	60bb      	str	r3, [r7, #8]
}
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069b8:	4b1e      	ldr	r3, [pc, #120]	; (8006a34 <xPortStartScheduler+0x134>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	4a1d      	ldr	r2, [pc, #116]	; (8006a34 <xPortStartScheduler+0x134>)
 80069c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069c2:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <xPortStartScheduler+0x134>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ca:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <xPortStartScheduler+0x134>)
 80069cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069d6:	4b18      	ldr	r3, [pc, #96]	; (8006a38 <xPortStartScheduler+0x138>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a17      	ldr	r2, [pc, #92]	; (8006a38 <xPortStartScheduler+0x138>)
 80069dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <xPortStartScheduler+0x138>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a14      	ldr	r2, [pc, #80]	; (8006a38 <xPortStartScheduler+0x138>)
 80069e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069ee:	f000 f8dd 	bl	8006bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069f2:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <xPortStartScheduler+0x13c>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069f8:	f000 f8fc 	bl	8006bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069fc:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <xPortStartScheduler+0x140>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a0f      	ldr	r2, [pc, #60]	; (8006a40 <xPortStartScheduler+0x140>)
 8006a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a08:	f7ff ff66 	bl	80068d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a0c:	f7ff f84a 	bl	8005aa4 <vTaskSwitchContext>
	prvTaskExitError();
 8006a10:	f7ff ff20 	bl	8006854 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	e000ed00 	.word	0xe000ed00
 8006a24:	410fc271 	.word	0x410fc271
 8006a28:	410fc270 	.word	0x410fc270
 8006a2c:	e000e400 	.word	0xe000e400
 8006a30:	20001010 	.word	0x20001010
 8006a34:	20001014 	.word	0x20001014
 8006a38:	e000ed20 	.word	0xe000ed20
 8006a3c:	2000000c 	.word	0x2000000c
 8006a40:	e000ef34 	.word	0xe000ef34

08006a44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	607b      	str	r3, [r7, #4]
}
 8006a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <vPortEnterCritical+0x58>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3301      	adds	r3, #1
 8006a64:	4a0d      	ldr	r2, [pc, #52]	; (8006a9c <vPortEnterCritical+0x58>)
 8006a66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a68:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <vPortEnterCritical+0x58>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d10f      	bne.n	8006a90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <vPortEnterCritical+0x5c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	603b      	str	r3, [r7, #0]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <vPortEnterCritical+0x4a>
	}
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	2000000c 	.word	0x2000000c
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aaa:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <vPortExitCritical+0x50>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <vPortExitCritical+0x24>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	607b      	str	r3, [r7, #4]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <vPortExitCritical+0x50>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <vPortExitCritical+0x50>)
 8006ad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ad2:	4b08      	ldr	r3, [pc, #32]	; (8006af4 <vPortExitCritical+0x50>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d105      	bne.n	8006ae6 <vPortExitCritical+0x42>
 8006ada:	2300      	movs	r3, #0
 8006adc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	f383 8811 	msr	BASEPRI, r3
}
 8006ae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	2000000c 	.word	0x2000000c
	...

08006b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b00:	f3ef 8009 	mrs	r0, PSP
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <pxCurrentTCBConst>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	f01e 0f10 	tst.w	lr, #16
 8006b10:	bf08      	it	eq
 8006b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1a:	6010      	str	r0, [r2, #0]
 8006b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b24:	f380 8811 	msr	BASEPRI, r0
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f7fe ffb8 	bl	8005aa4 <vTaskSwitchContext>
 8006b34:	f04f 0000 	mov.w	r0, #0
 8006b38:	f380 8811 	msr	BASEPRI, r0
 8006b3c:	bc09      	pop	{r0, r3}
 8006b3e:	6819      	ldr	r1, [r3, #0]
 8006b40:	6808      	ldr	r0, [r1, #0]
 8006b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b46:	f01e 0f10 	tst.w	lr, #16
 8006b4a:	bf08      	it	eq
 8006b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b50:	f380 8809 	msr	PSP, r0
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	f3af 8000 	nop.w

08006b60 <pxCurrentTCBConst>:
 8006b60:	200009e4 	.word	0x200009e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop

08006b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	607b      	str	r3, [r7, #4]
}
 8006b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b82:	f7fe fed5 	bl	8005930 <xTaskIncrementTick>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b8c:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <xPortSysTickHandler+0x40>)
 8006b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	2300      	movs	r3, #0
 8006b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f383 8811 	msr	BASEPRI, r3
}
 8006b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	e000ed04 	.word	0xe000ed04

08006bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <vPortSetupTimerInterrupt+0x34>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <vPortSetupTimerInterrupt+0x38>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <vPortSetupTimerInterrupt+0x3c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <vPortSetupTimerInterrupt+0x40>)
 8006bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc6:	099b      	lsrs	r3, r3, #6
 8006bc8:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <vPortSetupTimerInterrupt+0x44>)
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bce:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <vPortSetupTimerInterrupt+0x34>)
 8006bd0:	2207      	movs	r2, #7
 8006bd2:	601a      	str	r2, [r3, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	e000e010 	.word	0xe000e010
 8006be4:	e000e018 	.word	0xe000e018
 8006be8:	20000000 	.word	0x20000000
 8006bec:	10624dd3 	.word	0x10624dd3
 8006bf0:	e000e014 	.word	0xe000e014

08006bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c04 <vPortEnableVFP+0x10>
 8006bf8:	6801      	ldr	r1, [r0, #0]
 8006bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bfe:	6001      	str	r1, [r0, #0]
 8006c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c02:	bf00      	nop
 8006c04:	e000ed88 	.word	0xe000ed88

08006c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c0e:	f3ef 8305 	mrs	r3, IPSR
 8006c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b0f      	cmp	r3, #15
 8006c18:	d914      	bls.n	8006c44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c1a:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <vPortValidateInterruptPriority+0x70>)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c24:	4b15      	ldr	r3, [pc, #84]	; (8006c7c <vPortValidateInterruptPriority+0x74>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	7afa      	ldrb	r2, [r7, #11]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d20a      	bcs.n	8006c44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <vPortValidateInterruptPriority+0x78>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <vPortValidateInterruptPriority+0x7c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d90a      	bls.n	8006c6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	603b      	str	r3, [r7, #0]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <vPortValidateInterruptPriority+0x60>
	}
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	e000e3f0 	.word	0xe000e3f0
 8006c7c:	20001010 	.word	0x20001010
 8006c80:	e000ed0c 	.word	0xe000ed0c
 8006c84:	20001014 	.word	0x20001014

08006c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08a      	sub	sp, #40	; 0x28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c94:	f7fe fd90 	bl	80057b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c98:	4b5b      	ldr	r3, [pc, #364]	; (8006e08 <pvPortMalloc+0x180>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ca0:	f000 f920 	bl	8006ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ca4:	4b59      	ldr	r3, [pc, #356]	; (8006e0c <pvPortMalloc+0x184>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f040 8093 	bne.w	8006dd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01d      	beq.n	8006cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006cb8:	2208      	movs	r2, #8
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d014      	beq.n	8006cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f023 0307 	bic.w	r3, r3, #7
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	617b      	str	r3, [r7, #20]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d06e      	beq.n	8006dd8 <pvPortMalloc+0x150>
 8006cfa:	4b45      	ldr	r3, [pc, #276]	; (8006e10 <pvPortMalloc+0x188>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d869      	bhi.n	8006dd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d04:	4b43      	ldr	r3, [pc, #268]	; (8006e14 <pvPortMalloc+0x18c>)
 8006d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d08:	4b42      	ldr	r3, [pc, #264]	; (8006e14 <pvPortMalloc+0x18c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d0e:	e004      	b.n	8006d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d903      	bls.n	8006d2c <pvPortMalloc+0xa4>
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1f1      	bne.n	8006d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d2c:	4b36      	ldr	r3, [pc, #216]	; (8006e08 <pvPortMalloc+0x180>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d050      	beq.n	8006dd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	4413      	add	r3, r2
 8006d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	1ad2      	subs	r2, r2, r3
 8006d50:	2308      	movs	r3, #8
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d91f      	bls.n	8006d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <pvPortMalloc+0xf8>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	613b      	str	r3, [r7, #16]
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d92:	69b8      	ldr	r0, [r7, #24]
 8006d94:	f000 f908 	bl	8006fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d98:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <pvPortMalloc+0x188>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	4a1b      	ldr	r2, [pc, #108]	; (8006e10 <pvPortMalloc+0x188>)
 8006da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006da6:	4b1a      	ldr	r3, [pc, #104]	; (8006e10 <pvPortMalloc+0x188>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <pvPortMalloc+0x190>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d203      	bcs.n	8006dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006db2:	4b17      	ldr	r3, [pc, #92]	; (8006e10 <pvPortMalloc+0x188>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <pvPortMalloc+0x190>)
 8006db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <pvPortMalloc+0x184>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <pvPortMalloc+0x194>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	4a11      	ldr	r2, [pc, #68]	; (8006e1c <pvPortMalloc+0x194>)
 8006dd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006dd8:	f7fe fcfc 	bl	80057d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <pvPortMalloc+0x174>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60fb      	str	r3, [r7, #12]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <pvPortMalloc+0x172>
	return pvReturn;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3728      	adds	r7, #40	; 0x28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20001bd8 	.word	0x20001bd8
 8006e0c:	20001bec 	.word	0x20001bec
 8006e10:	20001bdc 	.word	0x20001bdc
 8006e14:	20001bd0 	.word	0x20001bd0
 8006e18:	20001be0 	.word	0x20001be0
 8006e1c:	20001be4 	.word	0x20001be4

08006e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d04d      	beq.n	8006ece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e32:	2308      	movs	r3, #8
 8006e34:	425b      	negs	r3, r3
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4413      	add	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	4b24      	ldr	r3, [pc, #144]	; (8006ed8 <vPortFree+0xb8>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <vPortFree+0x44>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	60fb      	str	r3, [r7, #12]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <vPortFree+0x62>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	60bb      	str	r3, [r7, #8]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <vPortFree+0xb8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01e      	beq.n	8006ece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d11a      	bne.n	8006ece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <vPortFree+0xb8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	43db      	mvns	r3, r3
 8006ea2:	401a      	ands	r2, r3
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ea8:	f7fe fc86 	bl	80057b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <vPortFree+0xbc>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	4a09      	ldr	r2, [pc, #36]	; (8006edc <vPortFree+0xbc>)
 8006eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eba:	6938      	ldr	r0, [r7, #16]
 8006ebc:	f000 f874 	bl	8006fa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <vPortFree+0xc0>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	4a06      	ldr	r2, [pc, #24]	; (8006ee0 <vPortFree+0xc0>)
 8006ec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006eca:	f7fe fc83 	bl	80057d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ece:	bf00      	nop
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20001bec 	.word	0x20001bec
 8006edc:	20001bdc 	.word	0x20001bdc
 8006ee0:	20001be8 	.word	0x20001be8

08006ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ef0:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <prvHeapInit+0xac>)
 8006ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3307      	adds	r3, #7
 8006f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <prvHeapInit+0xac>)
 8006f14:	4413      	add	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f1c:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <prvHeapInit+0xb0>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f22:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <prvHeapInit+0xb0>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f30:	2208      	movs	r2, #8
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0307 	bic.w	r3, r3, #7
 8006f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <prvHeapInit+0xb4>)
 8006f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <prvHeapInit+0xb4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f4e:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <prvHeapInit+0xb4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	1ad2      	subs	r2, r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <prvHeapInit+0xb4>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <prvHeapInit+0xb8>)
 8006f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <prvHeapInit+0xbc>)
 8006f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f7c:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <prvHeapInit+0xc0>)
 8006f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f82:	601a      	str	r2, [r3, #0]
}
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	20001018 	.word	0x20001018
 8006f94:	20001bd0 	.word	0x20001bd0
 8006f98:	20001bd8 	.word	0x20001bd8
 8006f9c:	20001be0 	.word	0x20001be0
 8006fa0:	20001bdc 	.word	0x20001bdc
 8006fa4:	20001bec 	.word	0x20001bec

08006fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fb0:	4b28      	ldr	r3, [pc, #160]	; (8007054 <prvInsertBlockIntoFreeList+0xac>)
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e002      	b.n	8006fbc <prvInsertBlockIntoFreeList+0x14>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d8f7      	bhi.n	8006fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d108      	bne.n	8006fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	441a      	add	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	441a      	add	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d118      	bne.n	8007030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <prvInsertBlockIntoFreeList+0xb0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d00d      	beq.n	8007026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	441a      	add	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e008      	b.n	8007038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <prvInsertBlockIntoFreeList+0xb0>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e003      	b.n	8007038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d002      	beq.n	8007046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20001bd0 	.word	0x20001bd0
 8007058:	20001bd8 	.word	0x20001bd8

0800705c <__libc_init_array>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	4d0d      	ldr	r5, [pc, #52]	; (8007094 <__libc_init_array+0x38>)
 8007060:	4c0d      	ldr	r4, [pc, #52]	; (8007098 <__libc_init_array+0x3c>)
 8007062:	1b64      	subs	r4, r4, r5
 8007064:	10a4      	asrs	r4, r4, #2
 8007066:	2600      	movs	r6, #0
 8007068:	42a6      	cmp	r6, r4
 800706a:	d109      	bne.n	8007080 <__libc_init_array+0x24>
 800706c:	4d0b      	ldr	r5, [pc, #44]	; (800709c <__libc_init_array+0x40>)
 800706e:	4c0c      	ldr	r4, [pc, #48]	; (80070a0 <__libc_init_array+0x44>)
 8007070:	f000 f8f2 	bl	8007258 <_init>
 8007074:	1b64      	subs	r4, r4, r5
 8007076:	10a4      	asrs	r4, r4, #2
 8007078:	2600      	movs	r6, #0
 800707a:	42a6      	cmp	r6, r4
 800707c:	d105      	bne.n	800708a <__libc_init_array+0x2e>
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	f855 3b04 	ldr.w	r3, [r5], #4
 8007084:	4798      	blx	r3
 8007086:	3601      	adds	r6, #1
 8007088:	e7ee      	b.n	8007068 <__libc_init_array+0xc>
 800708a:	f855 3b04 	ldr.w	r3, [r5], #4
 800708e:	4798      	blx	r3
 8007090:	3601      	adds	r6, #1
 8007092:	e7f2      	b.n	800707a <__libc_init_array+0x1e>
 8007094:	08007394 	.word	0x08007394
 8007098:	08007394 	.word	0x08007394
 800709c:	08007394 	.word	0x08007394
 80070a0:	08007398 	.word	0x08007398

080070a4 <__retarget_lock_acquire_recursive>:
 80070a4:	4770      	bx	lr

080070a6 <__retarget_lock_release_recursive>:
 80070a6:	4770      	bx	lr

080070a8 <memcpy>:
 80070a8:	440a      	add	r2, r1
 80070aa:	4291      	cmp	r1, r2
 80070ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80070b0:	d100      	bne.n	80070b4 <memcpy+0xc>
 80070b2:	4770      	bx	lr
 80070b4:	b510      	push	{r4, lr}
 80070b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070be:	4291      	cmp	r1, r2
 80070c0:	d1f9      	bne.n	80070b6 <memcpy+0xe>
 80070c2:	bd10      	pop	{r4, pc}

080070c4 <memset>:
 80070c4:	4402      	add	r2, r0
 80070c6:	4603      	mov	r3, r0
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d100      	bne.n	80070ce <memset+0xa>
 80070cc:	4770      	bx	lr
 80070ce:	f803 1b01 	strb.w	r1, [r3], #1
 80070d2:	e7f9      	b.n	80070c8 <memset+0x4>

080070d4 <cleanup_glue>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	460c      	mov	r4, r1
 80070d8:	6809      	ldr	r1, [r1, #0]
 80070da:	4605      	mov	r5, r0
 80070dc:	b109      	cbz	r1, 80070e2 <cleanup_glue+0xe>
 80070de:	f7ff fff9 	bl	80070d4 <cleanup_glue>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ea:	f000 b869 	b.w	80071c0 <_free_r>
	...

080070f0 <_reclaim_reent>:
 80070f0:	4b2c      	ldr	r3, [pc, #176]	; (80071a4 <_reclaim_reent+0xb4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4283      	cmp	r3, r0
 80070f6:	b570      	push	{r4, r5, r6, lr}
 80070f8:	4604      	mov	r4, r0
 80070fa:	d051      	beq.n	80071a0 <_reclaim_reent+0xb0>
 80070fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80070fe:	b143      	cbz	r3, 8007112 <_reclaim_reent+0x22>
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d14a      	bne.n	800719c <_reclaim_reent+0xac>
 8007106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007108:	6819      	ldr	r1, [r3, #0]
 800710a:	b111      	cbz	r1, 8007112 <_reclaim_reent+0x22>
 800710c:	4620      	mov	r0, r4
 800710e:	f000 f857 	bl	80071c0 <_free_r>
 8007112:	6961      	ldr	r1, [r4, #20]
 8007114:	b111      	cbz	r1, 800711c <_reclaim_reent+0x2c>
 8007116:	4620      	mov	r0, r4
 8007118:	f000 f852 	bl	80071c0 <_free_r>
 800711c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800711e:	b111      	cbz	r1, 8007126 <_reclaim_reent+0x36>
 8007120:	4620      	mov	r0, r4
 8007122:	f000 f84d 	bl	80071c0 <_free_r>
 8007126:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007128:	b111      	cbz	r1, 8007130 <_reclaim_reent+0x40>
 800712a:	4620      	mov	r0, r4
 800712c:	f000 f848 	bl	80071c0 <_free_r>
 8007130:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007132:	b111      	cbz	r1, 800713a <_reclaim_reent+0x4a>
 8007134:	4620      	mov	r0, r4
 8007136:	f000 f843 	bl	80071c0 <_free_r>
 800713a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800713c:	b111      	cbz	r1, 8007144 <_reclaim_reent+0x54>
 800713e:	4620      	mov	r0, r4
 8007140:	f000 f83e 	bl	80071c0 <_free_r>
 8007144:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007146:	b111      	cbz	r1, 800714e <_reclaim_reent+0x5e>
 8007148:	4620      	mov	r0, r4
 800714a:	f000 f839 	bl	80071c0 <_free_r>
 800714e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007150:	b111      	cbz	r1, 8007158 <_reclaim_reent+0x68>
 8007152:	4620      	mov	r0, r4
 8007154:	f000 f834 	bl	80071c0 <_free_r>
 8007158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800715a:	b111      	cbz	r1, 8007162 <_reclaim_reent+0x72>
 800715c:	4620      	mov	r0, r4
 800715e:	f000 f82f 	bl	80071c0 <_free_r>
 8007162:	69a3      	ldr	r3, [r4, #24]
 8007164:	b1e3      	cbz	r3, 80071a0 <_reclaim_reent+0xb0>
 8007166:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007168:	4620      	mov	r0, r4
 800716a:	4798      	blx	r3
 800716c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800716e:	b1b9      	cbz	r1, 80071a0 <_reclaim_reent+0xb0>
 8007170:	4620      	mov	r0, r4
 8007172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007176:	f7ff bfad 	b.w	80070d4 <cleanup_glue>
 800717a:	5949      	ldr	r1, [r1, r5]
 800717c:	b941      	cbnz	r1, 8007190 <_reclaim_reent+0xa0>
 800717e:	3504      	adds	r5, #4
 8007180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007182:	2d80      	cmp	r5, #128	; 0x80
 8007184:	68d9      	ldr	r1, [r3, #12]
 8007186:	d1f8      	bne.n	800717a <_reclaim_reent+0x8a>
 8007188:	4620      	mov	r0, r4
 800718a:	f000 f819 	bl	80071c0 <_free_r>
 800718e:	e7ba      	b.n	8007106 <_reclaim_reent+0x16>
 8007190:	680e      	ldr	r6, [r1, #0]
 8007192:	4620      	mov	r0, r4
 8007194:	f000 f814 	bl	80071c0 <_free_r>
 8007198:	4631      	mov	r1, r6
 800719a:	e7ef      	b.n	800717c <_reclaim_reent+0x8c>
 800719c:	2500      	movs	r5, #0
 800719e:	e7ef      	b.n	8007180 <_reclaim_reent+0x90>
 80071a0:	bd70      	pop	{r4, r5, r6, pc}
 80071a2:	bf00      	nop
 80071a4:	20000010 	.word	0x20000010

080071a8 <__malloc_lock>:
 80071a8:	4801      	ldr	r0, [pc, #4]	; (80071b0 <__malloc_lock+0x8>)
 80071aa:	f7ff bf7b 	b.w	80070a4 <__retarget_lock_acquire_recursive>
 80071ae:	bf00      	nop
 80071b0:	20001bf0 	.word	0x20001bf0

080071b4 <__malloc_unlock>:
 80071b4:	4801      	ldr	r0, [pc, #4]	; (80071bc <__malloc_unlock+0x8>)
 80071b6:	f7ff bf76 	b.w	80070a6 <__retarget_lock_release_recursive>
 80071ba:	bf00      	nop
 80071bc:	20001bf0 	.word	0x20001bf0

080071c0 <_free_r>:
 80071c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071c2:	2900      	cmp	r1, #0
 80071c4:	d044      	beq.n	8007250 <_free_r+0x90>
 80071c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ca:	9001      	str	r0, [sp, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f1a1 0404 	sub.w	r4, r1, #4
 80071d2:	bfb8      	it	lt
 80071d4:	18e4      	addlt	r4, r4, r3
 80071d6:	f7ff ffe7 	bl	80071a8 <__malloc_lock>
 80071da:	4a1e      	ldr	r2, [pc, #120]	; (8007254 <_free_r+0x94>)
 80071dc:	9801      	ldr	r0, [sp, #4]
 80071de:	6813      	ldr	r3, [r2, #0]
 80071e0:	b933      	cbnz	r3, 80071f0 <_free_r+0x30>
 80071e2:	6063      	str	r3, [r4, #4]
 80071e4:	6014      	str	r4, [r2, #0]
 80071e6:	b003      	add	sp, #12
 80071e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071ec:	f7ff bfe2 	b.w	80071b4 <__malloc_unlock>
 80071f0:	42a3      	cmp	r3, r4
 80071f2:	d908      	bls.n	8007206 <_free_r+0x46>
 80071f4:	6825      	ldr	r5, [r4, #0]
 80071f6:	1961      	adds	r1, r4, r5
 80071f8:	428b      	cmp	r3, r1
 80071fa:	bf01      	itttt	eq
 80071fc:	6819      	ldreq	r1, [r3, #0]
 80071fe:	685b      	ldreq	r3, [r3, #4]
 8007200:	1949      	addeq	r1, r1, r5
 8007202:	6021      	streq	r1, [r4, #0]
 8007204:	e7ed      	b.n	80071e2 <_free_r+0x22>
 8007206:	461a      	mov	r2, r3
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	b10b      	cbz	r3, 8007210 <_free_r+0x50>
 800720c:	42a3      	cmp	r3, r4
 800720e:	d9fa      	bls.n	8007206 <_free_r+0x46>
 8007210:	6811      	ldr	r1, [r2, #0]
 8007212:	1855      	adds	r5, r2, r1
 8007214:	42a5      	cmp	r5, r4
 8007216:	d10b      	bne.n	8007230 <_free_r+0x70>
 8007218:	6824      	ldr	r4, [r4, #0]
 800721a:	4421      	add	r1, r4
 800721c:	1854      	adds	r4, r2, r1
 800721e:	42a3      	cmp	r3, r4
 8007220:	6011      	str	r1, [r2, #0]
 8007222:	d1e0      	bne.n	80071e6 <_free_r+0x26>
 8007224:	681c      	ldr	r4, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	6053      	str	r3, [r2, #4]
 800722a:	4421      	add	r1, r4
 800722c:	6011      	str	r1, [r2, #0]
 800722e:	e7da      	b.n	80071e6 <_free_r+0x26>
 8007230:	d902      	bls.n	8007238 <_free_r+0x78>
 8007232:	230c      	movs	r3, #12
 8007234:	6003      	str	r3, [r0, #0]
 8007236:	e7d6      	b.n	80071e6 <_free_r+0x26>
 8007238:	6825      	ldr	r5, [r4, #0]
 800723a:	1961      	adds	r1, r4, r5
 800723c:	428b      	cmp	r3, r1
 800723e:	bf04      	itt	eq
 8007240:	6819      	ldreq	r1, [r3, #0]
 8007242:	685b      	ldreq	r3, [r3, #4]
 8007244:	6063      	str	r3, [r4, #4]
 8007246:	bf04      	itt	eq
 8007248:	1949      	addeq	r1, r1, r5
 800724a:	6021      	streq	r1, [r4, #0]
 800724c:	6054      	str	r4, [r2, #4]
 800724e:	e7ca      	b.n	80071e6 <_free_r+0x26>
 8007250:	b003      	add	sp, #12
 8007252:	bd30      	pop	{r4, r5, pc}
 8007254:	20001bf4 	.word	0x20001bf4

08007258 <_init>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr

08007264 <_fini>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr
